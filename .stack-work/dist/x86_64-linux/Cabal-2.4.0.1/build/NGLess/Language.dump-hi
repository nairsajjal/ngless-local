
==================== FINAL INTERFACE ====================
2020-02-24 04:14:57.658223166 UTC

interface NGLess-1.1.0-965Np14lOUvJ2rS9XGhph5:Language 8065
  interface hash: 04638295ee19215ee8d1897ba3dc3d20
  ABI hash: 93f0f50a5c7ee77231d71d6a98e7a8ca
  export-list hash: 6aa5d24204c11e6b2a36767cd645b21f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1eeb64675462c8857e1c8221480d5248
  opt_hash: 9851e58a0ec35d0fd39c07cdbeb6257b
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.recursiveAnalyse
  Language.recursiveTransform
  Language.staticValue
  Language.usedVariables
  Data.FastQ.ReadSet{Data.FastQ.ReadSet pairedSamples singleSamples}
  Language.BOp{Language.BOpAdd Language.BOpEQ Language.BOpGT Language.BOpGTE Language.BOpLT Language.BOpLTE Language.BOpMul Language.BOpNEQ Language.BOpPathAppend}
  Language.Block{Language.Block blockBody blockVariable}
  Language.Expression{Language.Assignment Language.BinaryOp Language.BuiltinConstant Language.Condition Language.ConstBool Language.ConstDouble Language.ConstInt Language.ConstStr Language.ConstSymbol Language.Continue Language.Discard Language.FunctionCall Language.IndexExpression Language.ListExpression Language.Lookup Language.MethodCall Language.Optimized Language.Sequence Language.UnaryOp}
  Language.FuncName{Language.FuncName unwrapFuncName}
  Language.Header{Language.Header nglModules nglVersion}
  Language.Index{Language.IndexOne Language.IndexTwo}
  Language.MethodName{Language.MethodName unwrapMethodName}
  Language.ModInfo{Language.LocalModInfo Language.ModInfo modName modVersion}
  Language.NGLType{Language.NGLAny Language.NGLBool Language.NGLCounts Language.NGLDouble Language.NGLFilename Language.NGLInteger Language.NGLMappedRead Language.NGLMappedReadSet Language.NGLRead Language.NGLReadSet Language.NGLSequenceSet Language.NGLString Language.NGLSymbol Language.NGLVoid Language.NGList}
  Language.NGLessObject{Language.NGOBool Language.NGOCounts Language.NGODouble Language.NGOExpression Language.NGOFilename Language.NGOInteger Language.NGOList Language.NGOMappedRead Language.NGOMappedReadSet Language.NGOReadSet Language.NGOSequenceSet Language.NGOShortRead Language.NGOString Language.NGOSymbol Language.NGOVoid nglReference nglSamFile nglgroupName}
  Language.OptimizedExpression{Language.LenThresholdDiscard Language.SubstrimReassign}
  Language.Script{Language.Script nglBody nglHeader}
  Language.UOp{Language.UOpLen Language.UOpMinus Language.UOpNot}
  Language.Variable{Language.Variable}
module dependencies: CmdArgs Configuration Data.FastQ Data.Sam
                     Dependencies.Embedded FileManagement FileOrStream NGLess.NGError
                     NGLess.NGLEnvironment Output Paths_NGLess Utils.Conduit
                     Utils.LockFile Utils.Samtools Utils.Utils Utils.Vector Version
package dependencies: JuicyPixels-3.3.4 MissingH-1.4.1.0
                      StateVar-1.2 active-0.2.0.14 adjunctions-4.4 aeson-1.4.6.0
                      ansi-terminal-0.9.1 ansi-wl-pprint-0.6.9 array-0.5.3.0 async-2.2.2
                      attoparsec-0.13.2.3 base-4.12.0.0 base-compat-0.10.5
                      base-orphans-0.8.1 base64-bytestring-1.0.0.2 bifunctors-5.5.6
                      binary-0.8.6.0 blaze-builder-0.4.1.0 bytes-0.15.5
                      bytestring-0.10.8.2 bzlib-conduit-0.3.0.2 call-stack-0.1.0
                      cereal-0.5.8.1 cereal-conduit-0.8.0 charset-0.3.7.1 colour-2.3.5
                      comonad-5.0.6 conduit-1.3.1.2 conduit-algorithms-0.0.11.0
                      conduit-extra-1.3.4 conduit-zstd-0.0.1.1 configurator-0.3.0.0
                      containers-0.6.0.1 contravariant-1.5.2 convertible-1.1.1.0
                      data-default-class-0.1.2.0 deepseq-1.4.4.0 diagrams-core-1.4.2
                      diagrams-lib-1.4.3 diagrams-solve-0.1.1 diagrams-svg-1.4.3
                      directory-1.3.3.0 distributive-0.6.1 dlist-0.8.0.7
                      dual-tree-0.2.2.1 errors-2.3.0 exceptions-0.10.4 extra-1.6.18
                      file-embed-0.0.11.1 filepath-1.4.2.1 fingertree-0.1.4.2 free-5.1.3
                      ghc-boot-th-8.6.5 ghc-prim-0.5.3 gitrev-1.3.1 hashable-1.2.7.0
                      hostname-1.0 inline-c-0.7.0.1 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.3 intervals-0.8.1 kan-extensions-5.2
                      lens-4.17.1 linear-1.20.9 lzma-0.0.0.3 lzma-conduit-1.2.1
                      monad-loops-0.4.3 mono-traversable-1.0.15.1 monoid-extras-0.5.1
                      mtl-2.2.2 newtype-generics-0.5.4 old-locale-1.0.0.7
                      old-time-1.1.0.3 optparse-applicative-0.14.3.0 parsec-3.1.14.0
                      parsers-0.12.10 pretty-1.1.3.6 primitive-0.6.4.0 process-1.6.5.0
                      profunctors-5.3 random-1.1 reflection-2.1.5 regex-1.0.2.0
                      regex-base-0.93.2 regex-compat-0.95.1
                      regex-pcre-builtin-0.94.5.8.8.35 regex-posix-0.95.2
                      regex-tdfa-1.2.3.2 regex-tdfa-text-1.0.0.3 resourcet-1.2.2
                      safe-0.3.18 safeio-0.0.5.0 scientific-0.3.6.2 semigroupoids-5.3.4
                      split-0.2.3.3 stm-2.5.0.0 stm-chans-3.0.0.4 stm-conduit-4.0.1
                      streaming-commons-0.2.1.1 strict-0.3.2 svg-builder-0.1.1
                      tagged-0.8.6 tar-0.5.1.1 template-haskell-2.14.0.0 text-1.2.3.1
                      th-abstraction-0.3.1.0 time-1.8.0.2 time-compat-1.9.2.2
                      time-locale-compat-0.1.1.5 transformers-0.5.6.2
                      transformers-base-0.4.5.2 transformers-compat-0.6.5 unix-2.7.2.2
                      unix-compat-0.5.2 unliftio-0.2.12 unliftio-core-0.1.2.0
                      unordered-containers-0.2.10.0 utf8-string-1.0.1.1 uuid-types-1.0.3
                      vector-0.12.0.3 vector-algorithms-0.8.0.3 zlib-0.6.2.1 zstd-0.1.1.2
orphans: conduit-extra-1.3.4:Data.Conduit.Process
         regex-1.0.2.0:Text.RE.TDFA.String
         regex-tdfa-text-1.0.0.3:Text.Regex.TDFA.Text
         regex-tdfa-text-1.0.0.3:Text.Regex.TDFA.Text.Lazy
         regex-pcre-builtin-0.94.5.8.8.35:Text.Regex.PCRE.String
         regex-pcre-builtin-0.94.5.8.8.35:Text.Regex.PCRE.Sequence
         regex-pcre-builtin-0.94.5.8.8.35:Text.Regex.PCRE.ByteString.Lazy
         regex-pcre-builtin-0.94.5.8.8.35:Text.Regex.PCRE.ByteString
         regex-tdfa-1.2.3.2:Text.Regex.TDFA.ByteString
         regex-tdfa-1.2.3.2:Text.Regex.TDFA.ByteString.Lazy
         regex-tdfa-1.2.3.2:Text.Regex.TDFA.Sequence
         regex-tdfa-1.2.3.2:Text.Regex.TDFA.String
         regex-posix-0.95.2:Text.Regex.Posix.String
         regex-posix-0.95.2:Text.Regex.Posix.Sequence
         regex-posix-0.95.2:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2:Text.Regex.Posix.ByteString
         regex-base-0.93.2:Text.Regex.Base.Context
         convertible-1.1.1.0:Data.Convertible.Instances.C
         convertible-1.1.1.0:Data.Convertible.Instances.Map
         convertible-1.1.1.0:Data.Convertible.Instances.Text
         convertible-1.1.1.0:Data.Convertible.Instances.Time
         convertible-1.1.1.0:Data.Convertible.Instances.Num
         attoparsec-0.13.2.3:Data.Attoparsec.ByteString.Char8
         diagrams-lib-1.4.3:Diagrams.Animation.Active
         diagrams-lib-1.4.3:Diagrams.TwoD.Path
         diagrams-lib-1.4.3:Diagrams.TwoD.Segment
         diagrams-lib-1.4.3:Diagrams.Trail
         diagrams-lib-1.4.3:Diagrams.ThreeD.Types
         diagrams-lib-1.4.3:Diagrams.TwoD.Types
         diagrams-core-1.4.2:Diagrams.Core.Types
         monoid-extras-0.5.1:Data.Monoid.MList
         diagrams-core-1.4.2:Diagrams.Core.Points
         time-1.8.0.2:Data.Time.Clock.TAI reflection-2.1.5:Data.Reflection
         linear-1.20.9:Linear.Instances vector-0.12.0.3:Data.Vector.Unboxed
         vector-0.12.0.3:Data.Vector.Fusion.Bundle
         configurator-0.3.0.0:Data.Configurator.Instances
         attoparsec-0.13.2.3:Data.Attoparsec.Text.Internal
         colour-2.3.5:Data.Colour hashable-1.2.7.0:Data.Hashable.Generic
         text-1.2.3.1:Data.Text.Lazy text-1.2.3.1:Data.Text
         binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show stm-2.5.0.0:Control.Monad.STM
         transformers-0.5.6.2:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: JuicyPixels-3.3.4:Codec.Picture.Tga
                         JuicyPixels-3.3.4:Codec.Picture.Tiff
                         JuicyPixels-3.3.4:Codec.Picture.Types
                         NGLess-1.1.0-965Np14lOUvJ2rS9XGhph5:NGLess.NGError
                         active-0.2.0.14:Data.Active adjunctions-4.4:Data.Functor.Rep
                         aeson-1.4.6.0:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.3:Data.Attoparsec.Internal.Types
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         bifunctors-5.5.6:Data.Bifunctor.Biff
                         bifunctors-5.5.6:Data.Bifunctor.Clown
                         bifunctors-5.5.6:Data.Bifunctor.Fix
                         bifunctors-5.5.6:Data.Bifunctor.Flip
                         bifunctors-5.5.6:Data.Bifunctor.Join
                         bifunctors-5.5.6:Data.Bifunctor.Joker
                         bifunctors-5.5.6:Data.Bifunctor.Product
                         bifunctors-5.5.6:Data.Bifunctor.Sum
                         bifunctors-5.5.6:Data.Bifunctor.Tannen
                         bifunctors-5.5.6:Data.Bifunctor.Wrapped bytes-0.15.5:Data.Bytes.Get
                         bytes-0.15.5:Data.Bytes.Signed bytes-0.15.5:Data.Bytes.VarInt
                         conduit-1.3.1.2:Data.Conduit.Internal.Conduit
                         conduit-1.3.1.2:Data.Conduit.Internal.Pipe
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         diagrams-core-1.4.2:Diagrams.Core.Envelope
                         diagrams-core-1.4.2:Diagrams.Core.Measure
                         diagrams-core-1.4.2:Diagrams.Core.Names
                         diagrams-core-1.4.2:Diagrams.Core.Points
                         diagrams-core-1.4.2:Diagrams.Core.Query
                         diagrams-core-1.4.2:Diagrams.Core.Style
                         diagrams-core-1.4.2:Diagrams.Core.Trace
                         diagrams-core-1.4.2:Diagrams.Core.Transform
                         diagrams-core-1.4.2:Diagrams.Core.Types
                         diagrams-core-1.4.2:Diagrams.Core.V
                         diagrams-lib-1.4.3:Diagrams.Angle
                         diagrams-lib-1.4.3:Diagrams.Animation.Active
                         diagrams-lib-1.4.3:Diagrams.BoundingBox
                         diagrams-lib-1.4.3:Diagrams.Coordinates
                         diagrams-lib-1.4.3:Diagrams.Direction
                         diagrams-lib-1.4.3:Diagrams.Located
                         diagrams-lib-1.4.3:Diagrams.Path
                         diagrams-lib-1.4.3:Diagrams.Segment
                         diagrams-lib-1.4.3:Diagrams.Size
                         diagrams-lib-1.4.3:Diagrams.Tangent
                         diagrams-lib-1.4.3:Diagrams.ThreeD.Camera
                         diagrams-lib-1.4.3:Diagrams.ThreeD.Light
                         diagrams-lib-1.4.3:Diagrams.ThreeD.Shapes
                         diagrams-lib-1.4.3:Diagrams.ThreeD.Types
                         diagrams-lib-1.4.3:Diagrams.Trail
                         diagrams-lib-1.4.3:Diagrams.TwoD.Attributes
                         diagrams-lib-1.4.3:Diagrams.TwoD.Image
                         diagrams-lib-1.4.3:Diagrams.TwoD.Path
                         diagrams-lib-1.4.3:Diagrams.TwoD.Segment.Bernstein
                         diagrams-lib-1.4.3:Diagrams.TwoD.Text
                         diagrams-lib-1.4.3:Diagrams.TwoD.Types
                         diagrams-svg-1.4.3:Diagrams.Backend.SVG dlist-0.8.0.7:Data.DList
                         dual-tree-0.2.2.1:Data.Tree.DUAL.Internal
                         fingertree-0.1.4.2:Data.FingerTree
                         free-5.1.3:Control.Comonad.Cofree
                         free-5.1.3:Control.Comonad.Trans.Cofree
                         free-5.1.3:Control.Monad.Free free-5.1.3:Control.Monad.Trans.Free
                         ghc-boot-th-8.6.5:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.5:GHC.LanguageExtensions.Type
                         inline-c-0.7.0.1:Language.C.Inline
                         inline-c-0.7.0.1:Language.C.Inline.Context
                         intervals-0.8.1:Numeric.Interval.Kaucher
                         kan-extensions-5.2:Data.Functor.Day
                         kan-extensions-5.2:Data.Functor.Yoneda lens-4.17.1:Control.Lens.At
                         lens-4.17.1:Control.Lens.Internal.Indexed
                         lens-4.17.1:Control.Lens.Reified lens-4.17.1:Control.Lens.Tuple
                         lens-4.17.1:Control.Lens.Wrapped lens-4.17.1:Control.Lens.Zoom
                         linear-1.20.9:Linear.Affine linear-1.20.9:Linear.Plucker
                         linear-1.20.9:Linear.Quaternion linear-1.20.9:Linear.V
                         linear-1.20.9:Linear.V0 linear-1.20.9:Linear.V1
                         linear-1.20.9:Linear.V2 linear-1.20.9:Linear.V3
                         linear-1.20.9:Linear.V4
                         mono-traversable-1.0.15.1:Data.MonoTraversable
                         mono-traversable-1.0.15.1:Data.NonNull
                         mono-traversable-1.0.15.1:Data.Sequences
                         newtype-generics-0.5.4:Control.Newtype.Generics
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         profunctors-5.3:Data.Profunctor.Composition
                         profunctors-5.3:Data.Profunctor.Rep
                         regex-1.0.2.0:Text.RE.ZeInternals.NamedCaptures
                         resourcet-1.2.2:Control.Monad.Trans.Resource.Internal
                         stm-conduit-4.0.1:Data.Conduit.Async.Composition
                         tagged-0.8.6:Data.Tagged
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         th-abstraction-0.3.1.0:Language.Haskell.TH.Datatype
                         unliftio-0.2.12:UnliftIO.Internals.Async
                         unordered-containers-0.2.10.0:Data.HashMap.Base
                         unordered-containers-0.2.10.0:Data.HashSet.Base
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.3:Data.Vector vector-0.12.0.3:Data.Vector.Primitive
                         vector-0.12.0.3:Data.Vector.Storable
                         vector-0.12.0.3:Data.Vector.Unboxed
                         vector-0.12.0.3:Data.Vector.Unboxed.Base
                         zlib-0.6.2.1:Codec.Compression.Zlib.Stream
import  -/  Data.FastQ 683044f508718e436592cbb72ea87fc2
  exports: 7f3c9451f8064311c68af66858502794
  ReadSet c16a307192e6c5c3c5475f335c533ab2
  ReadSet 4c8ae3e110e39629ec05639a3c18db8c
  ShortRead 22bd7330b29b52b3752e35cd5ee36bcb
  pairedSamples 4c8ae3e110e39629ec05639a3c18db8c
  singleSamples 4c8ae3e110e39629ec05639a3c18db8c
import  -/  Data.Sam 3fcb5a09f87798583b9f6366498e011d
  exports: cca2af82b8ff0df9f542f45f0746f94b
  SamLine 01f7dabca6fb8c4cde05c4a9c121515e
import  -/  FileOrStream 308bd6c9c43caa616b94f9fab478aee4
  exports: 0709a3ba970257fa0efa5dc4a795e2c1
  FileOrStream ca3cea85429310d5271321cc14b5abc8
import  -/  base-4.12.0.0:Data.Foldable efb37371da929e7bc88d896298d2d979
import  -/  base-4.12.0.0:Data.Functor 069b2025a03e32fd228e74a86a58a075
import  -/  base-4.12.0.0:Data.Maybe 9b76a39e833465c3c5b3c078b431417f
import  -/  base-4.12.0.0:Data.Traversable d2c09bff1e4f0c871306c3ff8aa4dc36
import  -/  base-4.12.0.0:Data.Tuple c719fc29608fe81c10bee9a1bf1e05ff
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.IO 898d4ddbf00eb4732e5f462760aa42ae
import  -/  base-4.12.0.0:GHC.Num c2039f03637c68f47b0bbff4c18ec616
import  -/  base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  extra-1.6.18:Control.Monad.Extra 142829a227ff93cd2299d6da6c4e4ba9
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type 6d87087aea24143d2650f78480d954a3
import  -/  mtl-2.2.2:Control.Monad.Writer 0c4563f022a89163556ba5d1725d5a20
import  -/  mtl-2.2.2:Control.Monad.Writer.Class 76e939c416a9f4ee6f62151a218e0c6b
import  -/  text-1.2.3.1:Data.Text e31b81fb349ec0694c028af9d897c500
import  -/  text-1.2.3.1:Data.Text.Internal 537e168590e8068f673f691833f78483
import  -/  text-1.2.3.1:Data.Text.Show b788b7edd0f190b1a7c4f4aba0e35f18
import  -/  transformers-0.5.6.2:Control.Monad.Trans.Writer.Lazy a4150667521de72cdb82acb8195072e0
082be4a718fd86899f5b7f01bed2cf9a
  $fEqBOp :: GHC.Classes.Eq Language.BOp
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.BOp Language.$fEqBOp_$c== Language.$fEqBOp_$c/= -}
082be4a718fd86899f5b7f01bed2cf9a
  $fEqBOp_$c/= :: Language.BOp -> Language.BOp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.BOp) (y :: Language.BOp) ->
                 case x of wild {
                   Language.BOpAdd
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Language.BOpAdd -> GHC.Types.False }
                   Language.BOpMul
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Language.BOpMul -> GHC.Types.False }
                   Language.BOpGT
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Language.BOpGT -> GHC.Types.False }
                   Language.BOpGTE
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Language.BOpGTE -> GHC.Types.False }
                   Language.BOpLT
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Language.BOpLT -> GHC.Types.False }
                   Language.BOpLTE
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Language.BOpLTE -> GHC.Types.False }
                   Language.BOpEQ
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Language.BOpEQ -> GHC.Types.False }
                   Language.BOpNEQ
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Language.BOpNEQ -> GHC.Types.False }
                   Language.BOpPathAppend
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.BOpPathAppend -> GHC.Types.False } }) -}
082be4a718fd86899f5b7f01bed2cf9a
  $fEqBOp_$c== :: Language.BOp -> Language.BOp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Language.BOp) (ds1 :: Language.BOp) ->
                 case ds of wild {
                   Language.BOpAdd
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Language.BOpAdd -> GHC.Types.True }
                   Language.BOpMul
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Language.BOpMul -> GHC.Types.True }
                   Language.BOpGT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Language.BOpGT -> GHC.Types.True }
                   Language.BOpGTE
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Language.BOpGTE -> GHC.Types.True }
                   Language.BOpLT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Language.BOpLT -> GHC.Types.True }
                   Language.BOpLTE
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Language.BOpLTE -> GHC.Types.True }
                   Language.BOpEQ
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Language.BOpEQ -> GHC.Types.True }
                   Language.BOpNEQ
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Language.BOpNEQ -> GHC.Types.True }
                   Language.BOpPathAppend
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.BOpPathAppend -> GHC.Types.True } }) -}
adc8def6a4b7257bb12aef607cf99238
  $fEqBlock :: GHC.Classes.Eq Language.Block
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Block Language.$fEqBlock_$c== Language.$fEqBlock_$c/= -}
adc8def6a4b7257bb12aef607cf99238
  $fEqBlock_$c/= ::
    Language.Block -> Language.Block -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.Block) (y :: Language.Block) ->
                 case Language.$fEqBlock_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
adc8def6a4b7257bb12aef607cf99238
  $fEqBlock_$c== ::
    Language.Block -> Language.Block -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.Block) (w1 :: Language.Block) ->
                 case w of ww { Language.Block ww1 ww2 ->
                 case w1 of ww3 { Language.Block ww4 ww5 ->
                 Language.$w$c== ww1 ww2 ww4 ww5 } }) -}
adc8def6a4b7257bb12aef607cf99238
  $fEqBlock_$c==1 ::
    Language.Expression -> Language.Expression -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
adc8def6a4b7257bb12aef607cf99238
  $fEqExpression :: GHC.Classes.Eq Language.Expression
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Expression
                  Language.$fEqBlock_$c==1
                  Language.$fEqExpression_$c/= -}
adc8def6a4b7257bb12aef607cf99238
  $fEqExpression_$c/= ::
    Language.Expression -> Language.Expression -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.Expression) (y :: Language.Expression) ->
                 case Language.$fEqBlock_$c==1 x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
441672d7eb62c1c87f9948f9c78adad7
  $fEqFuncName :: GHC.Classes.Eq Language.FuncName
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.FuncName
                  Data.Text.$fEqText_$c==
                    `cast`
                  (Sym (Language.N:FuncName[0])
                   ->_R Sym (Language.N:FuncName[0])
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fEqText_$c/=
                    `cast`
                  (Sym (Language.N:FuncName[0])
                   ->_R Sym (Language.N:FuncName[0])
                   ->_R <GHC.Types.Bool>_R) -}
74bc5fb9a818f3ea1f170e1e0af29d3b
  $fEqHeader :: GHC.Classes.Eq Language.Header
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Header
                  Language.$fEqHeader_$c==
                  Language.$fEqHeader_$c/= -}
74bc5fb9a818f3ea1f170e1e0af29d3b
  $fEqHeader_$c/= ::
    Language.Header -> Language.Header -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLS)L),1*U(1*U(U,U,U),1*U)><S(S(LLS)L),1*U(1*U(U,U,U),1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.Header) (y :: Language.Header) ->
                 case Language.$fEqHeader_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
74bc5fb9a818f3ea1f170e1e0af29d3b
  $fEqHeader_$c== ::
    Language.Header -> Language.Header -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)L),1*U(1*U(U,U,U),1*U)><S(S(SSS)L),1*U(1*U(U,U,U),1*U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.Header) (w1 :: Language.Header) ->
                 case w of ww { Language.Header ww1 ww2 ->
                 case ww1 of ww3 { Data.Text.Internal.Text ww4 ww5 ww6 ->
                 case w1 of ww7 { Language.Header ww8 ww9 ->
                 case ww8 of ww10 { Data.Text.Internal.Text ww11 ww12 ww13 ->
                 Language.$w$c==1 ww4 ww5 ww6 ww2 ww11 ww12 ww13 ww9 } } } }) -}
adc8def6a4b7257bb12aef607cf99238
  $fEqIndex :: GHC.Classes.Eq Language.Index
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Index Language.$fEqIndex_$c== Language.$fEqIndex_$c/= -}
adc8def6a4b7257bb12aef607cf99238
  $fEqIndex_$c/= ::
    Language.Index -> Language.Index -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.Index) (y :: Language.Index) ->
                 case Language.$fEqIndex_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
adc8def6a4b7257bb12aef607cf99238
  $fEqIndex_$c== ::
    Language.Index -> Language.Index -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Language.Index) (ds1 :: Language.Index) ->
                 case ds of wild {
                   Language.IndexOne a1
                   -> case ds1 of wild1 {
                        Language.IndexOne b1 -> Language.$fEqBlock_$c==1 a1 b1
                        Language.IndexTwo ipv ipv1 -> GHC.Types.False }
                   Language.IndexTwo a1 a2
                   -> case ds1 of wild1 {
                        Language.IndexOne ipv -> GHC.Types.False
                        Language.IndexTwo b1 b2
                        -> let {
                             $j :: GHC.Types.Bool <join 0>
                             = case a2 of wild2 {
                                 GHC.Maybe.Nothing
                                 -> case b2 of wild3 {
                                      GHC.Maybe.Nothing -> GHC.Types.True
                                      GHC.Maybe.Just ipv -> GHC.Types.False }
                                 GHC.Maybe.Just a4
                                 -> case b2 of wild3 {
                                      GHC.Maybe.Nothing -> GHC.Types.False
                                      GHC.Maybe.Just b4 -> Language.$fEqBlock_$c==1 a4 b4 } }
                           } in
                           case a1 of wild2 {
                             GHC.Maybe.Nothing
                             -> case b1 of wild3 {
                                  GHC.Maybe.Nothing -> $j GHC.Maybe.Just ipv -> GHC.Types.False }
                             GHC.Maybe.Just a4
                             -> case b1 of wild3 {
                                  GHC.Maybe.Nothing -> GHC.Types.False
                                  GHC.Maybe.Just b4
                                  -> case Language.$fEqBlock_$c==1 a4 b4 of wild4 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True -> $j } } } } }) -}
a5ecd529fe2b52118416127e8ed16401
  $fEqMethodName :: GHC.Classes.Eq Language.MethodName
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.MethodName
                  Data.Text.$fEqText_$c==
                    `cast`
                  (Sym (Language.N:MethodName[0])
                   ->_R Sym (Language.N:MethodName[0])
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fEqText_$c/=
                    `cast`
                  (Sym (Language.N:MethodName[0])
                   ->_R Sym (Language.N:MethodName[0])
                   ->_R <GHC.Types.Bool>_R) -}
d7f124fd1704f8a7309c0e06610b0f29
  $fEqModInfo :: GHC.Classes.Eq Language.ModInfo
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.ModInfo
                  Language.$fEqModInfo_$c==
                  Language.$fEqModInfo_$c/= -}
d7f124fd1704f8a7309c0e06610b0f29
  $fEqModInfo_$c/= ::
    Language.ModInfo -> Language.ModInfo -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.ModInfo) (y :: Language.ModInfo) ->
                 case Language.$fEqModInfo_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
d7f124fd1704f8a7309c0e06610b0f29
  $fEqModInfo_$c== ::
    Language.ModInfo -> Language.ModInfo -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Language.ModInfo) (ds1 :: Language.ModInfo) ->
                 case ds of wild {
                   Language.ModInfo a1 a2
                   -> case ds1 of wild1 {
                        Language.ModInfo b1 b2
                        -> case a1 of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                           case b1 of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                           case GHC.Prim.==# dt2 dt5 of lwild {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> case {__pkg_ccall text-1.2.3.1 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt
                                       (GHC.Prim.int2Word# dt1)
                                       dt3
                                       (GHC.Prim.int2Word# dt4)
                                       (GHC.Prim.int2Word# dt2)
                                       GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                                case GHC.Prim.narrow32Int# ds3 of wild4 {
                                  DEFAULT -> GHC.Types.False
                                  0#
                                  -> case a2 of wild6 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                                     case b2 of wild7 { Data.Text.Internal.Text dt10 dt11 dt12 ->
                                     case GHC.Prim.==# dt9 dt12 of lwild1 {
                                       DEFAULT -> GHC.Types.False
                                       1#
                                       -> case {__pkg_ccall text-1.2.3.1 GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.State#
                                                                              GHC.Prim.RealWorld
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               GHC.Prim.Int# #)}
                                                 dt7
                                                 (GHC.Prim.int2Word# dt8)
                                                 dt10
                                                 (GHC.Prim.int2Word# dt11)
                                                 (GHC.Prim.int2Word# dt9)
                                                 GHC.Prim.realWorld# of wild8 { (#,#) ds5 ds6 ->
                                          case GHC.Prim.narrow32Int# ds6 of wild9 {
                                            DEFAULT -> GHC.Types.False
                                            0# -> GHC.Types.True } } } } } } } } } }
                        Language.LocalModInfo ipv ipv1 -> GHC.Types.False }
                   Language.LocalModInfo a1 a2
                   -> case ds1 of wild1 {
                        Language.ModInfo ipv ipv1 -> GHC.Types.False
                        Language.LocalModInfo b1 b2
                        -> case a1 of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                           case b1 of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                           case GHC.Prim.==# dt2 dt5 of lwild {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> case {__pkg_ccall text-1.2.3.1 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt
                                       (GHC.Prim.int2Word# dt1)
                                       dt3
                                       (GHC.Prim.int2Word# dt4)
                                       (GHC.Prim.int2Word# dt2)
                                       GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                                case GHC.Prim.narrow32Int# ds3 of wild4 {
                                  DEFAULT -> GHC.Types.False
                                  0#
                                  -> case a2 of wild6 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                                     case b2 of wild7 { Data.Text.Internal.Text dt10 dt11 dt12 ->
                                     case GHC.Prim.==# dt9 dt12 of lwild1 {
                                       DEFAULT -> GHC.Types.False
                                       1#
                                       -> case {__pkg_ccall text-1.2.3.1 GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.State#
                                                                              GHC.Prim.RealWorld
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               GHC.Prim.Int# #)}
                                                 dt7
                                                 (GHC.Prim.int2Word# dt8)
                                                 dt10
                                                 (GHC.Prim.int2Word# dt11)
                                                 (GHC.Prim.int2Word# dt9)
                                                 GHC.Prim.realWorld# of wild8 { (#,#) ds5 ds6 ->
                                          case GHC.Prim.narrow32Int# ds6 of wild9 {
                                            DEFAULT -> GHC.Types.False
                                            0# -> GHC.Types.True } } } } } } } } } } } }) -}
d78124de7a35dac4710fa19fa17820a5
  $fEqNGLType :: GHC.Classes.Eq Language.NGLType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.NGLType
                  Language.$fEqNGLType_$c==
                  Language.$fEqNGLType_$c/= -}
d78124de7a35dac4710fa19fa17820a5
  $fEqNGLType_$c/= ::
    Language.NGLType -> Language.NGLType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.NGLType) (y :: Language.NGLType) ->
                 case Language.$fEqNGLType_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
d78124de7a35dac4710fa19fa17820a5
  $fEqNGLType_$c== ::
    Language.NGLType -> Language.NGLType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,U> -}
ea18243860934472078c5e2ccd0edf40
  $fEqNGLessObject :: GHC.Classes.Eq Language.NGLessObject
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.NGLessObject
                  Language.$fEqNGLessObject_$c==
                  Language.$fEqNGLessObject_$c/= -}
ea18243860934472078c5e2ccd0edf40
  $fEqNGLessObject_$c/= ::
    Language.NGLessObject -> Language.NGLessObject -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.NGLessObject) (y :: Language.NGLessObject) ->
                 case Language.$fEqNGLessObject_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
ea18243860934472078c5e2ccd0edf40
  $fEqNGLessObject_$c== ::
    Language.NGLessObject -> Language.NGLessObject -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
0338a472fba7af613024bb95d508584a
  $fEqOptimizedExpression ::
    GHC.Classes.Eq Language.OptimizedExpression
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.OptimizedExpression
                  Language.$fEqOptimizedExpression_$c==
                  Language.$fEqOptimizedExpression_$c/= -}
0338a472fba7af613024bb95d508584a
  $fEqOptimizedExpression_$c/= ::
    Language.OptimizedExpression
    -> Language.OptimizedExpression -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.OptimizedExpression)
                   (y :: Language.OptimizedExpression) ->
                 case Language.$fEqOptimizedExpression_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
0338a472fba7af613024bb95d508584a
  $fEqOptimizedExpression_$c== ::
    Language.OptimizedExpression
    -> Language.OptimizedExpression -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Language.OptimizedExpression)
                   (ds1 :: Language.OptimizedExpression) ->
                 case ds of wild {
                   Language.LenThresholdDiscard a1 a2 a3
                   -> case ds1 of wild1 {
                        Language.LenThresholdDiscard b1 b2 b3
                        -> case a1
                                  `cast`
                                (Language.N:Variable[0]) of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                           case b1
                                  `cast`
                                (Language.N:Variable[0]) of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                           case GHC.Prim.==# dt2 dt5 of lwild {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> case {__pkg_ccall text-1.2.3.1 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt
                                       (GHC.Prim.int2Word# dt1)
                                       dt3
                                       (GHC.Prim.int2Word# dt4)
                                       (GHC.Prim.int2Word# dt2)
                                       GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                                case GHC.Prim.narrow32Int# ds3 of wild4 {
                                  DEFAULT -> GHC.Types.False
                                  0#
                                  -> case a2 of wild6 {
                                       Language.BOpAdd
                                       -> case b2 of wild7 {
                                            DEFAULT -> GHC.Types.False
                                            Language.BOpAdd -> GHC.Classes.eqInt a3 b3 }
                                       Language.BOpMul
                                       -> case b2 of wild7 {
                                            DEFAULT -> GHC.Types.False
                                            Language.BOpMul -> GHC.Classes.eqInt a3 b3 }
                                       Language.BOpGT
                                       -> case b2 of wild7 {
                                            DEFAULT -> GHC.Types.False
                                            Language.BOpGT -> GHC.Classes.eqInt a3 b3 }
                                       Language.BOpGTE
                                       -> case b2 of wild7 {
                                            DEFAULT -> GHC.Types.False
                                            Language.BOpGTE -> GHC.Classes.eqInt a3 b3 }
                                       Language.BOpLT
                                       -> case b2 of wild7 {
                                            DEFAULT -> GHC.Types.False
                                            Language.BOpLT -> GHC.Classes.eqInt a3 b3 }
                                       Language.BOpLTE
                                       -> case b2 of wild7 {
                                            DEFAULT -> GHC.Types.False
                                            Language.BOpLTE -> GHC.Classes.eqInt a3 b3 }
                                       Language.BOpEQ
                                       -> case b2 of wild7 {
                                            DEFAULT -> GHC.Types.False
                                            Language.BOpEQ -> GHC.Classes.eqInt a3 b3 }
                                       Language.BOpNEQ
                                       -> case b2 of wild7 {
                                            DEFAULT -> GHC.Types.False
                                            Language.BOpNEQ -> GHC.Classes.eqInt a3 b3 }
                                       Language.BOpPathAppend
                                       -> case b2 of wild7 {
                                            DEFAULT -> GHC.Types.False
                                            Language.BOpPathAppend
                                            -> GHC.Classes.eqInt a3 b3 } } } } } } }
                        Language.SubstrimReassign ipv ipv1 -> GHC.Types.False }
                   Language.SubstrimReassign a1 a2
                   -> case ds1 of wild1 {
                        Language.LenThresholdDiscard ipv ipv1 ipv2 -> GHC.Types.False
                        Language.SubstrimReassign b1 b2
                        -> case a1
                                  `cast`
                                (Language.N:Variable[0]) of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                           case b1
                                  `cast`
                                (Language.N:Variable[0]) of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                           case GHC.Prim.==# dt2 dt5 of lwild {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> case {__pkg_ccall text-1.2.3.1 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt
                                       (GHC.Prim.int2Word# dt1)
                                       dt3
                                       (GHC.Prim.int2Word# dt4)
                                       (GHC.Prim.int2Word# dt2)
                                       GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                                case GHC.Prim.narrow32Int# ds3 of wild4 {
                                  DEFAULT -> GHC.Types.False
                                  0# -> GHC.Classes.eqInt a2 b2 } } } } } } }) -}
76fe0974e0c66dd0b2f466e0c453166d
  $fEqScript :: GHC.Classes.Eq Language.Script
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Script
                  Language.$fEqScript_$c==
                  Language.$fEqScript_$c/= -}
1e350632a8ba19626d6ceb8bffe3373c
  $fEqScript1 :: GHC.Classes.Eq (GHC.Types.Int, Language.Expression)
  {- Unfolding: (GHC.Classes.$fEq(,)
                   @ GHC.Types.Int
                   @ Language.Expression
                   GHC.Classes.$fEqInt
                   Language.$fEqExpression) -}
76fe0974e0c66dd0b2f466e0c453166d
  $fEqScript_$c/= ::
    Language.Script -> Language.Script -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.Script) (y :: Language.Script) ->
                 case Language.$fEqScript_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
76fe0974e0c66dd0b2f466e0c453166d
  $fEqScript_$c== ::
    Language.Script -> Language.Script -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.Script) (w1 :: Language.Script) ->
                 case w of ww { Language.Script ww1 ww2 ->
                 case w1 of ww3 { Language.Script ww4 ww5 ->
                 Language.$w$c==2 ww1 ww2 ww4 ww5 } }) -}
72ea05232a2f0c6e38ace4b9bd98df0d
  $fEqUOp :: GHC.Classes.Eq Language.UOp
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.UOp Language.$fEqUOp_$c== Language.$fEqUOp_$c/= -}
72ea05232a2f0c6e38ace4b9bd98df0d
  $fEqUOp_$c/= :: Language.UOp -> Language.UOp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.UOp) (y :: Language.UOp) ->
                 case x of wild {
                   Language.UOpLen
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Language.UOpLen -> GHC.Types.False }
                   Language.UOpMinus
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Language.UOpMinus -> GHC.Types.False }
                   Language.UOpNot
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.UOpNot -> GHC.Types.False } }) -}
72ea05232a2f0c6e38ace4b9bd98df0d
  $fEqUOp_$c== :: Language.UOp -> Language.UOp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.UOp) (ds1 :: Language.UOp) ->
                 case ds of wild {
                   Language.UOpLen
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Language.UOpLen -> GHC.Types.True }
                   Language.UOpMinus
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Language.UOpMinus -> GHC.Types.True }
                   Language.UOpNot
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.UOpNot -> GHC.Types.True } }) -}
6ea856e2345fb0911676ec309bc5b12f
  $fEqVariable :: GHC.Classes.Eq Language.Variable
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Variable
                  Data.Text.$fEqText_$c==
                    `cast`
                  (Sym (Language.N:Variable[0])
                   ->_R Sym (Language.N:Variable[0])
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fEqText_$c/=
                    `cast`
                  (Sym (Language.N:Variable[0])
                   ->_R Sym (Language.N:Variable[0])
                   ->_R <GHC.Types.Bool>_R) -}
082be4a718fd86899f5b7f01bed2cf9a
  $fOrdBOp :: GHC.Classes.Ord Language.BOp
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.BOp
                  Language.$fEqBOp
                  Language.$fOrdBOp_$ccompare
                  Language.$fOrdBOp_$c<
                  Language.$fOrdBOp_$c<=
                  Language.$fOrdBOp_$c>
                  Language.$fOrdBOp_$c>=
                  Language.$fOrdBOp_$cmax
                  Language.$fOrdBOp_$cmin -}
082be4a718fd86899f5b7f01bed2cf9a
  $fOrdBOp_$c< :: Language.BOp -> Language.BOp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.BOp) (b :: Language.BOp) ->
                 case GHC.Prim.dataToTag# @ Language.BOp a of a# { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Language.BOp b of b# { DEFAULT ->
                 GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# a# b#) } }) -}
082be4a718fd86899f5b7f01bed2cf9a
  $fOrdBOp_$c<= :: Language.BOp -> Language.BOp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.BOp) (b :: Language.BOp) ->
                 case GHC.Prim.dataToTag# @ Language.BOp b of a# { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Language.BOp a of b# { DEFAULT ->
                 case GHC.Prim.<# a# b# of lwild {
                   DEFAULT -> GHC.Types.True 1# -> GHC.Types.False } } }) -}
082be4a718fd86899f5b7f01bed2cf9a
  $fOrdBOp_$c> :: Language.BOp -> Language.BOp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.BOp) (b :: Language.BOp) ->
                 case GHC.Prim.dataToTag# @ Language.BOp b of a# { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Language.BOp a of b# { DEFAULT ->
                 GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# a# b#) } }) -}
082be4a718fd86899f5b7f01bed2cf9a
  $fOrdBOp_$c>= :: Language.BOp -> Language.BOp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.BOp) (b :: Language.BOp) ->
                 case GHC.Prim.dataToTag# @ Language.BOp a of a# { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Language.BOp b of b# { DEFAULT ->
                 case GHC.Prim.<# a# b# of lwild {
                   DEFAULT -> GHC.Types.True 1# -> GHC.Types.False } } }) -}
082be4a718fd86899f5b7f01bed2cf9a
  $fOrdBOp_$ccompare ::
    Language.BOp -> Language.BOp -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.BOp) (b :: Language.BOp) ->
                 case GHC.Prim.dataToTag# @ Language.BOp a of a# { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Language.BOp b of b# { DEFAULT ->
                 case GHC.Prim.<# a# b# of lwild {
                   DEFAULT
                   -> case GHC.Prim.==# a# b# of lwild1 {
                        DEFAULT -> GHC.Types.GT 1# -> GHC.Types.EQ }
                   1# -> GHC.Types.LT } } }) -}
082be4a718fd86899f5b7f01bed2cf9a
  $fOrdBOp_$cmax :: Language.BOp -> Language.BOp -> Language.BOp
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.BOp) (y :: Language.BOp) ->
                 case GHC.Prim.dataToTag# @ Language.BOp y of a# { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Language.BOp x of b# { DEFAULT ->
                 case GHC.Prim.<# a# b# of lwild { DEFAULT -> y 1# -> x } } }) -}
082be4a718fd86899f5b7f01bed2cf9a
  $fOrdBOp_$cmin :: Language.BOp -> Language.BOp -> Language.BOp
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.BOp) (y :: Language.BOp) ->
                 case GHC.Prim.dataToTag# @ Language.BOp y of a# { DEFAULT ->
                 case GHC.Prim.dataToTag# @ Language.BOp x of b# { DEFAULT ->
                 case GHC.Prim.<# a# b# of lwild { DEFAULT -> x 1# -> y } } }) -}
adc8def6a4b7257bb12aef607cf99238
  $fOrdBlock :: GHC.Classes.Ord Language.Block
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Block
                  Language.$fEqBlock
                  Language.$fOrdBlock_$ccompare1
                  Language.$fOrdBlock_$c<
                  Language.$fOrdBlock_$c<=
                  Language.$fOrdBlock_$c>
                  Language.$fOrdBlock_$c>=
                  Language.$fOrdBlock_$cmax
                  Language.$fOrdBlock_$cmin -}
adc8def6a4b7257bb12aef607cf99238
  $fOrdBlock_$c< ::
    Language.Block -> Language.Block -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.Block) (w1 :: Language.Block) ->
                 case w of ww { Language.Block ww1 ww2 ->
                 case w1 of ww3 { Language.Block ww4 ww5 ->
                 Language.$w$c< ww1 ww2 ww4 ww5 } }) -}
adc8def6a4b7257bb12aef607cf99238
  $fOrdBlock_$c<1 ::
    Language.Expression -> Language.Expression -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.Expression) (y :: Language.Expression) ->
                 case Language.$fOrdBlock_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
adc8def6a4b7257bb12aef607cf99238
  $fOrdBlock_$c<= ::
    Language.Block -> Language.Block -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S(SL),1*U(1*U,U)><S(SL),1*U(1*U,1*U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.Block) (w1 :: Language.Block) ->
                 case w of ww { Language.Block ww1 ww2 ->
                 case w1 of ww3 { Language.Block ww4 ww5 ->
                 Language.$w$c<= ww1 ww2 ww4 ww5 } }) -}
adc8def6a4b7257bb12aef607cf99238
  $fOrdBlock_$c> ::
    Language.Block -> Language.Block -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S(SL),1*U(1*U,U)><S(SL),1*U(1*U,1*U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.Block) (b :: Language.Block) ->
                 Language.$fOrdBlock_$c< b a) -}
adc8def6a4b7257bb12aef607cf99238
  $fOrdBlock_$c>= ::
    Language.Block -> Language.Block -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.Block) (w1 :: Language.Block) ->
                 case w of ww { Language.Block ww1 ww2 ->
                 case w1 of ww3 { Language.Block ww4 ww5 ->
                 Language.$w$c>= ww1 ww2 ww4 ww5 } }) -}
adc8def6a4b7257bb12aef607cf99238
  $fOrdBlock_$ccompare ::
    Language.Expression -> Language.Expression -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
adc8def6a4b7257bb12aef607cf99238
  $fOrdBlock_$ccompare1 ::
    Language.Block -> Language.Block -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.Block) (w1 :: Language.Block) ->
                 case w of ww { Language.Block ww1 ww2 ->
                 case w1 of ww3 { Language.Block ww4 ww5 ->
                 Language.$w$ccompare ww1 ww2 ww4 ww5 } }) -}
adc8def6a4b7257bb12aef607cf99238
  $fOrdBlock_$cmax ::
    Language.Block -> Language.Block -> Language.Block
  {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.Block) (w1 :: Language.Block) ->
                 case w of ww { Language.Block ww1 ww2 ->
                 case w1 of ww3 { Language.Block ww4 ww5 ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Language.Variable
                        Language.$fOrdVariable
                        ww4
                        ww1 of wild {
                   GHC.Types.LT -> Language.Block ww1 ww2
                   GHC.Types.EQ
                   -> case Language.$fOrdBlock_$ccompare ww5 ww2 of wild1 {
                        DEFAULT -> Language.Block ww4 ww5
                        GHC.Types.LT -> Language.Block ww1 ww2 }
                   GHC.Types.GT -> Language.Block ww4 ww5 } } }) -}
adc8def6a4b7257bb12aef607cf99238
  $fOrdBlock_$cmin ::
    Language.Block -> Language.Block -> Language.Block
  {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.Block) (w1 :: Language.Block) ->
                 case w of ww { Language.Block ww1 ww2 ->
                 case w1 of ww3 { Language.Block ww4 ww5 ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Language.Variable
                        Language.$fOrdVariable
                        ww4
                        ww1 of wild {
                   GHC.Types.LT -> Language.Block ww4 ww5
                   GHC.Types.EQ
                   -> case Language.$fOrdBlock_$ccompare ww5 ww2 of wild1 {
                        DEFAULT -> Language.Block ww1 ww2
                        GHC.Types.LT -> Language.Block ww4 ww5 }
                   GHC.Types.GT -> Language.Block ww1 ww2 } } }) -}
adc8def6a4b7257bb12aef607cf99238
  $fOrdExpression :: GHC.Classes.Ord Language.Expression
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Expression
                  Language.$fEqExpression
                  Language.$fOrdBlock_$ccompare
                  Language.$fOrdBlock_$c<1
                  Language.$fOrdExpression_$c<=
                  Language.$fOrdExpression_$c>
                  Language.$fOrdExpression_$c>=
                  Language.$fOrdExpression_$cmax
                  Language.$fOrdExpression_$cmin -}
adc8def6a4b7257bb12aef607cf99238
  $fOrdExpression_$c<= ::
    Language.Expression -> Language.Expression -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.Expression) (y :: Language.Expression) ->
                 case Language.$fOrdBlock_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
adc8def6a4b7257bb12aef607cf99238
  $fOrdExpression_$c> ::
    Language.Expression -> Language.Expression -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.Expression) (y :: Language.Expression) ->
                 case Language.$fOrdBlock_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
adc8def6a4b7257bb12aef607cf99238
  $fOrdExpression_$c>= ::
    Language.Expression -> Language.Expression -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.Expression) (y :: Language.Expression) ->
                 case Language.$fOrdBlock_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
adc8def6a4b7257bb12aef607cf99238
  $fOrdExpression_$cmax ::
    Language.Expression -> Language.Expression -> Language.Expression
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.Expression) (y :: Language.Expression) ->
                 case Language.$fOrdBlock_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
adc8def6a4b7257bb12aef607cf99238
  $fOrdExpression_$cmin ::
    Language.Expression -> Language.Expression -> Language.Expression
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.Expression) (y :: Language.Expression) ->
                 case Language.$fOrdBlock_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
441672d7eb62c1c87f9948f9c78adad7
  $fOrdFuncName :: GHC.Classes.Ord Language.FuncName
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.FuncName
                  Language.$fEqFuncName
                  Data.Text.$fOrdText_$ccompare
                    `cast`
                  (Sym (Language.N:FuncName[0])
                   ->_R Sym (Language.N:FuncName[0])
                   ->_R <GHC.Types.Ordering>_R)
                  Data.Text.$fOrdText_$c<
                    `cast`
                  (Sym (Language.N:FuncName[0])
                   ->_R Sym (Language.N:FuncName[0])
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fOrdText_$c<=
                    `cast`
                  (Sym (Language.N:FuncName[0])
                   ->_R Sym (Language.N:FuncName[0])
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fOrdText_$c>
                    `cast`
                  (Sym (Language.N:FuncName[0])
                   ->_R Sym (Language.N:FuncName[0])
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fOrdText_$c>=
                    `cast`
                  (Sym (Language.N:FuncName[0])
                   ->_R Sym (Language.N:FuncName[0])
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fOrdText_$cmax
                    `cast`
                  (Sym (Language.N:FuncName[0])
                   ->_R Sym (Language.N:FuncName[0])
                   ->_R Sym (Language.N:FuncName[0]))
                  Data.Text.$fOrdText_$cmin
                    `cast`
                  (Sym (Language.N:FuncName[0])
                   ->_R Sym (Language.N:FuncName[0])
                   ->_R Sym (Language.N:FuncName[0])) -}
adc8def6a4b7257bb12aef607cf99238
  $fOrdIndex :: GHC.Classes.Ord Language.Index
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Index
                  Language.$fEqIndex
                  Language.$fOrdIndex_$ccompare
                  Language.$fOrdIndex_$c<
                  Language.$fOrdIndex_$c<=
                  Language.$fOrdIndex_$c>
                  Language.$fOrdIndex_$c>=
                  Language.$fOrdIndex_$cmax
                  Language.$fOrdIndex_$cmin -}
adc8def6a4b7257bb12aef607cf99238
  $fOrdIndex_$c< ::
    Language.Index -> Language.Index -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.Index) (b :: Language.Index) ->
                 case a of wild {
                   Language.IndexOne a1
                   -> case b of wild1 {
                        Language.IndexOne b1 -> Language.$fOrdBlock_$c<1 a1 b1
                        Language.IndexTwo ipv ipv1 -> GHC.Types.True }
                   Language.IndexTwo a1 a2
                   -> case b of wild1 {
                        Language.IndexOne ipv -> GHC.Types.False
                        Language.IndexTwo b1 b2
                        -> let {
                             $j :: GHC.Types.Bool <join 0>
                             = case a2 of wild2 {
                                 GHC.Maybe.Nothing
                                 -> case b2 of wild3 {
                                      GHC.Maybe.Nothing -> GHC.Types.False
                                      GHC.Maybe.Just ipv -> GHC.Types.True }
                                 GHC.Maybe.Just a4
                                 -> case b2 of wild3 {
                                      GHC.Maybe.Nothing -> GHC.Types.False
                                      GHC.Maybe.Just b4 -> Language.$fOrdBlock_$c<1 a4 b4 } }
                           } in
                           case a1 of wild2 {
                             GHC.Maybe.Nothing
                             -> case b1 of wild3 {
                                  GHC.Maybe.Nothing -> $j GHC.Maybe.Just ipv -> GHC.Types.True }
                             GHC.Maybe.Just a4
                             -> case b1 of wild3 {
                                  GHC.Maybe.Nothing -> GHC.Types.False
                                  GHC.Maybe.Just b4
                                  -> case Language.$fOrdBlock_$ccompare a4 b4 of wild4 {
                                       GHC.Types.LT -> GHC.Types.True
                                       GHC.Types.EQ -> $j
                                       GHC.Types.GT -> GHC.Types.False } } } } }) -}
adc8def6a4b7257bb12aef607cf99238
  $fOrdIndex_$c<= ::
    Language.Index -> Language.Index -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.Index) (b :: Language.Index) ->
                 case Language.$fOrdIndex_$c< b a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
adc8def6a4b7257bb12aef607cf99238
  $fOrdIndex_$c> ::
    Language.Index -> Language.Index -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.Index) (b :: Language.Index) ->
                 Language.$fOrdIndex_$c< b a) -}
adc8def6a4b7257bb12aef607cf99238
  $fOrdIndex_$c>= ::
    Language.Index -> Language.Index -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.Index) (b :: Language.Index) ->
                 case Language.$fOrdIndex_$c< a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
adc8def6a4b7257bb12aef607cf99238
  $fOrdIndex_$ccompare ::
    Language.Index -> Language.Index -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.Index) (b :: Language.Index) ->
                 case a of wild {
                   Language.IndexOne a1
                   -> case b of wild1 {
                        Language.IndexOne b1 -> Language.$fOrdBlock_$ccompare a1 b1
                        Language.IndexTwo ipv ipv1 -> GHC.Types.LT }
                   Language.IndexTwo a1 a2
                   -> case b of wild1 {
                        Language.IndexOne ipv -> GHC.Types.GT
                        Language.IndexTwo b1 b2
                        -> let {
                             $j :: GHC.Types.Ordering <join 0>
                             = case a2 of wild2 {
                                 GHC.Maybe.Nothing
                                 -> case b2 of wild3 {
                                      GHC.Maybe.Nothing -> GHC.Types.EQ
                                      GHC.Maybe.Just ipv -> GHC.Types.LT }
                                 GHC.Maybe.Just a4
                                 -> case b2 of wild3 {
                                      GHC.Maybe.Nothing -> GHC.Types.GT
                                      GHC.Maybe.Just b4 -> Language.$fOrdBlock_$ccompare a4 b4 } }
                           } in
                           case a1 of wild2 {
                             GHC.Maybe.Nothing
                             -> case b1 of wild3 {
                                  GHC.Maybe.Nothing -> $j GHC.Maybe.Just ipv -> GHC.Types.LT }
                             GHC.Maybe.Just a4
                             -> case b1 of wild3 {
                                  GHC.Maybe.Nothing -> GHC.Types.GT
                                  GHC.Maybe.Just b4
                                  -> case Language.$fOrdBlock_$ccompare a4 b4 of wild4 {
                                       GHC.Types.LT -> GHC.Types.LT
                                       GHC.Types.EQ -> $j
                                       GHC.Types.GT -> GHC.Types.GT } } } } }) -}
adc8def6a4b7257bb12aef607cf99238
  $fOrdIndex_$cmax ::
    Language.Index -> Language.Index -> Language.Index
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.Index) (y :: Language.Index) ->
                 case Language.$fOrdIndex_$c< y x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
adc8def6a4b7257bb12aef607cf99238
  $fOrdIndex_$cmin ::
    Language.Index -> Language.Index -> Language.Index
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.Index) (y :: Language.Index) ->
                 case Language.$fOrdIndex_$c< y x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
a5ecd529fe2b52118416127e8ed16401
  $fOrdMethodName :: GHC.Classes.Ord Language.MethodName
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.MethodName
                  Language.$fEqMethodName
                  Data.Text.$fOrdText_$ccompare
                    `cast`
                  (Sym (Language.N:MethodName[0])
                   ->_R Sym (Language.N:MethodName[0])
                   ->_R <GHC.Types.Ordering>_R)
                  Data.Text.$fOrdText_$c<
                    `cast`
                  (Sym (Language.N:MethodName[0])
                   ->_R Sym (Language.N:MethodName[0])
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fOrdText_$c<=
                    `cast`
                  (Sym (Language.N:MethodName[0])
                   ->_R Sym (Language.N:MethodName[0])
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fOrdText_$c>
                    `cast`
                  (Sym (Language.N:MethodName[0])
                   ->_R Sym (Language.N:MethodName[0])
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fOrdText_$c>=
                    `cast`
                  (Sym (Language.N:MethodName[0])
                   ->_R Sym (Language.N:MethodName[0])
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fOrdText_$cmax
                    `cast`
                  (Sym (Language.N:MethodName[0])
                   ->_R Sym (Language.N:MethodName[0])
                   ->_R Sym (Language.N:MethodName[0]))
                  Data.Text.$fOrdText_$cmin
                    `cast`
                  (Sym (Language.N:MethodName[0])
                   ->_R Sym (Language.N:MethodName[0])
                   ->_R Sym (Language.N:MethodName[0])) -}
d78124de7a35dac4710fa19fa17820a5
  $fOrdNGLType :: GHC.Classes.Ord Language.NGLType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.NGLType
                  Language.$fEqNGLType
                  Language.$fOrdNGLType_$ccompare
                  Language.$fOrdNGLType_$c<
                  Language.$fOrdNGLType_$c<=
                  Language.$fOrdNGLType_$c>
                  Language.$fOrdNGLType_$c>=
                  Language.$fOrdNGLType_$cmax
                  Language.$fOrdNGLType_$cmin -}
d78124de7a35dac4710fa19fa17820a5
  $fOrdNGLType_$c< ::
    Language.NGLType -> Language.NGLType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.NGLType) (y :: Language.NGLType) ->
                 case Language.$fOrdNGLType_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
d78124de7a35dac4710fa19fa17820a5
  $fOrdNGLType_$c<= ::
    Language.NGLType -> Language.NGLType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.NGLType) (y :: Language.NGLType) ->
                 case Language.$fOrdNGLType_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
d78124de7a35dac4710fa19fa17820a5
  $fOrdNGLType_$c> ::
    Language.NGLType -> Language.NGLType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.NGLType) (y :: Language.NGLType) ->
                 case Language.$fOrdNGLType_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
d78124de7a35dac4710fa19fa17820a5
  $fOrdNGLType_$c>= ::
    Language.NGLType -> Language.NGLType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.NGLType) (y :: Language.NGLType) ->
                 case Language.$fOrdNGLType_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
d78124de7a35dac4710fa19fa17820a5
  $fOrdNGLType_$ccompare ::
    Language.NGLType -> Language.NGLType -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,U> -}
d78124de7a35dac4710fa19fa17820a5
  $fOrdNGLType_$cmax ::
    Language.NGLType -> Language.NGLType -> Language.NGLType
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.NGLType) (y :: Language.NGLType) ->
                 case Language.$fOrdNGLType_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
d78124de7a35dac4710fa19fa17820a5
  $fOrdNGLType_$cmin ::
    Language.NGLType -> Language.NGLType -> Language.NGLType
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.NGLType) (y :: Language.NGLType) ->
                 case Language.$fOrdNGLType_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
0338a472fba7af613024bb95d508584a
  $fOrdOptimizedExpression ::
    GHC.Classes.Ord Language.OptimizedExpression
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.OptimizedExpression
                  Language.$fEqOptimizedExpression
                  Language.$fOrdOptimizedExpression_$ccompare
                  Language.$fOrdOptimizedExpression_$c<
                  Language.$fOrdOptimizedExpression_$c<=
                  Language.$fOrdOptimizedExpression_$c>
                  Language.$fOrdOptimizedExpression_$c>=
                  Language.$fOrdOptimizedExpression_$cmax
                  Language.$fOrdOptimizedExpression_$cmin -}
0338a472fba7af613024bb95d508584a
  $fOrdOptimizedExpression_$c< ::
    Language.OptimizedExpression
    -> Language.OptimizedExpression -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.OptimizedExpression)
                   (b :: Language.OptimizedExpression) ->
                 case a of wild {
                   Language.LenThresholdDiscard a1 a2 a3
                   -> case b of wild1 {
                        Language.LenThresholdDiscard b1 b2 b3
                        -> case a1
                                  `cast`
                                (Language.N:Variable[0]) of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case b1
                                  `cast`
                                (Language.N:Variable[0]) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild2 {
                             GHC.Types.LT -> GHC.Types.True
                             GHC.Types.EQ
                             -> case GHC.Prim.dataToTag# @ Language.BOp a2 of a# { DEFAULT ->
                                case GHC.Prim.dataToTag# @ Language.BOp b2 of b# { DEFAULT ->
                                case GHC.Prim.<# a# b# of lwild {
                                  DEFAULT
                                  -> case GHC.Prim.==# a# b# of lwild1 {
                                       DEFAULT -> GHC.Types.False 1# -> GHC.Classes.ltInt a3 b3 }
                                  1# -> GHC.Types.True } } }
                             GHC.Types.GT -> GHC.Types.False } } }
                        Language.SubstrimReassign ipv ipv1 -> GHC.Types.True }
                   Language.SubstrimReassign a1 a2
                   -> case b of wild1 {
                        Language.LenThresholdDiscard ipv ipv1 ipv2 -> GHC.Types.False
                        Language.SubstrimReassign b1 b2
                        -> case a1
                                  `cast`
                                (Language.N:Variable[0]) of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case b1
                                  `cast`
                                (Language.N:Variable[0]) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild2 {
                             GHC.Types.LT -> GHC.Types.True
                             GHC.Types.EQ -> GHC.Classes.ltInt a2 b2
                             GHC.Types.GT -> GHC.Types.False } } } } }) -}
0338a472fba7af613024bb95d508584a
  $fOrdOptimizedExpression_$c<= ::
    Language.OptimizedExpression
    -> Language.OptimizedExpression -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.OptimizedExpression)
                   (b :: Language.OptimizedExpression) ->
                 case Language.$fOrdOptimizedExpression_$c< b a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
0338a472fba7af613024bb95d508584a
  $fOrdOptimizedExpression_$c> ::
    Language.OptimizedExpression
    -> Language.OptimizedExpression -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.OptimizedExpression)
                   (b :: Language.OptimizedExpression) ->
                 Language.$fOrdOptimizedExpression_$c< b a) -}
0338a472fba7af613024bb95d508584a
  $fOrdOptimizedExpression_$c>= ::
    Language.OptimizedExpression
    -> Language.OptimizedExpression -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.OptimizedExpression)
                   (b :: Language.OptimizedExpression) ->
                 case Language.$fOrdOptimizedExpression_$c< a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
0338a472fba7af613024bb95d508584a
  $fOrdOptimizedExpression_$ccompare ::
    Language.OptimizedExpression
    -> Language.OptimizedExpression -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.OptimizedExpression)
                   (b :: Language.OptimizedExpression) ->
                 case a of wild {
                   Language.LenThresholdDiscard a1 a2 a3
                   -> case b of wild1 {
                        Language.LenThresholdDiscard b1 b2 b3
                        -> case a1
                                  `cast`
                                (Language.N:Variable[0]) of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case b1
                                  `cast`
                                (Language.N:Variable[0]) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild2 {
                             GHC.Types.LT -> GHC.Types.LT
                             GHC.Types.EQ
                             -> case GHC.Prim.dataToTag# @ Language.BOp a2 of a# { DEFAULT ->
                                case GHC.Prim.dataToTag# @ Language.BOp b2 of b# { DEFAULT ->
                                case GHC.Prim.<# a# b# of lwild {
                                  DEFAULT
                                  -> case GHC.Prim.==# a# b# of lwild1 {
                                       DEFAULT -> GHC.Types.GT 1# -> GHC.Classes.compareInt a3 b3 }
                                  1# -> GHC.Types.LT } } }
                             GHC.Types.GT -> GHC.Types.GT } } }
                        Language.SubstrimReassign ipv ipv1 -> GHC.Types.LT }
                   Language.SubstrimReassign a1 a2
                   -> case b of wild1 {
                        Language.LenThresholdDiscard ipv ipv1 ipv2 -> GHC.Types.GT
                        Language.SubstrimReassign b1 b2
                        -> case a1
                                  `cast`
                                (Language.N:Variable[0]) of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case b1
                                  `cast`
                                (Language.N:Variable[0]) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild2 {
                             GHC.Types.LT -> GHC.Types.LT
                             GHC.Types.EQ -> GHC.Classes.compareInt a2 b2
                             GHC.Types.GT -> GHC.Types.GT } } } } }) -}
0338a472fba7af613024bb95d508584a
  $fOrdOptimizedExpression_$cmax ::
    Language.OptimizedExpression
    -> Language.OptimizedExpression -> Language.OptimizedExpression
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.OptimizedExpression)
                   (y :: Language.OptimizedExpression) ->
                 case Language.$fOrdOptimizedExpression_$c< y x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
0338a472fba7af613024bb95d508584a
  $fOrdOptimizedExpression_$cmin ::
    Language.OptimizedExpression
    -> Language.OptimizedExpression -> Language.OptimizedExpression
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.OptimizedExpression)
                   (y :: Language.OptimizedExpression) ->
                 case Language.$fOrdOptimizedExpression_$c< y x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
72ea05232a2f0c6e38ace4b9bd98df0d
  $fOrdUOp :: GHC.Classes.Ord Language.UOp
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.UOp
                  Language.$fEqUOp
                  Language.$fOrdUOp_$ccompare
                  Language.$fOrdUOp_$c<
                  Language.$fOrdUOp_$c<=
                  Language.$fOrdUOp_$c>
                  Language.$fOrdUOp_$c>=
                  Language.$fOrdUOp_$cmax
                  Language.$fOrdUOp_$cmin -}
72ea05232a2f0c6e38ace4b9bd98df0d
  $fOrdUOp_$c< :: Language.UOp -> Language.UOp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.UOp) (b :: Language.UOp) ->
                 case a of wild {
                   Language.UOpLen
                   -> case b of wild1 {
                        Language.UOpLen -> GHC.Types.False
                        Language.UOpMinus -> GHC.Types.True
                        Language.UOpNot -> GHC.Types.True }
                   Language.UOpMinus
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False Language.UOpNot -> GHC.Types.True }
                   Language.UOpNot
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
72ea05232a2f0c6e38ace4b9bd98df0d
  $fOrdUOp_$c<= :: Language.UOp -> Language.UOp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.UOp) (b :: Language.UOp) ->
                 let {
                   $j :: GHC.Prim.Int# -> GHC.Types.Bool
                     <join 1> {- Arity: 1, Strictness: <S,U> -}
                   = \ (a# :: GHC.Prim.Int#)[OneShot] ->
                     case a of wild {
                       Language.UOpLen
                       -> case GHC.Prim.<# a# 0# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False }
                       Language.UOpMinus
                       -> case GHC.Prim.<# a# 1# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False }
                       Language.UOpNot
                       -> case GHC.Prim.<# a# 2# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False } }
                 } in
                 case b of wild {
                   Language.UOpLen -> $j 0#
                   Language.UOpMinus -> $j 1#
                   Language.UOpNot -> $j 2# }) -}
72ea05232a2f0c6e38ace4b9bd98df0d
  $fOrdUOp_$c> :: Language.UOp -> Language.UOp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.UOp) (b :: Language.UOp) ->
                 Language.$fOrdUOp_$c< b a) -}
72ea05232a2f0c6e38ace4b9bd98df0d
  $fOrdUOp_$c>= :: Language.UOp -> Language.UOp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.UOp) (b :: Language.UOp) ->
                 let {
                   $j :: GHC.Prim.Int# -> GHC.Types.Bool
                     <join 1> {- Arity: 1, Strictness: <S,U> -}
                   = \ (a# :: GHC.Prim.Int#)[OneShot] ->
                     case b of wild {
                       Language.UOpLen
                       -> case GHC.Prim.<# a# 0# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False }
                       Language.UOpMinus
                       -> case GHC.Prim.<# a# 1# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False }
                       Language.UOpNot
                       -> case GHC.Prim.<# a# 2# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False } }
                 } in
                 case a of wild {
                   Language.UOpLen -> $j 0#
                   Language.UOpMinus -> $j 1#
                   Language.UOpNot -> $j 2# }) -}
72ea05232a2f0c6e38ace4b9bd98df0d
  $fOrdUOp_$ccompare ::
    Language.UOp -> Language.UOp -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.UOp) (b :: Language.UOp) ->
                 case a of wild {
                   Language.UOpLen
                   -> case b of wild1 {
                        Language.UOpLen -> GHC.Types.EQ
                        Language.UOpMinus -> GHC.Types.LT
                        Language.UOpNot -> GHC.Types.LT }
                   Language.UOpMinus
                   -> case b of wild1 {
                        Language.UOpLen -> GHC.Types.GT
                        Language.UOpMinus -> GHC.Types.EQ
                        Language.UOpNot -> GHC.Types.LT }
                   Language.UOpNot
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT Language.UOpNot -> GHC.Types.EQ } }) -}
72ea05232a2f0c6e38ace4b9bd98df0d
  $fOrdUOp_$cmax :: Language.UOp -> Language.UOp -> Language.UOp
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.UOp) (y :: Language.UOp) ->
                 case Language.$fOrdUOp_$c<= x y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
72ea05232a2f0c6e38ace4b9bd98df0d
  $fOrdUOp_$cmin :: Language.UOp -> Language.UOp -> Language.UOp
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.UOp) (y :: Language.UOp) ->
                 case Language.$fOrdUOp_$c<= x y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
6ea856e2345fb0911676ec309bc5b12f
  $fOrdVariable :: GHC.Classes.Ord Language.Variable
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Variable
                  Language.$fEqVariable
                  Data.Text.$fOrdText_$ccompare
                    `cast`
                  (Sym (Language.N:Variable[0])
                   ->_R Sym (Language.N:Variable[0])
                   ->_R <GHC.Types.Ordering>_R)
                  Data.Text.$fOrdText_$c<
                    `cast`
                  (Sym (Language.N:Variable[0])
                   ->_R Sym (Language.N:Variable[0])
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fOrdText_$c<=
                    `cast`
                  (Sym (Language.N:Variable[0])
                   ->_R Sym (Language.N:Variable[0])
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fOrdText_$c>
                    `cast`
                  (Sym (Language.N:Variable[0])
                   ->_R Sym (Language.N:Variable[0])
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fOrdText_$c>=
                    `cast`
                  (Sym (Language.N:Variable[0])
                   ->_R Sym (Language.N:Variable[0])
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fOrdText_$cmax
                    `cast`
                  (Sym (Language.N:Variable[0])
                   ->_R Sym (Language.N:Variable[0])
                   ->_R Sym (Language.N:Variable[0]))
                  Data.Text.$fOrdText_$cmin
                    `cast`
                  (Sym (Language.N:Variable[0])
                   ->_R Sym (Language.N:Variable[0])
                   ->_R Sym (Language.N:Variable[0])) -}
082be4a718fd86899f5b7f01bed2cf9a
  $fShowBOp :: GHC.Show.Show Language.BOp
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.BOp
                  Language.$fShowBOp_$cshowsPrec
                  Language.$fShowBOp_$cshow
                  Language.$fShowBOp_$cshowList -}
082be4a718fd86899f5b7f01bed2cf9a
  $fShowBOp_$cshow :: Language.BOp -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Language.BOp) ->
                 case x of wild {
                   Language.BOpAdd -> GHC.CString.unpackCString# "BOpAdd"#
                   Language.BOpMul -> GHC.CString.unpackCString# "BOpMul"#
                   Language.BOpGT -> GHC.CString.unpackCString# "BOpGT"#
                   Language.BOpGTE -> GHC.CString.unpackCString# "BOpGTE"#
                   Language.BOpLT -> GHC.CString.unpackCString# "BOpLT"#
                   Language.BOpLTE -> GHC.CString.unpackCString# "BOpLTE"#
                   Language.BOpEQ -> GHC.CString.unpackCString# "BOpEQ"#
                   Language.BOpNEQ -> GHC.CString.unpackCString# "BOpNEQ"#
                   Language.BOpPathAppend
                   -> GHC.CString.unpackCString# "BOpPathAppend"# }) -}
082be4a718fd86899f5b7f01bed2cf9a
  $fShowBOp_$cshowList :: [Language.BOp] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.BOp]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.BOp
                   (Language.$fShowBOp_$cshowsPrec (GHC.Types.I# 0#))
                   ls
                   s) -}
082be4a718fd86899f5b7f01bed2cf9a
  $fShowBOp_$cshowsPrec ::
    GHC.Types.Int -> Language.BOp -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,1*U>, Inline: [2],
     Unfolding: InlineRule (2, True, True)
                (\ (w :: GHC.Types.Int) (w1 :: Language.BOp) ->
                 Language.$w$cshowsPrec w1) -}
adc8def6a4b7257bb12aef607cf99238
  $fShowBlock :: GHC.Show.Show Language.Block
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Block
                  Language.$fShowBlock_$cshowsPrec
                  Language.$fShowBlock_$cshow1
                  Language.$fShowBlock_$cshowList -}
adc8def6a4b7257bb12aef607cf99238
  $fShowBlock_$cshow :: Language.Expression -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
adc8def6a4b7257bb12aef607cf99238
  $fShowBlock_$cshow1 :: Language.Block -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.Block) ->
                 Language.$fShowBlock_$cshowsPrec
                   (GHC.Types.I# 0#)
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
adc8def6a4b7257bb12aef607cf99238
  $fShowBlock_$cshowList :: [Language.Block] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.Block]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.Block
                   (Language.$fShowBlock_$cshowsPrec (GHC.Types.I# 0#))
                   ls
                   s) -}
adc8def6a4b7257bb12aef607cf99238
  $fShowBlock_$cshowsPrec ::
    GHC.Types.Int -> Language.Block -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,U)>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Language.Block) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.Block ww3 ww4 ->
                 Language.$w$cshowsPrec1 ww1 ww3 ww4 } }) -}
adc8def6a4b7257bb12aef607cf99238
  $fShowExpression :: GHC.Show.Show Language.Expression
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Expression
                  Language.$fShowExpression_$cshowsPrec
                  Language.$fShowBlock_$cshow
                  Language.$fShowExpression_$cshowList -}
adc8def6a4b7257bb12aef607cf99238
  $fShowExpression_$cshowList ::
    [Language.Expression] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ls :: [Language.Expression])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.Expression
                   (\ (x :: Language.Expression) (s1 :: GHC.Base.String)[OneShot] ->
                    GHC.Base.++ @ GHC.Types.Char (Language.$fShowBlock_$cshow x) s1)
                   ls
                   s) -}
adc8def6a4b7257bb12aef607cf99238
  $fShowExpression_$cshowsPrec ::
    GHC.Types.Int -> Language.Expression -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x :: Language.Expression)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Language.$fShowBlock_$cshow x))
                   s) -}
441672d7eb62c1c87f9948f9c78adad7
  $fShowFuncName :: GHC.Show.Show Language.FuncName
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.FuncName
                  Language.$fShowFuncName_$cshowsPrec
                  Data.Text.Show.unpack
                    `cast`
                  (Sym (Language.N:FuncName[0]) ->_R <GHC.Base.String>_R)
                  Language.$fShowFuncName_$cshowList -}
441672d7eb62c1c87f9948f9c78adad7
  $fShowFuncName_$cshowList :: [Language.FuncName] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ls :: [Language.FuncName]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.FuncName
                   (\ (x :: Language.FuncName) (s1 :: GHC.Base.String)[OneShot] ->
                    case x `cast`
                         (Language.N:FuncName[0]) of wild { Data.Text.Internal.Text dt dt1 dt2 ->
                    let {
                      end :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                    } in
                    letrec {
                      $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                        {- Arity: 1, Strictness: <S,U>, Inline: [2] -}
                      = \ (ww :: GHC.Prim.Int#) ->
                        case GHC.Prim.>=# ww end of lwild {
                          DEFAULT
                          -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                             case GHC.Prim.geWord# r# 55296## of lwild1 {
                               DEFAULT
                               -> GHC.Types.:
                                    @ GHC.Types.Char
                                    (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                    ($wunfold (GHC.Prim.+# ww 1#))
                               1#
                               -> case GHC.Prim.leWord# r# 56319## of lwild2 {
                                    DEFAULT
                                    -> GHC.Types.:
                                         @ GHC.Types.Char
                                         (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                         ($wunfold (GHC.Prim.+# ww 1#))
                                    1#
                                    -> case GHC.Prim.indexWord16Array#
                                              dt
                                              (GHC.Prim.+# ww 1#) of r#1 { DEFAULT ->
                                       GHC.Types.:
                                         @ GHC.Types.Char
                                         (GHC.Types.C#
                                            (GHC.Prim.chr#
                                               (GHC.Prim.+#
                                                  9216#
                                                  (GHC.Prim.+#
                                                     (GHC.Prim.uncheckedIShiftL#
                                                        (GHC.Prim.-# (GHC.Prim.word2Int# r#) 55296#)
                                                        10#)
                                                     (GHC.Prim.word2Int# r#1)))))
                                         ($wunfold (GHC.Prim.+# ww 2#)) } } } }
                          1# -> GHC.Types.[] @ GHC.Types.Char }
                    } in
                    GHC.Base.++ @ GHC.Types.Char ($wunfold dt1) s1 })
                   ls
                   s) -}
441672d7eb62c1c87f9948f9c78adad7
  $fShowFuncName_$cshowsPrec ::
    GHC.Types.Int -> Language.FuncName -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><S(SSS),1*U(U,U,U)><L,1*U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.FuncName)
                   (w2 :: GHC.Base.String) ->
                 case w1
                        `cast`
                      (Language.N:FuncName[0]) of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Language.$w$cshowsPrec3 ww1 ww2 ww3 w2 }) -}
74bc5fb9a818f3ea1f170e1e0af29d3b
  $fShowHeader :: GHC.Show.Show Language.Header
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Header
                  Language.$fShowHeader_$cshowsPrec
                  Language.$fShowHeader_$cshow
                  Language.$fShowHeader_$cshowList -}
74bc5fb9a818f3ea1f170e1e0af29d3b
  $fShowHeader_$cshow :: Language.Header -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U(U,U,U),U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.Header) ->
                 Language.$fShowHeader_$cshowsPrec
                   (GHC.Types.I# 0#)
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
74bc5fb9a818f3ea1f170e1e0af29d3b
  $fShowHeader_$cshowList :: [Language.Header] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.Header]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.Header
                   (Language.$fShowHeader_$cshowsPrec (GHC.Types.I# 0#))
                   ls
                   s) -}
74bc5fb9a818f3ea1f170e1e0af29d3b
  $fShowHeader_$cshowsPrec ::
    GHC.Types.Int -> Language.Header -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U(U,U,U),U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Language.Header) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.Header ww3 ww4 ->
                 Language.$w$cshowsPrec4 ww1 ww3 ww4 } }) -}
adc8def6a4b7257bb12aef607cf99238
  $fShowIndex :: GHC.Show.Show Language.Index
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Index
                  Language.$fShowIndex_$cshowsPrec
                  Language.$fShowIndex_$cshow
                  Language.$fShowIndex_$cshowList -}
adc8def6a4b7257bb12aef607cf99238
  $fShowIndex_$cshow :: Language.Index -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.Index) ->
                 Language.$fShowIndex_$cshowsPrec
                   (GHC.Types.I# 0#)
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
adc8def6a4b7257bb12aef607cf99238
  $fShowIndex_$cshowList :: [Language.Index] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.Index]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.Index
                   (Language.$fShowIndex_$cshowsPrec (GHC.Types.I# 0#))
                   ls
                   s) -}
adc8def6a4b7257bb12aef607cf99238
  $fShowIndex_$cshowsPrec ::
    GHC.Types.Int -> Language.Index -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Language.Index) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.$w$cshowsPrec5 ww1 w1 }) -}
a5ecd529fe2b52118416127e8ed16401
  $fShowMethodName :: GHC.Show.Show Language.MethodName
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.MethodName
                  Language.$fShowMethodName_$cshowsPrec
                  Language.$fShowMethodName_$cshow
                  Language.$fShowMethodName_$cshowList -}
a5ecd529fe2b52118416127e8ed16401
  $fShowMethodName_$cshow :: Language.MethodName -> GHC.Base.String
  {- Arity: 1, Strictness: <L,U(U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.MethodName) ->
                 Language.$fShowMethodName_$cshowsPrec
                   (GHC.Types.I# 0#)
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
a5ecd529fe2b52118416127e8ed16401
  $fShowMethodName_$cshowList ::
    [Language.MethodName] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.MethodName]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.MethodName
                   (Language.$fShowMethodName_$cshowsPrec (GHC.Types.I# 0#))
                   ls
                   s) -}
a5ecd529fe2b52118416127e8ed16401
  $fShowMethodName_$cshowsPrec ::
    GHC.Types.Int -> Language.MethodName -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,U(U,U,U)>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Language.MethodName) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.$w$cshowsPrec6 ww1 w1 }) -}
d7f124fd1704f8a7309c0e06610b0f29
  $fShowModInfo :: GHC.Show.Show Language.ModInfo
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.ModInfo
                  Language.$fShowModInfo_$cshowsPrec
                  Language.$fShowModInfo_$cshow
                  Language.$fShowModInfo_$cshowList -}
d7f124fd1704f8a7309c0e06610b0f29
  $fShowModInfo_$cshow :: Language.ModInfo -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.ModInfo) ->
                 Language.$fShowModInfo_$cshowsPrec
                   (GHC.Types.I# 0#)
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
d7f124fd1704f8a7309c0e06610b0f29
  $fShowModInfo_$cshowList :: [Language.ModInfo] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.ModInfo]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.ModInfo
                   (Language.$fShowModInfo_$cshowsPrec (GHC.Types.I# 0#))
                   ls
                   s) -}
d7f124fd1704f8a7309c0e06610b0f29
  $fShowModInfo_$cshowsPrec ::
    GHC.Types.Int -> Language.ModInfo -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Language.ModInfo) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.$w$cshowsPrec7 ww1 w1 }) -}
d78124de7a35dac4710fa19fa17820a5
  $fShowNGLType :: GHC.Show.Show Language.NGLType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.NGLType
                  Language.$fShowNGLType_$cshowsPrec
                  Language.$fShowNGLType_$cshow
                  Language.$fShowNGLType_$cshowList -}
d78124de7a35dac4710fa19fa17820a5
  $fShowNGLType_$cshow :: Language.NGLType -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.NGLType) ->
                 Language.$fShowNGLType_$s$cshowsPrec
                   x
                   0#
                   (GHC.Types.[] @ GHC.Types.Char)) -}
d78124de7a35dac4710fa19fa17820a5
  $fShowNGLType_$cshowList :: [Language.NGLType] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.NGLType]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.NGLType
                   (Language.$fShowNGLType_$cshowsPrec (GHC.Types.I# 0#))
                   ls
                   s) -}
d78124de7a35dac4710fa19fa17820a5
  $fShowNGLType_$cshowsPrec ::
    GHC.Types.Int -> Language.NGLType -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><S,1*U>,
     Unfolding: (\ (ds :: GHC.Types.Int) (ds1 :: Language.NGLType) ->
                 case ds1 of wild {
                   Language.NGLString
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.CString.unpackCString# "NGLString"#)
                   Language.NGLInteger
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.CString.unpackCString# "NGLInteger"#)
                   Language.NGLDouble
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.CString.unpackCString# "NGLDouble"#)
                   Language.NGLBool
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.CString.unpackCString# "NGLBool"#)
                   Language.NGLSymbol
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.CString.unpackCString# "NGLSymbol"#)
                   Language.NGLFilename
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.CString.unpackCString# "NGLFilename"#)
                   Language.NGLRead
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.CString.unpackCString# "NGLRead"#)
                   Language.NGLReadSet
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.CString.unpackCString# "NGLReadSet"#)
                   Language.NGLMappedRead
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.CString.unpackCString# "NGLMappedRead"#)
                   Language.NGLMappedReadSet
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.CString.unpackCString# "NGLMappedReadSet"#)
                   Language.NGLSequenceSet
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.CString.unpackCString# "NGLSequenceSet"#)
                   Language.NGLCounts
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.CString.unpackCString# "NGLCounts"#)
                   Language.NGLVoid
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.CString.unpackCString# "NGLVoid"#)
                   Language.NGLAny
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.CString.unpackCString# "NGLAny"#)
                   Language.NGList b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        f :: GHC.Prim.Addr# = "NGList "#
                      } in
                      let {
                        f1 :: [GHC.Types.Char] = GHC.CString.unpackCString# f
                      } in
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Language.$fShowNGLType_$s$cshowsPrec b1 11#
                      } in
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char f1 (g x1)
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                f1
                                (g (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.$fShow(,)2
                                      x1))) } } }) -}
d78124de7a35dac4710fa19fa17820a5
  $fShowNGLType_$s$cshowsPrec ::
    Language.NGLType -> GHC.Prim.Int# -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
ea18243860934472078c5e2ccd0edf40
  $fShowNGLessObject :: GHC.Show.Show Language.NGLessObject
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.NGLessObject
                  Language.$fShowNGLessObject_$cshowsPrec
                  Language.$fShowNGLessObject_$cshow
                  Language.$fShowNGLessObject_$cshowList -}
ea18243860934472078c5e2ccd0edf40
  $fShowNGLessObject_$cshow ::
    Language.NGLessObject -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.NGLessObject) ->
                 Language.$fShowNGLessObject_$cshowsPrec
                   (GHC.Types.I# 0#)
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ea18243860934472078c5e2ccd0edf40
  $fShowNGLessObject_$cshowList ::
    [Language.NGLessObject] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.NGLessObject]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.NGLessObject
                   (Language.$fShowNGLessObject_$cshowsPrec (GHC.Types.I# 0#))
                   ls
                   s) -}
ea18243860934472078c5e2ccd0edf40
  $fShowNGLessObject_$cshowsPrec ::
    GHC.Types.Int -> Language.NGLessObject -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U> -}
0338a472fba7af613024bb95d508584a
  $fShowOptimizedExpression ::
    GHC.Show.Show Language.OptimizedExpression
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.OptimizedExpression
                  Language.$fShowOptimizedExpression_$cshowsPrec
                  Language.$fShowOptimizedExpression_$cshow
                  Language.$fShowOptimizedExpression_$cshowList -}
0338a472fba7af613024bb95d508584a
  $fShowOptimizedExpression_$cshow ::
    Language.OptimizedExpression -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.OptimizedExpression) ->
                 Language.$fShowOptimizedExpression_$cshowsPrec
                   (GHC.Types.I# 0#)
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0338a472fba7af613024bb95d508584a
  $fShowOptimizedExpression_$cshowList ::
    [Language.OptimizedExpression] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.OptimizedExpression]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.OptimizedExpression
                   (Language.$fShowOptimizedExpression_$cshowsPrec (GHC.Types.I# 0#))
                   ls
                   s) -}
0338a472fba7af613024bb95d508584a
  $fShowOptimizedExpression_$cshowsPrec ::
    GHC.Types.Int -> Language.OptimizedExpression -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Language.OptimizedExpression) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.$w$cshowsPrec8 ww1 w1 }) -}
76fe0974e0c66dd0b2f466e0c453166d
  $fShowScript :: GHC.Show.Show Language.Script
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Script
                  Language.$fShowScript_$cshowsPrec
                  Language.$fShowScript_$cshow
                  Language.$fShowScript_$cshowList -}
76fe0974e0c66dd0b2f466e0c453166d
  $fShowScript_$cshow :: Language.Script -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.Script) ->
                 Language.$fShowScript_$cshowsPrec
                   (GHC.Types.I# 0#)
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
76fe0974e0c66dd0b2f466e0c453166d
  $fShowScript_$cshowList :: [Language.Script] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.Script]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.Script
                   (Language.$fShowScript_$cshowsPrec (GHC.Types.I# 0#))
                   ls
                   s) -}
76fe0974e0c66dd0b2f466e0c453166d
  $fShowScript_$cshowsPrec ::
    GHC.Types.Int -> Language.Script -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,U)>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Language.Script) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.Script ww3 ww4 ->
                 Language.$w$cshowsPrec9 ww1 ww3 ww4 } }) -}
72ea05232a2f0c6e38ace4b9bd98df0d
  $fShowUOp :: GHC.Show.Show Language.UOp
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.UOp
                  Language.$fShowUOp_$cshowsPrec
                  Language.$fShowUOp_$cshow
                  Language.$fShowUOp_$cshowList -}
72ea05232a2f0c6e38ace4b9bd98df0d
  $fShowUOp_$cshow :: Language.UOp -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Language.UOp) ->
                 case x of wild {
                   Language.UOpLen -> GHC.CString.unpackCString# "UOpLen"#
                   Language.UOpMinus -> GHC.CString.unpackCString# "UOpMinus"#
                   Language.UOpNot -> GHC.CString.unpackCString# "UOpNot"# }) -}
72ea05232a2f0c6e38ace4b9bd98df0d
  $fShowUOp_$cshowList :: [Language.UOp] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.UOp]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.UOp
                   (Language.$fShowUOp_$cshowsPrec (GHC.Types.I# 0#))
                   ls
                   s) -}
72ea05232a2f0c6e38ace4b9bd98df0d
  $fShowUOp_$cshowsPrec ::
    GHC.Types.Int -> Language.UOp -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,1*U>, Inline: [2],
     Unfolding: InlineRule (2, True, True)
                (\ (w :: GHC.Types.Int) (w1 :: Language.UOp) ->
                 Language.$w$cshowsPrec10 w1) -}
6ea856e2345fb0911676ec309bc5b12f
  $fShowVariable :: GHC.Show.Show Language.Variable
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.Variable
                  Language.$fShowVariable_$cshowsPrec
                  Language.$fShowVariable_$cshow
                  Language.$fShowVariable_$cshowList -}
6ea856e2345fb0911676ec309bc5b12f
  $fShowVariable_$cshow :: Language.Variable -> GHC.Base.String
  {- Arity: 1, Strictness: <L,U(U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.Variable) ->
                 Language.$fShowVariable_$cshowsPrec
                   (GHC.Types.I# 0#)
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6ea856e2345fb0911676ec309bc5b12f
  $fShowVariable_$cshowList :: [Language.Variable] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.Variable]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.Variable
                   (Language.$fShowVariable_$cshowsPrec (GHC.Types.I# 0#))
                   ls
                   s) -}
6ea856e2345fb0911676ec309bc5b12f
  $fShowVariable_$cshowsPrec ::
    GHC.Types.Int -> Language.Variable -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,U(U,U,U)>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Language.Variable) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.$w$cshowsPrec2 ww1 w1 }) -}
879b7e51c59653eca2e6b3c2fc640b16
  $tc'Assignment :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4844032003310004452##
                   5293772789098791194##
                   Language.$trModule
                   Language.$tc'Assignment2
                   0#
                   Language.$tc'Assignment1) -}
65f8fd8c24c748d98197c8501b75a456
  $tc'Assignment1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a301a58eb4dd62d1b4fe9f682084efbc
  $tc'Assignment2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'Assignment3) -}
816520e20406e6612efe357822b8413c
  $tc'Assignment3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Assignment"#) -}
dd78438161438dff28227bee90c0d8a5
  $tc'BOpAdd :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12129413504975975045##
                   10311296100974017577##
                   Language.$trModule
                   Language.$tc'BOpAdd2
                   0#
                   Language.$tc'BOpAdd1) -}
01e907398c6a41e4e62e94314ef3e30d
  $tc'BOpAdd1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
c5b4dfaaf2bc77827247d07b87451dfd
  $tc'BOpAdd2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'BOpAdd3) -}
4fb1d80fed6440d4bd91afebee266218
  $tc'BOpAdd3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BOpAdd"#) -}
0166541b7a01e0c49601266ba299beb0
  $tc'BOpEQ :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7613655640394931963##
                   3903849693115844903##
                   Language.$trModule
                   Language.$tc'BOpEQ1
                   0#
                   Language.$tc'BOpAdd1) -}
d6fb688f0d11305c0497b96dd5160a06
  $tc'BOpEQ1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'BOpEQ2) -}
3d3fa63c70161771e4b531599af7f9bb
  $tc'BOpEQ2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BOpEQ"#) -}
e8eb2fc3a3b761f296c0c479dd043aeb
  $tc'BOpGT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3528023627811825962##
                   14429724068515547774##
                   Language.$trModule
                   Language.$tc'BOpGT1
                   0#
                   Language.$tc'BOpAdd1) -}
41306af22c9211bdaa744126df9c56c4
  $tc'BOpGT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'BOpGT2) -}
3eaaa45da60bef5a88a2c93431857f1f
  $tc'BOpGT2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BOpGT"#) -}
019fd6452b11ffb7ffe0464df7873e38
  $tc'BOpGTE :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5110153000121695688##
                   14034487210888765636##
                   Language.$trModule
                   Language.$tc'BOpGTE1
                   0#
                   Language.$tc'BOpAdd1) -}
f23327d1978b46d34e0658e116cebb27
  $tc'BOpGTE1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'BOpGTE2) -}
90c08b933a2eb98494846c62b4489ea1
  $tc'BOpGTE2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BOpGTE"#) -}
a17b0ee1727f329778802e52f7cf432d
  $tc'BOpLT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12066566536100309443##
                   7998563424856092062##
                   Language.$trModule
                   Language.$tc'BOpLT1
                   0#
                   Language.$tc'BOpAdd1) -}
5aa80c61a013bd51a127b4062b190bbe
  $tc'BOpLT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'BOpLT2) -}
a4dc9834a2a0c264b44dff0de6746b2b
  $tc'BOpLT2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BOpLT"#) -}
fd5607ce5a0e287b7f74aa55f0103ef9
  $tc'BOpLTE :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11215977480365255519##
                   1801991991425963898##
                   Language.$trModule
                   Language.$tc'BOpLTE1
                   0#
                   Language.$tc'BOpAdd1) -}
b680aaf80668a0bffc3fa07f3f00e66b
  $tc'BOpLTE1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'BOpLTE2) -}
bef9d7fad031a77c14d46e43761640dd
  $tc'BOpLTE2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BOpLTE"#) -}
5cdbba20281fdd898b28babe0ebd87d9
  $tc'BOpMul :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10831249729083419946##
                   4116385142581754575##
                   Language.$trModule
                   Language.$tc'BOpMul1
                   0#
                   Language.$tc'BOpAdd1) -}
a3bcf02fe770a2c91c02500e81b4bf14
  $tc'BOpMul1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'BOpMul2) -}
0b21b458f66e4db87c85dfa9c57e3a57
  $tc'BOpMul2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BOpMul"#) -}
1d417d063b738c4dd139ffc96af4ed3d
  $tc'BOpNEQ :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1904012082785858386##
                   5327003982545508576##
                   Language.$trModule
                   Language.$tc'BOpNEQ1
                   0#
                   Language.$tc'BOpAdd1) -}
30f6679c84efc259ed1cfcfc22b4d64e
  $tc'BOpNEQ1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'BOpNEQ2) -}
7c3f89647fc0b88c467d4fddcf42c8ad
  $tc'BOpNEQ2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BOpNEQ"#) -}
6c57cdb9f2aa7434c74e2a4957455ee2
  $tc'BOpPathAppend :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10462956174319898052##
                   13016566584865287482##
                   Language.$trModule
                   Language.$tc'BOpPathAppend1
                   0#
                   Language.$tc'BOpAdd1) -}
10b5becf053ed968f38e7fb9389e1004
  $tc'BOpPathAppend1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'BOpPathAppend2) -}
fb12cf11bb43cefb959c7b6f267e24be
  $tc'BOpPathAppend2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BOpPathAppend"#) -}
ab807ecbbc7e90f84b07678a3b9bf9bc
  $tc'BinaryOp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11027694918821563610##
                   6102523912900007375##
                   Language.$trModule
                   Language.$tc'BinaryOp2
                   0#
                   Language.$tc'BinaryOp1) -}
90dbc1cdd9f71ac90620ed6864a653f8
  $tc'BinaryOp1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
02d9d966586794f31502ce7883abb404
  $tc'BinaryOp2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'BinaryOp3) -}
4e9d47830f4155308548b7e8d97cf912
  $tc'BinaryOp3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BinaryOp"#) -}
c520fa63ab1b9e8f939c45f73e61c5ef
  $tc'Block :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10073313103978065827##
                   10031571539973290705##
                   Language.$trModule
                   Language.$tc'Block2
                   0#
                   Language.$tc'Block1) -}
3027cd963d66013cb54310c55a39bb52
  $tc'Block1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
73e0ba63497f6634b864cd7c0491a828
  $tc'Block2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'Block3) -}
03ec1844f7e24a75630b9f8b0e151def
  $tc'Block3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Block"#) -}
3bd8a110a1bdd2d1dcc7b78f4dd8556c
  $tc'BuiltinConstant :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11322673806896034156##
                   7407179762499463209##
                   Language.$trModule
                   Language.$tc'BuiltinConstant2
                   0#
                   Language.$tc'BuiltinConstant1) -}
b66ffd550acd168aca69c029195ed307
  $tc'BuiltinConstant1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4736e35dc34a44c981d0404019a868e5
  $tc'BuiltinConstant2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'BuiltinConstant3) -}
2728a7347248bc132e18bbd3adde503b
  $tc'BuiltinConstant3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BuiltinConstant"#) -}
219516890268aef5abcec170050ee17d
  $tc'Condition :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13459507389304365095##
                   14767525772677661348##
                   Language.$trModule
                   Language.$tc'Condition2
                   0#
                   Language.$tc'Condition1) -}
48f86c52049bd7901dcafc1e5c385b96
  $tc'Condition1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c1f2fcb20737fb2d89bfa1079f78ff28
  $tc'Condition2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'Condition3) -}
554094f43e19ab4bb1da971141992fb6
  $tc'Condition3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Condition"#) -}
eadcd67ea6270e20e429b12b4cedb4c7
  $tc'ConstBool :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17316189166140739837##
                   8387871886134209286##
                   Language.$trModule
                   Language.$tc'ConstBool2
                   0#
                   Language.$tc'ConstBool1) -}
555fa550032fbe1a8ec84d84e8abd3ef
  $tc'ConstBool1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
342494d760bb05053f73a1c42e804840
  $tc'ConstBool2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'ConstBool3) -}
2e663fc9d354b501a311db179fea2d94
  $tc'ConstBool3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ConstBool"#) -}
5f12b7f6ce5dad403760df6cd5e60b60
  $tc'ConstDouble :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16363780318920871223##
                   13580073395864073891##
                   Language.$trModule
                   Language.$tc'ConstDouble2
                   0#
                   Language.$tc'ConstDouble1) -}
df70536eebe3088777f8190ab47dbd04
  $tc'ConstDouble1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
53faeddbc28ece8d71c5494825a8a30b
  $tc'ConstDouble2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'ConstDouble3) -}
8ef1b90fa70351bacbc1c5bded6f7317
  $tc'ConstDouble3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ConstDouble"#) -}
1a46056ef4892ffe4761bd849baee19c
  $tc'ConstInt :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11610688386215126049##
                   9347400699668518720##
                   Language.$trModule
                   Language.$tc'ConstInt2
                   0#
                   Language.$tc'ConstInt1) -}
6aaa4ce85d75f06ca532b74e0f2085f3
  $tc'ConstInt1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d6f42e922b9ea0d675a37053e34e01f3
  $tc'ConstInt2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'ConstInt3) -}
0dbd5a43082ef2dba800f3ad8ff3055c
  $tc'ConstInt3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ConstInt"#) -}
de2422a92d91e6b4aaf6d6fe113bfbe6
  $tc'ConstStr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10312748934775859847##
                   14742673866063257637##
                   Language.$trModule
                   Language.$tc'ConstStr2
                   0#
                   Language.$tc'ConstStr1) -}
566469a4c957f0878c7dc41c1e1f03b7
  $tc'ConstStr1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e83b2dfb353bd1c8b2d826cbba468f89
  $tc'ConstStr2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'ConstStr3) -}
415dd2c81452f9a18af789971d5860bf
  $tc'ConstStr3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ConstStr"#) -}
1c7b22c84e7d93f2ace2e77fdc7c36cd
  $tc'ConstSymbol :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8738041704231916655##
                   10259233847560401111##
                   Language.$trModule
                   Language.$tc'ConstSymbol1
                   0#
                   Language.$tc'ConstStr1) -}
87da08a313fc413a0d79e0db5ebd36d6
  $tc'ConstSymbol1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'ConstSymbol2) -}
d8f3801c9dd5dd8beb4ef84368c5e1cc
  $tc'ConstSymbol2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ConstSymbol"#) -}
eb45850e3fe2cae089c0c15ca837bdbd
  $tc'Continue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5663156646062149189##
                   15161639553668030934##
                   Language.$trModule
                   Language.$tc'Continue2
                   0#
                   Language.$tc'Continue1) -}
a8c04c5a253d659d1939d709bbf014c4
  $tc'Continue1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
6119c62dceb59cdaa9b4b72beb559a83
  $tc'Continue2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'Continue3) -}
129748651a28bf0ac581f158639a4603
  $tc'Continue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Continue"#) -}
7049cb4f17070eb6c894c71ee183dc05
  $tc'Discard :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7922434215821792491##
                   863361112402767418##
                   Language.$trModule
                   Language.$tc'Discard1
                   0#
                   Language.$tc'Continue1) -}
aab9116c33061295356aa44469cd428a
  $tc'Discard1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'Discard2) -}
8977348b698dc582dcbc5751436fb7c8
  $tc'Discard2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Discard"#) -}
66463f92c5333461ec93a9b217c889ce
  $tc'FuncName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8785040104520762568##
                   2198220379898964000##
                   Language.$trModule
                   Language.$tc'FuncName2
                   0#
                   Language.$tc'FuncName1) -}
52af144ee432e8dac6f4ac039b1f833d
  $tc'FuncName1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
84af5c8631fc598ae96b0ec042a786ff
  $tc'FuncName2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'FuncName3) -}
b6b3606049ac08dcd2149ecfd7e4bdc3
  $tc'FuncName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FuncName"#) -}
d02890dfee8908767c1f662dd602cb5d
  $tc'FunctionCall :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12477242152333243522##
                   3472824660319372850##
                   Language.$trModule
                   Language.$tc'FunctionCall2
                   0#
                   Language.$tc'FunctionCall1) -}
a15ab66a9516c1223611f338abd0dfd8
  $tc'FunctionCall1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9b21e162b268e6f858ad57a430d0af22
  $tc'FunctionCall2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'FunctionCall3) -}
57236f9936b4b0285c6ba8e21cc61af0
  $tc'FunctionCall3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FunctionCall"#) -}
f70c61faf0b5d4b933db72d7b6e10cfa
  $tc'Header :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10477237440328017649##
                   15079713304606439854##
                   Language.$trModule
                   Language.$tc'Header2
                   0#
                   Language.$tc'Header1) -}
45eee6de68a1a253195ba04ad8031994
  $tc'Header1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4e5bf97f80e03ff12685576177e62538
  $tc'Header2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'Header3) -}
fa0ee7daf21ff008c86777dad8dd9310
  $tc'Header3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Header"#) -}
43677f499f67669b6fd8eb5ec334169e
  $tc'IndexExpression :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3455155596145998466##
                   9577449604896401719##
                   Language.$trModule
                   Language.$tc'IndexExpression2
                   0#
                   Language.$tc'IndexExpression1) -}
a9ce00ee59619f5f053ea51dcf8bd414
  $tc'IndexExpression1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3fd8a4c9c11ca12c17367f9fddb6f541
  $tc'IndexExpression2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'IndexExpression3) -}
3036a4bdc93ab097b6b20dc8b9113257
  $tc'IndexExpression3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IndexExpression"#) -}
a8fc7112437d137b6aad879385ccc943
  $tc'IndexOne :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10056246865371631740##
                   5038685589104840768##
                   Language.$trModule
                   Language.$tc'IndexOne2
                   0#
                   Language.$tc'IndexOne1) -}
9318bb2a288c7ed280b953aa45f6bfbf
  $tc'IndexOne1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
78b3da5c9c11c7c98bda065cbf050cf9
  $tc'IndexOne2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'IndexOne3) -}
ba3e4723b491951b97b6ebea7672fb7b
  $tc'IndexOne3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IndexOne"#) -}
59ce8de1d6c3c25644d9aa7bbfcba88a
  $tc'IndexTwo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17152939084067190534##
                   3492276639546590058##
                   Language.$trModule
                   Language.$tc'IndexTwo2
                   0#
                   Language.$tc'IndexTwo1) -}
b1ce447e6df55a481b5742e7573bfdc0
  $tc'IndexTwo1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4af140ddd34f0c3827a096426c615ef7
  $tc'IndexTwo2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'IndexTwo3) -}
7c9e2d81629c4bde0eac6f358aa9c856
  $tc'IndexTwo3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IndexTwo"#) -}
6d2546264212879a3f02237f462c0549
  $tc'LenThresholdDiscard :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7260887046429859394##
                   17419240849569065180##
                   Language.$trModule
                   Language.$tc'LenThresholdDiscard2
                   0#
                   Language.$tc'LenThresholdDiscard1) -}
0cfcafe2688ba1d25d56a54c80e11742
  $tc'LenThresholdDiscard1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3d5a8c645a97928e5e2cdacf83ba472e
  $tc'LenThresholdDiscard2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'LenThresholdDiscard3) -}
270b7eedc8144464ac53b63976eb7012
  $tc'LenThresholdDiscard3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LenThresholdDiscard"#) -}
2d96165c3321ef40355917c90b956c3c
  $tc'ListExpression :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5438821136064364535##
                   6624627742633935711##
                   Language.$trModule
                   Language.$tc'ListExpression2
                   0#
                   Language.$tc'ListExpression1) -}
bd9474b358bc38cfaae31f8489a5db04
  $tc'ListExpression1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b9844c32c005e935e17f5c8527e2e796
  $tc'ListExpression2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'ListExpression3) -}
9bbabdb7d5d28ade219967fda6636e63
  $tc'ListExpression3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ListExpression"#) -}
ad15b219bc01ca063c8c139f2effdf79
  $tc'LocalModInfo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1642681642724083288##
                   12196365628228646393##
                   Language.$trModule
                   Language.$tc'LocalModInfo2
                   0#
                   Language.$tc'LocalModInfo1) -}
42a50bc2ebc5043aafd554e60126aed0
  $tc'LocalModInfo1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1626d574fbe61e1a5725dbd0185b98c0
  $tc'LocalModInfo2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'LocalModInfo3) -}
6bbb0d5c4e6cf33a61e95096cafded32
  $tc'LocalModInfo3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LocalModInfo"#) -}
931ccbd6a329cd7c87477f75299ae85a
  $tc'Lookup :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13452427367946222709##
                   12522784314241513776##
                   Language.$trModule
                   Language.$tc'Lookup2
                   0#
                   Language.$tc'Lookup1) -}
e359d514ee040e69e50d2f98426ff902
  $tc'Lookup1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e61a9da960bc73aaab5ce5a8dcdba4f2
  $tc'Lookup2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'Lookup3) -}
3e804bf0ef5390ae968bcc53b9e371d5
  $tc'Lookup3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Lookup"#) -}
d8605f20fb8d34f3b56132cff499a05e
  $tc'MethodCall :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13292520021852473341##
                   1392098052798426580##
                   Language.$trModule
                   Language.$tc'MethodCall2
                   0#
                   Language.$tc'MethodCall1) -}
f6fd35af3248d6a830ef1da9c12684f9
  $tc'MethodCall1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d5db2dcf97826a580c47531747dae47c
  $tc'MethodCall2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'MethodCall3) -}
c2b3594a478b2f5ee65a5a28cafcc218
  $tc'MethodCall3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MethodCall"#) -}
4099d267606c41b1c63618b8c5452cb3
  $tc'MethodName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4336179404478923657##
                   7019956120227398901##
                   Language.$trModule
                   Language.$tc'MethodName2
                   0#
                   Language.$tc'MethodName1) -}
4cdb37c675c5015dfb967a19a4627094
  $tc'MethodName1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
117fd8bd0afe818b0ae342d29e4e78d6
  $tc'MethodName2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'MethodName3) -}
7a159d479de83ffb8e3bb77792649e45
  $tc'MethodName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MethodName"#) -}
6e89fcff0c4f9f3e1f314fc410afe672
  $tc'ModInfo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8811586948152736464##
                   12837437690151574200##
                   Language.$trModule
                   Language.$tc'ModInfo1
                   0#
                   Language.$tc'LocalModInfo1) -}
03c2bb2ac58d7ded4f6c1117167c443c
  $tc'ModInfo1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'ModInfo2) -}
be1cddc210c3d382e7e2e967d064188a
  $tc'ModInfo2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ModInfo"#) -}
ec9f6b5df6277499f6a444b1b6ece0f1
  $tc'NGLAny :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10407383023891084488##
                   14567325506471416594##
                   Language.$trModule
                   Language.$tc'NGLAny2
                   0#
                   Language.$tc'NGLAny1) -}
5d9b0f297aed25c964094aea07edaa0a
  $tc'NGLAny1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
e024640c85cabaf5c04d606748092665
  $tc'NGLAny2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'NGLAny3) -}
b7ccc9da3b5baff35b9066bf3f5b9643
  $tc'NGLAny3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NGLAny"#) -}
548e38a17437ecfb978cbeefddae5635
  $tc'NGLBool :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3465613904883268909##
                   9360044117605031796##
                   Language.$trModule
                   Language.$tc'NGLBool1
                   0#
                   Language.$tc'NGLAny1) -}
a74240e2da6c69dd5372251a40768245
  $tc'NGLBool1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'NGLBool2) -}
40f75aae88b239af71d156e7e871832e
  $tc'NGLBool2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NGLBool"#) -}
070af03fb1e186b4c77ba2c63984245e
  $tc'NGLCounts :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14374867336040151953##
                   6965764185423023747##
                   Language.$trModule
                   Language.$tc'NGLCounts1
                   0#
                   Language.$tc'NGLAny1) -}
dea3fd1a4bef198d445a8fd156bf92e2
  $tc'NGLCounts1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'NGLCounts2) -}
a8b7c1449f404923c2c62508ec6e55a9
  $tc'NGLCounts2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NGLCounts"#) -}
c7ad8b786af4752d94c509bdb304d5e7
  $tc'NGLDouble :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13865318845904504524##
                   4367821973983110792##
                   Language.$trModule
                   Language.$tc'NGLDouble1
                   0#
                   Language.$tc'NGLAny1) -}
70b1ba1fa389a8dc648b0b558fcb6b79
  $tc'NGLDouble1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'NGLDouble2) -}
2ab00d1b9e15d72d873d825dc6908e1d
  $tc'NGLDouble2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NGLDouble"#) -}
b982dc858b96a26d00b718bea8ca017e
  $tc'NGLFilename :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6622771339260671905##
                   2790739684099761710##
                   Language.$trModule
                   Language.$tc'NGLFilename1
                   0#
                   Language.$tc'NGLAny1) -}
4699c9df4bc38e2a5d9026634144d50e
  $tc'NGLFilename1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'NGLFilename2) -}
94c3d2431591abe37de7c433f8969794
  $tc'NGLFilename2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NGLFilename"#) -}
f9bff5fbcf19d22dcfb5212a90850d26
  $tc'NGLInteger :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14339186611562645686##
                   15508815483297299103##
                   Language.$trModule
                   Language.$tc'NGLInteger1
                   0#
                   Language.$tc'NGLAny1) -}
704b1211b22a6381ca23789aa1a6fe48
  $tc'NGLInteger1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'NGLInteger2) -}
9f98d502a683aadbee4785cd20032b37
  $tc'NGLInteger2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NGLInteger"#) -}
91f8a1e394457d3b2a5dbb1e5143aa83
  $tc'NGLMappedRead :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1289880949971532334##
                   10877841035520916770##
                   Language.$trModule
                   Language.$tc'NGLMappedRead1
                   0#
                   Language.$tc'NGLAny1) -}
9e48d60ee53135318e53685d859d6dd0
  $tc'NGLMappedRead1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'NGLMappedRead2) -}
7ac2aa0ec211b6a03c6a02d0c0e64ba5
  $tc'NGLMappedRead2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NGLMappedRead"#) -}
a7df895fcd27a0df6758e481b778b81d
  $tc'NGLMappedReadSet :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2704502843868078690##
                   4886000639617246751##
                   Language.$trModule
                   Language.$tc'NGLMappedReadSet1
                   0#
                   Language.$tc'NGLAny1) -}
c4be4c7f1095fdfe96e28343db431f67
  $tc'NGLMappedReadSet1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'NGLMappedReadSet2) -}
eecb30416ee3f6da5fd9ae7a8d0e0370
  $tc'NGLMappedReadSet2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NGLMappedReadSet"#) -}
024f51c2ccad37cfdd5e35e88cd0d8f3
  $tc'NGLRead :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2283515254218290890##
                   13524326597130639355##
                   Language.$trModule
                   Language.$tc'NGLRead1
                   0#
                   Language.$tc'NGLAny1) -}
71f67607855f952341d29209f5b37646
  $tc'NGLRead1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'NGLRead2) -}
0eae11b5e90954df40be0b8b09dc12c0
  $tc'NGLRead2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NGLRead"#) -}
251ce4721cc3fd3289ed9cff00031a73
  $tc'NGLReadSet :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16021426799391443640##
                   18170417085919685261##
                   Language.$trModule
                   Language.$tc'NGLReadSet1
                   0#
                   Language.$tc'NGLAny1) -}
0ae9d19b3433225ee70279ea873d6bda
  $tc'NGLReadSet1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'NGLReadSet2) -}
d5d02dc72295d97918a0852bf990a3e8
  $tc'NGLReadSet2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NGLReadSet"#) -}
665fb587233d48282a593c60730b727c
  $tc'NGLSequenceSet :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14782223159470315895##
                   2811716520358247503##
                   Language.$trModule
                   Language.$tc'NGLSequenceSet1
                   0#
                   Language.$tc'NGLAny1) -}
f31df8c5cfa14a14c9d72f9550d189e9
  $tc'NGLSequenceSet1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'NGLSequenceSet2) -}
ce1834b17fe546443c2d9a687f671b26
  $tc'NGLSequenceSet2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NGLSequenceSet"#) -}
e2dc8416c60b149e4a62574bfa55f6fc
  $tc'NGLString :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2064164163925522961##
                   15822976825084211011##
                   Language.$trModule
                   Language.$tc'NGLString1
                   0#
                   Language.$tc'NGLAny1) -}
9f06daa13b55c996c81a2e8beea7efd8
  $tc'NGLString1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'NGLString2) -}
e75657d1a63738e885c53e3eb6e8b273
  $tc'NGLString2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NGLString"#) -}
0ed8cbd628443c93a903888989df60e1
  $tc'NGLSymbol :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1276599588563823107##
                   13652659618392871663##
                   Language.$trModule
                   Language.$tc'NGLSymbol1
                   0#
                   Language.$tc'NGLAny1) -}
d6fc10dfbd94a1374505a5a1fd123762
  $tc'NGLSymbol1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'NGLSymbol2) -}
af0fb21e71450c4a5b36ca492f0e729c
  $tc'NGLSymbol2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NGLSymbol"#) -}
3d55586598e7584ec16602d5753715d9
  $tc'NGLVoid :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12173205397867713912##
                   17240937787999926893##
                   Language.$trModule
                   Language.$tc'NGLVoid1
                   0#
                   Language.$tc'NGLAny1) -}
4a6402f5fdcbafa5bd32fd73870946db
  $tc'NGLVoid1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'NGLVoid2) -}
bdb8ed5f633f808ca1e5058ecf54d2ea
  $tc'NGLVoid2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NGLVoid"#) -}
c557f9efa29a0005cf3dee72cbbe6d42
  $tc'NGList :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7251911758025477050##
                   16566189475165038914##
                   Language.$trModule
                   Language.$tc'NGList2
                   0#
                   Language.$tc'NGList1) -}
f39d6b1ca810eef43cffebec83357751
  $tc'NGList1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
bc82a45430d614e4b955826d204f45b3
  $tc'NGList2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'NGList3) -}
b9929c586d97da814ba42b8028088854
  $tc'NGList3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NGList"#) -}
9420474df7c7ec8c932b78886da6e12a
  $tc'NGOBool :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6269406815814015332##
                   7287432976191406280##
                   Language.$trModule
                   Language.$tc'NGOBool2
                   0#
                   Language.$tc'NGOBool1) -}
36ee050b93013319e97d541f0b604a6d
  $tc'NGOBool1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
76c26f6ef80444dd0f9f96072e20dfa1
  $tc'NGOBool2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'NGOBool3) -}
268747918fb34e59d5d8fc55d4359654
  $tc'NGOBool3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NGOBool"#) -}
eac150ca2cb8cc008ad024eb8a57d77d
  $tc'NGOCounts :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   212710292733881602##
                   4260744769642167257##
                   Language.$trModule
                   Language.$tc'NGOCounts2
                   0#
                   Language.$tc'NGOCounts1) -}
af8e73143f4894c0f6eb5a1b76b0038c
  $tc'NGOCounts1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
953c85656f3ce8f07b08565769597631
  $tc'NGOCounts2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'NGOCounts3) -}
c4bef06cab3fb4ad91bf876d989c5ca5
  $tc'NGOCounts3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NGOCounts"#) -}
52411998e44f751315b7b486f2d5158c
  $tc'NGODouble :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2909447985971050424##
                   12366124980343798547##
                   Language.$trModule
                   Language.$tc'NGODouble2
                   0#
                   Language.$tc'NGODouble1) -}
20358d706109dd1a48843928dffc213a
  $tc'NGODouble1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1655bb1210a59a2f1500fabdb1d3aa31
  $tc'NGODouble2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'NGODouble3) -}
c64f0e029a7677b9b68ca4900c4620b7
  $tc'NGODouble3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NGODouble"#) -}
65846a66396982839481b2c8558effa7
  $tc'NGOExpression :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11548186397471677514##
                   9382566008321315127##
                   Language.$trModule
                   Language.$tc'NGOExpression2
                   0#
                   Language.$tc'NGOExpression1) -}
f11644ffa6c42c93c160e45ba0a442ea
  $tc'NGOExpression1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ff546de5ff8d36d120d604f07f895f28
  $tc'NGOExpression2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'NGOExpression3) -}
e153405b71d5327872325d51ad5f7562
  $tc'NGOExpression3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NGOExpression"#) -}
026f5d56a3f91f7c6a0866cd24d1b2ed
  $tc'NGOFilename :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3687266147601625793##
                   14986512320959030261##
                   Language.$trModule
                   Language.$tc'NGOFilename2
                   0#
                   Language.$tc'NGOFilename1) -}
e5e257c07de89f66a8402fac43a62060
  $tc'NGOFilename1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
042684a1f6a7629111d02673531121e3
  $tc'NGOFilename2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'NGOFilename3) -}
e2236345280f2c10d85e20753a564504
  $tc'NGOFilename3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NGOFilename"#) -}
189dc18e843e77b6e02862df4c6692d6
  $tc'NGOInteger :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   85246136705873214##
                   1394241951983942617##
                   Language.$trModule
                   Language.$tc'NGOInteger2
                   0#
                   Language.$tc'NGOInteger1) -}
d9059e11ae131a3c68d04f2c7b447d8f
  $tc'NGOInteger1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
fbc5a70c6c5c45ddee77ab38a9e69eea
  $tc'NGOInteger2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'NGOInteger3) -}
742bbd56a3dd8fd0fe80224797eb7d1a
  $tc'NGOInteger3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NGOInteger"#) -}
e74b0a5bf0ad67bbb1da349af2a36318
  $tc'NGOList :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   101197887784100657##
                   14765476344229972294##
                   Language.$trModule
                   Language.$tc'NGOList2
                   0#
                   Language.$tc'NGOList1) -}
119adafbed922d3e141fa6606d555644
  $tc'NGOList1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1de2b3d04a180bec221e646e49f1f6ce
  $tc'NGOList2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'NGOList3) -}
d40c755d8d0f89fbdf399c299081c82e
  $tc'NGOList3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NGOList"#) -}
8f4d273b59a506b2e4cec46b9991da91
  $tc'NGOMappedRead :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4518568818148258157##
                   16529311317418050721##
                   Language.$trModule
                   Language.$tc'NGOMappedRead2
                   0#
                   Language.$tc'NGOMappedRead1) -}
7fe0be36a203ba5037812073fef24ebe
  $tc'NGOMappedRead1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f2d8f398898865c44e98b31f29f1587b
  $tc'NGOMappedRead2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'NGOMappedRead3) -}
222ed4445e5c58657b873302ec58abbd
  $tc'NGOMappedRead3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NGOMappedRead"#) -}
900a025ba40ab85b98ac9cbd4d7236fe
  $tc'NGOMappedReadSet :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9447643471036532171##
                   16398119551335514880##
                   Language.$trModule
                   Language.$tc'NGOMappedReadSet2
                   0#
                   Language.$tc'NGOMappedReadSet1) -}
b89c15aa25bb175ada71d01bbccf1a85
  $tc'NGOMappedReadSet1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6fea54206b03497c8b27ea468642138f
  $tc'NGOMappedReadSet2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'NGOMappedReadSet3) -}
a98a20712f5b85b2dadc0f60ba00708e
  $tc'NGOMappedReadSet3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NGOMappedReadSet"#) -}
9fe392f59c31f975c70a21926fc411f9
  $tc'NGOReadSet :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16385570111910545537##
                   17424304290860005112##
                   Language.$trModule
                   Language.$tc'NGOReadSet2
                   0#
                   Language.$tc'NGOReadSet1) -}
c53e6ebdaf082f0d0f56f56a0e23d1fe
  $tc'NGOReadSet1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9b3a7f0286cc2035e9b35dd589f18747
  $tc'NGOReadSet2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'NGOReadSet3) -}
86c2bc0f690010bf2b786b16d7fbe483
  $tc'NGOReadSet3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NGOReadSet"#) -}
56e5b12d9b92dbe9924b24797f39bf10
  $tc'NGOSequenceSet :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3790311136736451544##
                   7973657540784447424##
                   Language.$trModule
                   Language.$tc'NGOSequenceSet1
                   0#
                   Language.$tc'NGOCounts1) -}
2a0fafe7579b0f143e459959fdaa09ff
  $tc'NGOSequenceSet1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'NGOSequenceSet2) -}
ae75f1296c47f832633151643a7c744d
  $tc'NGOSequenceSet2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NGOSequenceSet"#) -}
8a6e5794b2435afbc72ded5fe4369bbc
  $tc'NGOShortRead :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9557490767465412942##
                   10395451002785393529##
                   Language.$trModule
                   Language.$tc'NGOShortRead2
                   0#
                   Language.$tc'NGOShortRead1) -}
972974eb79e4e8808cb1c53db9854a17
  $tc'NGOShortRead1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
94db74bc59f0359e35c214a5bd1e3c6d
  $tc'NGOShortRead2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'NGOShortRead3) -}
6c17eab1ed86a73fbe6a92d93c385a8f
  $tc'NGOShortRead3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NGOShortRead"#) -}
e32ff6af63584daeb82b29e67c5b49f3
  $tc'NGOString :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3369696238025243875##
                   16968496287833873468##
                   Language.$trModule
                   Language.$tc'NGOString2
                   0#
                   Language.$tc'NGOString1) -}
443a5951aa41cbbdbbbb81c74182bb4b
  $tc'NGOString1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5e3bd1324a0804a42bf153472481070f
  $tc'NGOString2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'NGOString3) -}
13d8714ee84a705008da2c3ffda4b23a
  $tc'NGOString3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NGOString"#) -}
e7d2574bea36b200862252b7df1eac64
  $tc'NGOSymbol :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17092308636149964096##
                   7114954737695485338##
                   Language.$trModule
                   Language.$tc'NGOSymbol1
                   0#
                   Language.$tc'NGOString1) -}
2837a27ca6623d277a03e021e92329fc
  $tc'NGOSymbol1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'NGOSymbol2) -}
57fc475edffac2899f3ad8a973b2b70e
  $tc'NGOSymbol2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NGOSymbol"#) -}
5cec7717ae8211cb4ad8826bc5905b47
  $tc'NGOVoid :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8847796434696233081##
                   4982084547595088088##
                   Language.$trModule
                   Language.$tc'NGOVoid2
                   0#
                   Language.$tc'NGOVoid1) -}
d34f8f3545a4b9c904137e479e36d095
  $tc'NGOVoid1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
01688c064ea433c311da558f60fa3ad9
  $tc'NGOVoid2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'NGOVoid3) -}
6f6dfde6b1cc2c35a7c861f5bf0917fb
  $tc'NGOVoid3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NGOVoid"#) -}
973d1e78208081d6adc165cc83062a15
  $tc'Optimized :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17274385862311883344##
                   3878066500324042167##
                   Language.$trModule
                   Language.$tc'Optimized2
                   0#
                   Language.$tc'Optimized1) -}
daeac1b8a975cdab88e2e66bf0945501
  $tc'Optimized1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1c6f2137cf5e9062b7c46ab26c477cfc
  $tc'Optimized2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'Optimized3) -}
bb4a87b1dfd17cd4659528da85fad1f3
  $tc'Optimized3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Optimized"#) -}
2f569fb23b0c57132ca6a69d9d364d53
  $tc'Script :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1661187718891581191##
                   2200738313038472621##
                   Language.$trModule
                   Language.$tc'Script2
                   0#
                   Language.$tc'Script1) -}
78e20b17ed0897b10f0e2e5aeaa58413
  $tc'Script1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7b54afb8d690ed94b5ee985605bc2192
  $tc'Script2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'Script3) -}
bd662acbc4f8e7e8aa6cdf760c60c251
  $tc'Script3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Script"#) -}
23783cbdd4ba1394afd2a16389b59df6
  $tc'Sequence :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1258330923905951711##
                   4285162538486899047##
                   Language.$trModule
                   Language.$tc'Sequence1
                   0#
                   Language.$tc'ListExpression1) -}
50d3ae1d32b4bbd5d47666803fd23636
  $tc'Sequence1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'Sequence2) -}
09dfcf207a2fdc4091c573d9b0751334
  $tc'Sequence2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Sequence"#) -}
687db1b9deeeca26fff791b500ebe029
  $tc'SubstrimReassign :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10059303811695941085##
                   17073589851681281817##
                   Language.$trModule
                   Language.$tc'SubstrimReassign2
                   0#
                   Language.$tc'SubstrimReassign1) -}
8b58711b184ba43c2885b0ff6df2f82a
  $tc'SubstrimReassign1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
40497214ce6b8d440c3ec7a0da02ef49
  $tc'SubstrimReassign2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'SubstrimReassign3) -}
37c05628b4c85867bf79cddebca3a804
  $tc'SubstrimReassign3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'SubstrimReassign"#) -}
ae14547f32cac6ca715552f47900280c
  $tc'UOpLen :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10220743289841958558##
                   4267861452961110461##
                   Language.$trModule
                   Language.$tc'UOpLen2
                   0#
                   Language.$tc'UOpLen1) -}
a025f771cf0945a8d6653e6c5c74bbe4
  $tc'UOpLen1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
b1c2057c998b0f07c6351768747b9712
  $tc'UOpLen2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'UOpLen3) -}
358807f5df737567568ec2e72c32e20e
  $tc'UOpLen3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UOpLen"#) -}
e7ba6d8fd7b1532fb7cc9878e75a57d9
  $tc'UOpMinus :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5793441336632308662##
                   13523711939436442214##
                   Language.$trModule
                   Language.$tc'UOpMinus1
                   0#
                   Language.$tc'UOpLen1) -}
5d52cf871fe81cc44e92e9264abf9348
  $tc'UOpMinus1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'UOpMinus2) -}
24f3aabcf45f7b4ef6a5f7743ed493b1
  $tc'UOpMinus2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UOpMinus"#) -}
3be27cd41362683fe59f55b1b42a0c0a
  $tc'UOpNot :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3400623094531001319##
                   17782702392665976679##
                   Language.$trModule
                   Language.$tc'UOpNot1
                   0#
                   Language.$tc'UOpLen1) -}
0212d17f90867a7a69ab929920f43e5e
  $tc'UOpNot1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'UOpNot2) -}
a136fd8e8518081603c3c79111388116
  $tc'UOpNot2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UOpNot"#) -}
e0a3baa2d8ae735ac4bf37ae94b1d704
  $tc'UnaryOp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8159056342633379799##
                   12419139959230710396##
                   Language.$trModule
                   Language.$tc'UnaryOp2
                   0#
                   Language.$tc'UnaryOp1) -}
9a4ad7380ce4babeb6ee3392465fc7f5
  $tc'UnaryOp1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ea7e822ee8801f502ef3278b83be3235
  $tc'UnaryOp2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'UnaryOp3) -}
0a5cdedb4f7a1973fb6df1ac0622f30d
  $tc'UnaryOp3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnaryOp"#) -}
1e1f728d95f9f952f89031f69c2d0a12
  $tc'Variable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14847974022440628803##
                   2403795707963942640##
                   Language.$trModule
                   Language.$tc'Variable2
                   0#
                   Language.$tc'Variable1) -}
075fef50eba0b9b949301d7c0af173c0
  $tc'Variable1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4a1ee60e2092253982165ceae6260be7
  $tc'Variable2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tc'Variable3) -}
5793db861dcef3f7cd45b5e81e01263f
  $tc'Variable3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Variable"#) -}
962635e96b483c5e8bd91add0030dfc4
  $tcBOp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3719709082246489847##
                   10089756056160110703##
                   Language.$trModule
                   Language.$tcBOp1
                   0#
                   GHC.Types.krep$*) -}
2e649635076bdb1c2ffd6a70ac80097f
  $tcBOp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tcBOp2) -}
75b1ea520730476c3d6f60008fe6bbc2
  $tcBOp2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BOp"#) -}
bd0bdaa6d544ba55f647a3ababc6e51d
  $tcBlock :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2879682078050177818##
                   17451946516607551268##
                   Language.$trModule
                   Language.$tcBlock1
                   0#
                   GHC.Types.krep$*) -}
ce6d328afef5c76cba646aa45dcc4173
  $tcBlock1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tcBlock2) -}
577ec3f612020d58ea6ba7cdc34fbf46
  $tcBlock2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Block"#) -}
8d5d7306bba9017a82be06bd742acc0b
  $tcExpression :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16873129070898559848##
                   11217388740984163210##
                   Language.$trModule
                   Language.$tcExpression1
                   0#
                   GHC.Types.krep$*) -}
f368a1ce65045f2a70c21d277157f999
  $tcExpression1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tcExpression2) -}
7dd3b27b9e106102f4bf778949ee1ae8
  $tcExpression2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Expression"#) -}
c23c7df45369ce52e97d7cb11050769c
  $tcFuncName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16341276980803547644##
                   7172269064612302452##
                   Language.$trModule
                   Language.$tcFuncName1
                   0#
                   GHC.Types.krep$*) -}
dd91cc528ce10f76bf0f376865f3824e
  $tcFuncName1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tcFuncName2) -}
d4ee5bf5964faa965b43d409c60ac261
  $tcFuncName2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FuncName"#) -}
93b20dc85404956aae75127bb723e50c
  $tcHeader :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9370334935273658107##
                   6126238113595308857##
                   Language.$trModule
                   Language.$tcHeader1
                   0#
                   GHC.Types.krep$*) -}
74213d1da59b9cc0bb433fd9010f209f
  $tcHeader1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tcHeader2) -}
215349a5d1411480c4cbf1bd314b610a
  $tcHeader2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Header"#) -}
d1ad636cf0ff990f4179fac17a000ee2
  $tcIndex :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3099397548685550208##
                   17614751305506948321##
                   Language.$trModule
                   Language.$tcIndex1
                   0#
                   GHC.Types.krep$*) -}
f81d24a560650e16b3f91e8d3339d411
  $tcIndex1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tcIndex2) -}
5cb71782f70524f02dd70a51f4c4c712
  $tcIndex2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Index"#) -}
300cc5d6f124a27e41513b06cf893319
  $tcMethodName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15297195840223368908##
                   11352786254540525108##
                   Language.$trModule
                   Language.$tcMethodName1
                   0#
                   GHC.Types.krep$*) -}
8b1f6896d1392d59fd6ef7d14f2f7ae6
  $tcMethodName1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tcMethodName2) -}
4fa5b6beffabe2bb546b2f8d95e7fef7
  $tcMethodName2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MethodName"#) -}
c1333f3d9906257357691225a1a94de6
  $tcModInfo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8809079300658004459##
                   4240128775115528758##
                   Language.$trModule
                   Language.$tcModInfo1
                   0#
                   GHC.Types.krep$*) -}
4eec1652570e2509e43c55b3bccd069c
  $tcModInfo1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tcModInfo2) -}
67aaf9aae4bbf03544e657505afdcac3
  $tcModInfo2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ModInfo"#) -}
ade5b45808802a16037c7d700437e1fa
  $tcNGLType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13478947977752770395##
                   620199999172286393##
                   Language.$trModule
                   Language.$tcNGLType1
                   0#
                   GHC.Types.krep$*) -}
e487b314ae7c1698e99e1f7e7c4df837
  $tcNGLType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tcNGLType2) -}
892c61522794cbe333abac96a92b64e6
  $tcNGLType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NGLType"#) -}
40580f46bd833b29d628d97cc02c2b04
  $tcNGLessObject :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5757697221353086507##
                   7380268262199167943##
                   Language.$trModule
                   Language.$tcNGLessObject1
                   0#
                   GHC.Types.krep$*) -}
9a9f4c2d5111bd52bddb2207c2a487be
  $tcNGLessObject1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tcNGLessObject2) -}
c063e570a1bf7a135790ede2c681bb6f
  $tcNGLessObject2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NGLessObject"#) -}
18f7b051096f4f62e25a6e315c09609d
  $tcOptimizedExpression :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16752676685555816948##
                   5771962613486394864##
                   Language.$trModule
                   Language.$tcOptimizedExpression1
                   0#
                   GHC.Types.krep$*) -}
37d7a9bda379833c1209a50b46b1ad76
  $tcOptimizedExpression1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tcOptimizedExpression2) -}
b31e5defe593e4e13be8310f2dcea675
  $tcOptimizedExpression2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("OptimizedExpression"#) -}
5b1e9789cd9157d4e14cd38588fb36bf
  $tcScript :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11078475178269288064##
                   9915504306069277497##
                   Language.$trModule
                   Language.$tcScript1
                   0#
                   GHC.Types.krep$*) -}
fafd84950a901d3f1e83abd04905e5ab
  $tcScript1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tcScript2) -}
979855a69ab1a0bc6396004ec731c601
  $tcScript2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Script"#) -}
11656981c5e8e18b9ac0092ea3168d09
  $tcUOp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2554278091316793064##
                   15031232804731334166##
                   Language.$trModule
                   Language.$tcUOp1
                   0#
                   GHC.Types.krep$*) -}
9a05b51bad8272c213555708c0794c47
  $tcUOp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tcUOp2) -}
766fb67e2113ec69ed3ffc2035f7475a
  $tcUOp2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("UOp"#) -}
e50b6f989db0930acaacfb1ef5a11dca
  $tcVariable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11325040616484414457##
                   14787785943593169019##
                   Language.$trModule
                   Language.$tcVariable1
                   0#
                   GHC.Types.krep$*) -}
af4469c6d4aa49fe114b76be7588b9e8
  $tcVariable1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$tcVariable2) -}
759373bae63372e1dbb061473bb06621
  $tcVariable2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Variable"#) -}
479279d81234b6cd67204fb3dabf1bc6
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.$trModule3
                   Language.$trModule1) -}
e820e16048465865f6a42e38f274244d
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$trModule2) -}
19db6c7e71dc79936b75f9df09f216c7
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language"#) -}
532bf178713d630c819e97e88bcc73a7
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.$trModule4) -}
61c878cd9855d6876b90b33a4da0ac2a
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("NGLess-1.1.0-965Np14lOUvJ2rS9XGhph5"#) -}
adc8def6a4b7257bb12aef607cf99238
  $w$c< ::
    [Language.Variable]
    -> Language.Expression
    -> [Language.Variable]
    -> Language.Expression
    -> GHC.Types.Bool
  {- Arity: 4, Strictness: <S,1*U><L,1*U><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: [Language.Variable])
                   (ww1 :: Language.Expression)
                   (ww2 :: [Language.Variable])
                   (ww3 :: Language.Expression) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Language.Variable
                        Language.$fOrdVariable
                        ww
                        ww2 of wild {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ -> Language.$fOrdBlock_$c<1 ww1 ww3
                   GHC.Types.GT -> GHC.Types.False }) -}
adc8def6a4b7257bb12aef607cf99238
  $w$c<= ::
    [Language.Variable]
    -> Language.Expression
    -> [Language.Variable]
    -> Language.Expression
    -> GHC.Types.Bool
  {- Arity: 4, Strictness: <S,1*U><L,U><S,1*U><L,1*U>, Inline: [2],
     Unfolding: (\ (ww :: [Language.Variable])
                   (ww1 :: Language.Expression)
                   (ww2 :: [Language.Variable])
                   (ww3 :: Language.Expression) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Language.Variable
                        Language.$fOrdVariable
                        ww2
                        ww of wild {
                   GHC.Types.LT -> GHC.Types.False
                   GHC.Types.EQ
                   -> case Language.$fOrdBlock_$ccompare ww3 ww1 of wild1 {
                        DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }
                   GHC.Types.GT -> GHC.Types.True }) -}
adc8def6a4b7257bb12aef607cf99238
  $w$c== ::
    [Language.Variable]
    -> Language.Expression
    -> [Language.Variable]
    -> Language.Expression
    -> GHC.Types.Bool
  {- Arity: 4, Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [2],
     Unfolding: (\ (ww :: [Language.Variable])
                   (ww1 :: Language.Expression)
                   (ww2 :: [Language.Variable])
                   (ww3 :: Language.Expression) ->
                 case GHC.Classes.$fEq[]_$c==
                        @ Language.Variable
                        Language.$fEqVariable
                        ww
                        ww2 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> Language.$fEqBlock_$c==1 ww1 ww3 }) -}
7a13908c22fa01c5617ca7a674498cb5
  $w$c==1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [Language.ModInfo]
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [Language.ModInfo]
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <L,U><L,U><S,U><L,1*U><L,U><L,U><S,U><L,1*U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: [Language.ModInfo])
                   (ww4 :: GHC.Prim.ByteArray#)
                   (ww5 :: GHC.Prim.Int#)
                   (ww6 :: GHC.Prim.Int#)
                   (ww7 :: [Language.ModInfo]) ->
                 case GHC.Prim.==# ww2 ww6 of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> case {__pkg_ccall text-1.2.3.1 GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.Prim.Int# #)}
                             ww
                             (GHC.Prim.int2Word# ww1)
                             ww4
                             (GHC.Prim.int2Word# ww5)
                             (GHC.Prim.int2Word# ww2)
                             GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                      case GHC.Prim.narrow32Int# ds3 of wild {
                        DEFAULT -> GHC.Types.False
                        0#
                        -> GHC.Classes.$fEq[]_$c==
                             @ Language.ModInfo
                             Language.$fEqModInfo
                             ww3
                             ww7 } } }) -}
c8bc7bd6731fe9a762e0cab7c16018ad
  $w$c==2 ::
    GHC.Maybe.Maybe Language.Header
    -> [(GHC.Types.Int, Language.Expression)]
    -> GHC.Maybe.Maybe Language.Header
    -> [(GHC.Types.Int, Language.Expression)]
    -> GHC.Types.Bool
  {- Arity: 4, Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Maybe.Maybe Language.Header)
                   (ww1 :: [(GHC.Types.Int, Language.Expression)])
                   (ww2 :: GHC.Maybe.Maybe Language.Header)
                   (ww3 :: [(GHC.Types.Int, Language.Expression)]) ->
                 case ww of wild {
                   GHC.Maybe.Nothing
                   -> case ww2 of wild1 {
                        GHC.Maybe.Nothing
                        -> GHC.Classes.$fEq[]_$c==
                             @ (GHC.Types.Int, Language.Expression)
                             Language.$fEqScript1
                             ww1
                             ww3
                        GHC.Maybe.Just ipv -> GHC.Types.False }
                   GHC.Maybe.Just a1
                   -> case ww2 of wild1 {
                        GHC.Maybe.Nothing -> GHC.Types.False
                        GHC.Maybe.Just b1
                        -> case a1 of ww4 { Language.Header ww5 ww6 ->
                           case ww5 of ww7 { Data.Text.Internal.Text ww8 ww9 ww10 ->
                           case b1 of ww11 { Language.Header ww12 ww13 ->
                           case ww12 of ww14 { Data.Text.Internal.Text ww15 ww16 ww17 ->
                           case GHC.Prim.==# ww10 ww17 of lwild {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> case {__pkg_ccall text-1.2.3.1 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       ww8
                                       (GHC.Prim.int2Word# ww9)
                                       ww15
                                       (GHC.Prim.int2Word# ww16)
                                       (GHC.Prim.int2Word# ww10)
                                       GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                                case GHC.Prim.narrow32Int# ds3 of wild2 {
                                  DEFAULT -> GHC.Types.False
                                  0#
                                  -> case GHC.Classes.$fEq[]_$c==
                                            @ Language.ModInfo
                                            Language.$fEqModInfo
                                            ww6
                                            ww13 of wild3 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> GHC.Classes.$fEq[]_$c==
                                            @ (GHC.Types.Int, Language.Expression)
                                            Language.$fEqScript1
                                            ww1
                                            ww3 } } } } } } } } } }) -}
adc8def6a4b7257bb12aef607cf99238
  $w$c>= ::
    [Language.Variable]
    -> Language.Expression
    -> [Language.Variable]
    -> Language.Expression
    -> GHC.Types.Bool
  {- Arity: 4, Strictness: <S,1*U><L,1*U><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: [Language.Variable])
                   (ww1 :: Language.Expression)
                   (ww2 :: [Language.Variable])
                   (ww3 :: Language.Expression) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Language.Variable
                        Language.$fOrdVariable
                        ww
                        ww2 of wild {
                   GHC.Types.LT -> GHC.Types.False
                   GHC.Types.EQ
                   -> case Language.$fOrdBlock_$ccompare ww1 ww3 of wild1 {
                        DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }
                   GHC.Types.GT -> GHC.Types.True }) -}
adc8def6a4b7257bb12aef607cf99238
  $w$ccompare ::
    [Language.Variable]
    -> Language.Expression
    -> [Language.Variable]
    -> Language.Expression
    -> GHC.Types.Ordering
  {- Arity: 4, Strictness: <S,1*U><L,1*U><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: [Language.Variable])
                   (ww1 :: Language.Expression)
                   (ww2 :: [Language.Variable])
                   (ww3 :: Language.Expression) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Language.Variable
                        Language.$fOrdVariable
                        ww
                        ww2 of wild {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ -> Language.$fOrdBlock_$ccompare ww1 ww3
                   GHC.Types.GT -> GHC.Types.GT }) -}
082be4a718fd86899f5b7f01bed2cf9a
  $w$cshowsPrec :: Language.BOp -> GHC.Show.ShowS
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [2],
     Unfolding: (\ (w :: Language.BOp) ->
                 case w of wild {
                   Language.BOpAdd
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.CString.unpackCString# "BOpAdd"#)
                   Language.BOpMul
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.CString.unpackCString# "BOpMul"#)
                   Language.BOpGT
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.CString.unpackCString# "BOpGT"#)
                   Language.BOpGTE
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.CString.unpackCString# "BOpGTE"#)
                   Language.BOpLT
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.CString.unpackCString# "BOpLT"#)
                   Language.BOpLTE
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.CString.unpackCString# "BOpLTE"#)
                   Language.BOpEQ
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.CString.unpackCString# "BOpEQ"#)
                   Language.BOpNEQ
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.CString.unpackCString# "BOpNEQ"#)
                   Language.BOpPathAppend
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.CString.unpackCString# "BOpPathAppend"#) }) -}
adc8def6a4b7257bb12aef607cf99238
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> [Language.Variable] -> Language.Expression -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [Language.Variable])
                   (ww2 :: Language.Expression) ->
                 let {
                   f :: GHC.Prim.Addr# = "Block {"#
                 } in
                 let {
                   f1 :: [GHC.Types.Char] = GHC.CString.unpackCString# f
                 } in
                 let {
                   f2 :: GHC.Prim.Addr# = "blockVariable = "#
                 } in
                 let {
                   f3 :: [GHC.Types.Char] = GHC.CString.unpackCString# f2
                 } in
                 let {
                   f4 :: GHC.Prim.Addr# = "blockBody = "#
                 } in
                 let {
                   f5 :: [GHC.Types.Char] = GHC.CString.unpackCString# f4
                 } in
                 let {
                   g :: GHC.Prim.Addr# = "}"#
                 } in
                 let {
                   g1 :: [GHC.Types.Char] = GHC.CString.unpackCString# g
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       f1
                       (GHC.Base.++
                          @ GHC.Types.Char
                          f3
                          (let {
                             s :: GHC.Base.String
                             = GHC.Base.++
                                 @ GHC.Types.Char
                                 GHC.Show.showCommaSpace1
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    f5
                                    (GHC.Base.++
                                       @ GHC.Types.Char
                                       (Language.$fShowBlock_$cshow ww2)
                                       (GHC.Base.++ @ GHC.Types.Char g1 x)))
                           } in
                           case ww1 of wild {
                             [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 s
                             : x1 xs
                             -> GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showList__3
                                  (Language.$w$cshowsPrec2
                                     0#
                                     x1
                                     (let {
                                        lvl43 :: [GHC.Types.Char]
                                        = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 s
                                      } in
                                      letrec {
                                        showl :: [Language.Variable] -> GHC.Base.String
                                          {- Arity: 1, Strictness: <S,1*U> -}
                                        = \ (ds2 :: [Language.Variable]) ->
                                          case ds2 of wild1 {
                                            [] -> lvl43
                                            : y ys
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.showList__1
                                                 (Language.$w$cshowsPrec2 0# y (showl ys)) }
                                      } in
                                      showl xs)) }))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
72ea05232a2f0c6e38ace4b9bd98df0d
  $w$cshowsPrec10 :: Language.UOp -> GHC.Show.ShowS
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [2],
     Unfolding: (\ (w :: Language.UOp) ->
                 case w of wild {
                   Language.UOpLen
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.CString.unpackCString# "UOpLen"#)
                   Language.UOpMinus
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.CString.unpackCString# "UOpMinus"#)
                   Language.UOpNot
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.CString.unpackCString# "UOpNot"#) }) -}
6ea856e2345fb0911676ec309bc5b12f
  $w$cshowsPrec2 ::
    GHC.Prim.Int# -> Language.Variable -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><L,U(U,U,U)>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: Language.Variable) ->
                 let {
                   f :: GHC.Prim.Addr# = "Variable "#
                 } in
                 let {
                   f1 :: [GHC.Types.Char] = GHC.CString.unpackCString# f
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        f1
                        (case Data.Text.Show.$w$cshowsPrec
                                w `cast` (Language.N:Variable[0])
                                x of ww1 { (#,#) ww2 ww3 ->
                         GHC.Types.: @ GHC.Types.Char ww2 ww3 })
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           f1
                           (case Data.Text.Show.$w$cshowsPrec
                                   w `cast` (Language.N:Variable[0])
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.$fShow(,)2
                                      x) of ww1 { (#,#) ww2 ww3 ->
                            GHC.Types.: @ GHC.Types.Char ww2 ww3 })) }) -}
e03e62ca39a0961f1ed8d0cfc99e96fc
  $w$cshowsPrec3 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Base.String
    -> [GHC.Types.Char]
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><S,U><S,U><L,1*U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w :: GHC.Base.String) ->
                 let {
                   end :: GHC.Prim.Int# = GHC.Prim.+# ww1 ww2
                 } in
                 letrec {
                   $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                     {- Arity: 1, Strictness: <S,U>, Inline: [2] -}
                   = \ (ww3 :: GHC.Prim.Int#) ->
                     case GHC.Prim.>=# ww3 end of lwild {
                       DEFAULT
                       -> case GHC.Prim.indexWord16Array# ww ww3 of r# { DEFAULT ->
                          case GHC.Prim.geWord# r# 55296## of lwild1 {
                            DEFAULT
                            -> GHC.Types.:
                                 @ GHC.Types.Char
                                 (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                 ($wunfold (GHC.Prim.+# ww3 1#))
                            1#
                            -> case GHC.Prim.leWord# r# 56319## of lwild2 {
                                 DEFAULT
                                 -> GHC.Types.:
                                      @ GHC.Types.Char
                                      (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                      ($wunfold (GHC.Prim.+# ww3 1#))
                                 1#
                                 -> case GHC.Prim.indexWord16Array#
                                           ww
                                           (GHC.Prim.+# ww3 1#) of r#1 { DEFAULT ->
                                    GHC.Types.:
                                      @ GHC.Types.Char
                                      (GHC.Types.C#
                                         (GHC.Prim.chr#
                                            (GHC.Prim.+#
                                               9216#
                                               (GHC.Prim.+#
                                                  (GHC.Prim.uncheckedIShiftL#
                                                     (GHC.Prim.-# (GHC.Prim.word2Int# r#) 55296#)
                                                     10#)
                                                  (GHC.Prim.word2Int# r#1)))))
                                      ($wunfold (GHC.Prim.+# ww3 2#)) } } } }
                       1# -> GHC.Types.[] @ GHC.Types.Char }
                 } in
                 GHC.Base.++ @ GHC.Types.Char ($wunfold ww1) w) -}
930615a1db42e709ea090f0da2d2e3e3
  $w$cshowsPrec4 ::
    GHC.Prim.Int#
    -> Data.Text.Internal.Text -> [Language.ModInfo] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,U(U,U,U)><L,U>, Inline: [2] -}
adc8def6a4b7257bb12aef607cf99238
  $w$cshowsPrec5 :: GHC.Prim.Int# -> Language.Index -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: Language.Index) ->
                 case w of wild {
                   Language.IndexOne b1
                   -> let {
                        f :: GHC.Prim.Addr# = "IndexOne "#
                      } in
                      let {
                        f1 :: [GHC.Types.Char] = GHC.CString.unpackCString# f
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             f1
                             (GHC.Base.++ @ GHC.Types.Char (Language.$fShowBlock_$cshow b1) x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                f1
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   (Language.$fShowBlock_$cshow b1)
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }
                   Language.IndexTwo b1 b2
                   -> let {
                        f :: GHC.Prim.Addr# = "IndexTwo "#
                      } in
                      let {
                        f1 :: [GHC.Types.Char] = GHC.CString.unpackCString# f
                      } in
                      let {
                        f2 :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.$fShowMaybe_$cshowsPrec
                            @ Language.Expression
                            Language.$fShowExpression
                            (GHC.Types.I# 11#)
                            b1
                      } in
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.$fShowMaybe_$cshowsPrec
                            @ Language.Expression
                            Language.$fShowExpression
                            (GHC.Types.I# 11#)
                            b2
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             f1
                             (f2 (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                f1
                                (f2
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (g (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.$fShow(,)2
                                            x))))) } }) -}
a5ecd529fe2b52118416127e8ed16401
  $w$cshowsPrec6 ::
    GHC.Prim.Int# -> Language.MethodName -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><L,U(U,U,U)>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: Language.MethodName) ->
                 let {
                   f :: GHC.Prim.Addr# = "MethodName {"#
                 } in
                 let {
                   f1 :: [GHC.Types.Char] = GHC.CString.unpackCString# f
                 } in
                 let {
                   f2 :: GHC.Prim.Addr# = "unwrapMethodName = "#
                 } in
                 let {
                   f3 :: [GHC.Types.Char] = GHC.CString.unpackCString# f2
                 } in
                 let {
                   g :: GHC.Prim.Addr# = "}"#
                 } in
                 let {
                   g1 :: [GHC.Types.Char] = GHC.CString.unpackCString# g
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       f1
                       (GHC.Base.++
                          @ GHC.Types.Char
                          f3
                          (case Data.Text.Show.$w$cshowsPrec
                                  w `cast` (Language.N:MethodName[0])
                                  (GHC.Base.++ @ GHC.Types.Char g1 x) of ww1 { (#,#) ww2 ww3 ->
                           GHC.Types.: @ GHC.Types.Char ww2 ww3 }))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
d7f124fd1704f8a7309c0e06610b0f29
  $w$cshowsPrec7 ::
    GHC.Prim.Int# -> Language.ModInfo -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [2] -}
0338a472fba7af613024bb95d508584a
  $w$cshowsPrec8 ::
    GHC.Prim.Int# -> Language.OptimizedExpression -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Language.OptimizedExpression) ->
                 case w of wild {
                   Language.LenThresholdDiscard b1 b2 b3
                   -> let {
                        f :: GHC.Prim.Addr# = "LenThresholdDiscard "#
                      } in
                      let {
                        f1 :: [GHC.Types.Char] = GHC.CString.unpackCString# f
                      } in
                      let {
                        f2 :: GHC.Base.String -> GHC.Base.String
                        = Language.$w$cshowsPrec2 11# b1
                      } in
                      let {
                        f3 :: GHC.Base.String -> GHC.Base.String
                        = Language.$w$cshowsPrec b2
                      } in
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Base.String) ->
                          f2
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (f3
                                  (GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.showSpace1
                                     (case b3 of ww2 { GHC.Types.I# ww3 ->
                                      case GHC.Show.$wshowSignedInt
                                             11#
                                             ww3
                                             x of ww4 { (#,#) ww5 ww6 ->
                                      GHC.Types.: @ GHC.Types.Char ww5 ww6 } }))))
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char f1 (g x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                f1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }
                   Language.SubstrimReassign b1 b2
                   -> let {
                        f :: GHC.Prim.Addr# = "SubstrimReassign "#
                      } in
                      let {
                        f1 :: [GHC.Types.Char] = GHC.CString.unpackCString# f
                      } in
                      let {
                        f2 :: GHC.Base.String -> GHC.Base.String
                        = Language.$w$cshowsPrec2 11# b1
                      } in
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Base.String) ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            f1
                            (f2
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (case b2 of ww2 { GHC.Types.I# ww3 ->
                                   case GHC.Show.$wshowSignedInt 11# ww3 x of ww4 { (#,#) ww5 ww6 ->
                                   GHC.Types.: @ GHC.Types.Char ww5 ww6 } })))
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT -> p
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) } }) -}
594ae2f98c3405bc1513729f0c4f7b0f
  $w$cshowsPrec9 ::
    GHC.Prim.Int#
    -> GHC.Maybe.Maybe Language.Header
    -> [(GHC.Types.Int, Language.Expression)]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [2] -}
fd5b2837d2e7a35acd2a28b833d913f7
  $w$srecursiveAnalyse ::
    (Language.Expression
     -> Control.Monad.Trans.Writer.Lazy.WriterT
          [Language.Variable] Data.Functor.Identity.Identity ())
    -> Language.Expression -> (# (), [Language.Variable] #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U(A,1*U))><L,U>,
     Inline: [2] -}
519605a64a04d7223f08826c96ed8e2a
  $wrecursiveAnalyse ::
    GHC.Base.Applicative m =>
    (forall a b. m a -> m b -> m b)
    -> (forall a. a -> m a)
    -> (Language.Expression -> m ())
    -> Language.Expression
    -> m ()
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(A,C(U),A,A,A,A)><C(C(S)),C(C1(U))><L,C(U)><L,C(U)><L,U>,
     Inline: [2] -}
1f6c8b03dbcbe88dec79e96fce02a581
  $wrecursiveTransform ::
    GHC.Base.Applicative m =>
    (forall a b. m a -> (a -> m b) -> m b)
    -> (forall a. a -> m a)
    -> (Language.Expression -> m Language.Expression)
    -> Language.Expression
    -> m Language.Expression
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(U),C(C1(U)),C(C1(C1(U))),A,A)><C(C(S)),C(C1(U))><L,C(U)><L,U><L,1*U>,
     Inline: [2] -}
082be4a718fd86899f5b7f01bed2cf9a
  data BOp
    = BOpAdd
    | BOpMul
    | BOpGT
    | BOpGTE
    | BOpLT
    | BOpLTE
    | BOpEQ
    | BOpNEQ
    | BOpPathAppend
adc8def6a4b7257bb12aef607cf99238
  data Block
    = Block {blockVariable :: [Language.Variable],
             blockBody :: Language.Expression}
adc8def6a4b7257bb12aef607cf99238
  data Expression
    = Lookup (GHC.Maybe.Maybe Language.NGLType) Language.Variable
    | ConstStr Data.Text.Internal.Text
    | ConstInt GHC.Integer.Type.Integer
    | ConstDouble GHC.Types.Double
    | ConstBool GHC.Types.Bool
    | ConstSymbol Data.Text.Internal.Text
    | BuiltinConstant Language.Variable
    | ListExpression [Language.Expression]
    | Continue
    | Discard
    | UnaryOp Language.UOp Language.Expression
    | BinaryOp Language.BOp Language.Expression Language.Expression
    | Condition Language.Expression
                Language.Expression
                Language.Expression
    | IndexExpression Language.Expression Language.Index
    | Assignment Language.Variable Language.Expression
    | FunctionCall Language.FuncName
                   Language.Expression
                   [(Language.Variable, Language.Expression)]
                   (GHC.Maybe.Maybe Language.Block)
    | MethodCall Language.MethodName
                 Language.Expression
                 (GHC.Maybe.Maybe Language.Expression)
                 [(Language.Variable, Language.Expression)]
    | Sequence [Language.Expression]
    | Optimized Language.OptimizedExpression
441672d7eb62c1c87f9948f9c78adad7
  newtype FuncName
    = FuncName {unwrapFuncName :: Data.Text.Internal.Text}
74bc5fb9a818f3ea1f170e1e0af29d3b
  data Header
    = Header {nglVersion :: Data.Text.Internal.Text,
              nglModules :: [Language.ModInfo]}
adc8def6a4b7257bb12aef607cf99238
  data Index
    = IndexOne Language.Expression
    | IndexTwo (GHC.Maybe.Maybe Language.Expression)
               (GHC.Maybe.Maybe Language.Expression)
a5ecd529fe2b52118416127e8ed16401
  newtype MethodName
    = MethodName {unwrapMethodName :: Data.Text.Internal.Text}
d7f124fd1704f8a7309c0e06610b0f29
  data ModInfo
    = ModInfo {modName :: !Data.Text.Internal.Text,
               modVersion :: !Data.Text.Internal.Text}
    | LocalModInfo {modName :: !Data.Text.Internal.Text,
                    modVersion :: !Data.Text.Internal.Text}
d78124de7a35dac4710fa19fa17820a5
  data NGLType
    = NGLString
    | NGLInteger
    | NGLDouble
    | NGLBool
    | NGLSymbol
    | NGLFilename
    | NGLRead
    | NGLReadSet
    | NGLMappedRead
    | NGLMappedReadSet
    | NGLSequenceSet
    | NGLCounts
    | NGLVoid
    | NGLAny
    | NGList !Language.NGLType
ea18243860934472078c5e2ccd0edf40
  data NGLessObject
    = NGOString !Data.Text.Internal.Text
    | NGOBool !GHC.Types.Bool
    | NGOInteger !GHC.Integer.Type.Integer
    | NGODouble {-# UNPACK #-}GHC.Types.Double
    | NGOSymbol !Data.Text.Internal.Text
    | NGOFilename !GHC.IO.FilePath
    | NGOShortRead !Data.FastQ.ShortRead
    | NGOReadSet Data.Text.Internal.Text Data.FastQ.ReadSet
    | NGOSequenceSet FileOrStream.FileOrStream
    | NGOMappedReadSet {nglgroupName :: Data.Text.Internal.Text,
                        nglSamFile :: FileOrStream.FileOrStream,
                        nglReference :: GHC.Maybe.Maybe Data.Text.Internal.Text}
    | NGOMappedRead [Data.Sam.SamLine]
    | NGOCounts FileOrStream.FileOrStream
    | NGOVoid
    | NGOList [Language.NGLessObject]
    | NGOExpression Language.Expression
0338a472fba7af613024bb95d508584a
  data OptimizedExpression
    = LenThresholdDiscard Language.Variable Language.BOp GHC.Types.Int
    | SubstrimReassign Language.Variable GHC.Types.Int
76fe0974e0c66dd0b2f466e0c453166d
  data Script
    = Script {nglHeader :: GHC.Maybe.Maybe Language.Header,
              nglBody :: [(GHC.Types.Int, Language.Expression)]}
72ea05232a2f0c6e38ace4b9bd98df0d
  data UOp = UOpLen | UOpMinus | UOpNot
6ea856e2345fb0911676ec309bc5b12f
  newtype Variable = Variable Data.Text.Internal.Text
adc8def6a4b7257bb12aef607cf99238
  blockBody :: Language.Block -> Language.Expression
  RecSel Left Language.Block
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.Block) ->
                 case ds of wild { Language.Block ds1 ds2 -> ds2 }) -}
adc8def6a4b7257bb12aef607cf99238
  blockVariable :: Language.Block -> [Language.Variable]
  RecSel Left Language.Block
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.Block) ->
                 case ds of wild { Language.Block ds1 ds2 -> ds1 }) -}
d7f124fd1704f8a7309c0e06610b0f29
  modName :: Language.ModInfo -> Data.Text.Internal.Text
  RecSel Left Language.ModInfo
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.ModInfo) ->
                 case ds of wild {
                   Language.ModInfo ds1 ds2 -> ds1
                   Language.LocalModInfo ds1 ds2 -> ds1 }) -}
d7f124fd1704f8a7309c0e06610b0f29
  modVersion :: Language.ModInfo -> Data.Text.Internal.Text
  RecSel Left Language.ModInfo
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.ModInfo) ->
                 case ds of wild {
                   Language.ModInfo ds1 ds2 -> ds2
                   Language.LocalModInfo ds1 ds2 -> ds2 }) -}
76fe0974e0c66dd0b2f466e0c453166d
  nglBody ::
    Language.Script -> [(GHC.Types.Int, Language.Expression)]
  RecSel Left Language.Script
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.Script) ->
                 case ds of wild { Language.Script ds1 ds2 -> ds2 }) -}
76fe0974e0c66dd0b2f466e0c453166d
  nglHeader :: Language.Script -> GHC.Maybe.Maybe Language.Header
  RecSel Left Language.Script
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.Script) ->
                 case ds of wild { Language.Script ds1 ds2 -> ds1 }) -}
74bc5fb9a818f3ea1f170e1e0af29d3b
  nglModules :: Language.Header -> [Language.ModInfo]
  RecSel Left Language.Header
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.Header) ->
                 case ds of wild { Language.Header ds1 ds2 -> ds2 }) -}
ea18243860934472078c5e2ccd0edf40
  nglReference ::
    Language.NGLessObject -> GHC.Maybe.Maybe Data.Text.Internal.Text
  RecSel Left Language.NGLessObject
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.NGLessObject) ->
                 case ds of wild {
                   DEFAULT
                   -> Control.Exception.Base.recSelError
                        @ 'GHC.Types.LiftedRep
                        @ (GHC.Maybe.Maybe Data.Text.Internal.Text)
                        "nglReference"#
                   Language.NGOMappedReadSet ds1 ds2 ds3 -> ds3 }) -}
ea18243860934472078c5e2ccd0edf40
  nglSamFile :: Language.NGLessObject -> FileOrStream.FileOrStream
  RecSel Left Language.NGLessObject
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.NGLessObject) ->
                 case ds of wild {
                   DEFAULT
                   -> Control.Exception.Base.recSelError
                        @ 'GHC.Types.LiftedRep
                        @ FileOrStream.FileOrStream
                        "nglSamFile"#
                   Language.NGOMappedReadSet ds1 ds2 ds3 -> ds2 }) -}
74bc5fb9a818f3ea1f170e1e0af29d3b
  nglVersion :: Language.Header -> Data.Text.Internal.Text
  RecSel Left Language.Header
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.Header) ->
                 case ds of wild { Language.Header ds1 ds2 -> ds1 }) -}
ea18243860934472078c5e2ccd0edf40
  nglgroupName :: Language.NGLessObject -> Data.Text.Internal.Text
  RecSel Left Language.NGLessObject
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.NGLessObject) ->
                 case ds of wild {
                   DEFAULT
                   -> Control.Exception.Base.recSelError
                        @ 'GHC.Types.LiftedRep
                        @ Data.Text.Internal.Text
                        "nglgroupName"#
                   Language.NGOMappedReadSet ds1 ds2 ds3 -> ds1 }) -}
3f8f09a6c366f341f144c8eb21071fbc
  recursiveAnalyse ::
    GHC.Base.Monad m =>
    (Language.Expression -> m ()) -> Language.Expression -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLC(C(S))LL),1*U(U(A,C(U),A,A,A,A),A,C(C1(U)),C(U),A)><L,C(U)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   (w :: GHC.Base.Monad m)
                   (w1 :: Language.Expression -> m ())
                   (w2 :: Language.Expression) ->
                 case w of ww { GHC.Base.C:Monad ww1 ww2 ww3 ww4 ww5 ->
                 Language.$wrecursiveAnalyse @ m ww1 ww3 ww4 w1 w2 }) -}
109ac597482d4ed93187c0ab8fe3ed37
  recursiveTransform ::
    GHC.Base.Monad m =>
    (Language.Expression -> m Language.Expression)
    -> Language.Expression -> m Language.Expression
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(C(S))LLL),1*U(U(U(C(C1(U)),A),C(U),C(C1(U)),C(C1(C1(U))),A,A),C(C1(U)),A,C(U),A)><L,U><L,1*U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   (w :: GHC.Base.Monad m)
                   (w1 :: Language.Expression -> m Language.Expression)
                   (w2 :: Language.Expression) ->
                 case w of ww { GHC.Base.C:Monad ww1 ww2 ww3 ww4 ww5 ->
                 Language.$wrecursiveTransform @ m ww1 ww2 ww4 w1 w2 }) -}
70a7102b10e8fbd212a25012e4a26904
  staticValue ::
    Language.Expression -> GHC.Maybe.Maybe Language.NGLessObject
  {- Arity: 1, Strictness: <S,1*U> -}
441672d7eb62c1c87f9948f9c78adad7
  unwrapFuncName :: Language.FuncName -> Data.Text.Internal.Text
  RecSel Left Language.FuncName
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Language.unwrapFuncName1
                  `cast`
                (<Language.FuncName>_R ->_R Language.N:FuncName[0]) -}
441672d7eb62c1c87f9948f9c78adad7
  unwrapFuncName1 :: Language.FuncName -> Language.FuncName
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Language.FuncName) -> ds) -}
a5ecd529fe2b52118416127e8ed16401
  unwrapMethodName :: Language.MethodName -> Data.Text.Internal.Text
  RecSel Left Language.MethodName
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Language.unwrapMethodName1
                  `cast`
                (<Language.MethodName>_R ->_R Language.N:MethodName[0]) -}
a5ecd529fe2b52118416127e8ed16401
  unwrapMethodName1 :: Language.MethodName -> Language.MethodName
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Language.MethodName) -> ds) -}
81557d76bcaecc0d43010b933784d263
  usedVariables :: Language.Expression -> [Language.Variable]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: (\ (expr :: Language.Expression) ->
                 case Language.$w$srecursiveAnalyse
                        (\ (ds :: Language.Expression) ->
                         case ds of wild {
                           DEFAULT
                           -> (GHC.Tuple.(), GHC.Types.[] @ Language.Variable)
                                `cast`
                              (Sym (Data.Functor.Identity.N:Identity[0]
                                        <((),
                                          [Language.Variable])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                                              <[Language.Variable]>_N
                                                                              <Data.Functor.Identity.Identity>_R
                                                                              <()>_N))
                           Language.Lookup ds1 v
                           -> (GHC.Tuple.(),
                               GHC.Types.:
                                 @ Language.Variable
                                 v
                                 (GHC.Types.[] @ Language.Variable))
                                `cast`
                              (Sym (Data.Functor.Identity.N:Identity[0]
                                        <((),
                                          [Language.Variable])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                                              <[Language.Variable]>_N
                                                                              <Data.Functor.Identity.Identity>_R
                                                                              <()>_N)) })
                        expr of ww { (#,#) ww1 ww2 ->
                 ww2 }) -}
instance GHC.Classes.Eq [Language.BOp] = Language.$fEqBOp
instance GHC.Classes.Eq [Language.Block] = Language.$fEqBlock
instance GHC.Classes.Eq [Language.Expression]
  = Language.$fEqExpression
instance GHC.Classes.Eq [Language.FuncName] = Language.$fEqFuncName
instance GHC.Classes.Eq [Language.Header] = Language.$fEqHeader
instance GHC.Classes.Eq [Language.Index] = Language.$fEqIndex
instance GHC.Classes.Eq [Language.MethodName]
  = Language.$fEqMethodName
instance GHC.Classes.Eq [Language.ModInfo] = Language.$fEqModInfo
instance GHC.Classes.Eq [Language.NGLType] = Language.$fEqNGLType
instance GHC.Classes.Eq [Language.NGLessObject]
  = Language.$fEqNGLessObject
instance GHC.Classes.Eq [Language.OptimizedExpression]
  = Language.$fEqOptimizedExpression
instance GHC.Classes.Eq [Language.Script] = Language.$fEqScript
instance GHC.Classes.Eq [Language.UOp] = Language.$fEqUOp
instance GHC.Classes.Eq [Language.Variable] = Language.$fEqVariable
instance GHC.Classes.Ord [Language.BOp] = Language.$fOrdBOp
instance GHC.Classes.Ord [Language.Block] = Language.$fOrdBlock
instance GHC.Classes.Ord [Language.Expression]
  = Language.$fOrdExpression
instance GHC.Classes.Ord [Language.FuncName]
  = Language.$fOrdFuncName
instance GHC.Classes.Ord [Language.Index] = Language.$fOrdIndex
instance GHC.Classes.Ord [Language.MethodName]
  = Language.$fOrdMethodName
instance GHC.Classes.Ord [Language.NGLType] = Language.$fOrdNGLType
instance GHC.Classes.Ord [Language.OptimizedExpression]
  = Language.$fOrdOptimizedExpression
instance GHC.Classes.Ord [Language.UOp] = Language.$fOrdUOp
instance GHC.Classes.Ord [Language.Variable]
  = Language.$fOrdVariable
instance GHC.Show.Show [Language.BOp] = Language.$fShowBOp
instance GHC.Show.Show [Language.Block] = Language.$fShowBlock
instance GHC.Show.Show [Language.Expression]
  = Language.$fShowExpression
instance GHC.Show.Show [Language.FuncName]
  = Language.$fShowFuncName
instance GHC.Show.Show [Language.Header] = Language.$fShowHeader
instance GHC.Show.Show [Language.Index] = Language.$fShowIndex
instance GHC.Show.Show [Language.MethodName]
  = Language.$fShowMethodName
instance GHC.Show.Show [Language.ModInfo] = Language.$fShowModInfo
instance GHC.Show.Show [Language.NGLType] = Language.$fShowNGLType
instance GHC.Show.Show [Language.NGLessObject]
  = Language.$fShowNGLessObject
instance GHC.Show.Show [Language.OptimizedExpression]
  = Language.$fShowOptimizedExpression
instance GHC.Show.Show [Language.Script] = Language.$fShowScript
instance GHC.Show.Show [Language.UOp] = Language.$fShowUOp
instance GHC.Show.Show [Language.Variable]
  = Language.$fShowVariable
"SC:$cshowsPrec0" forall (sc :: Language.NGLType)
                         (sc1 :: GHC.Prim.Int#)
  Language.$fShowNGLType_$cshowsPrec (GHC.Types.I# sc1) sc
  = Language.$fShowNGLType_$s$cshowsPrec sc sc1
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

