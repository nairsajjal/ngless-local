
==================== FINAL INTERFACE ====================
2020-02-24 04:16:04.918592504 UTC

interface NGLess-1.1.0-965Np14lOUvJ2rS9XGhph5:Data.FastQ.Utils 8065
  interface hash: f5a0f0e2f62b16a87b46a57f2dafd60e
  ABI hash: 63f39d8dc4fe311da3cc20007c934d34
  export-list hash: 10e46d0db7c008c6afb5e20c04eb49db
  orphan hash: 4bee57d9ea433e2bd93468376da1fc3c
  flag hash: 110a277aeb3a2cd5308e235d3dc6dc94
  opt_hash: 9851e58a0ec35d0fd39c07cdbeb6257b
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Data.FastQ.Utils.concatenateFQs
module dependencies: CmdArgs Configuration Data.FastQ
                     Dependencies.Embedded FileManagement NGLess.NGError
                     NGLess.NGLEnvironment Output Paths_NGLess Utils.Conduit
                     Utils.LockFile Utils.Utils Utils.Vector Version
package dependencies: JuicyPixels-3.3.4 MissingH-1.4.1.0
                      StateVar-1.2 active-0.2.0.14 adjunctions-4.4 aeson-1.4.6.0
                      ansi-terminal-0.9.1 ansi-wl-pprint-0.6.9 array-0.5.3.0 async-2.2.2
                      attoparsec-0.13.2.3 base-4.12.0.0 base-compat-0.10.5
                      base-orphans-0.8.1 base64-bytestring-1.0.0.2 bifunctors-5.5.6
                      binary-0.8.6.0 blaze-builder-0.4.1.0 bytes-0.15.5
                      bytestring-0.10.8.2 bzlib-conduit-0.3.0.2 call-stack-0.1.0
                      cereal-0.5.8.1 cereal-conduit-0.8.0 charset-0.3.7.1 colour-2.3.5
                      comonad-5.0.6 conduit-1.3.1.2 conduit-algorithms-0.0.11.0
                      conduit-extra-1.3.4 conduit-zstd-0.0.1.1 configurator-0.3.0.0
                      containers-0.6.0.1 contravariant-1.5.2 convertible-1.1.1.0
                      data-default-class-0.1.2.0 deepseq-1.4.4.0 diagrams-core-1.4.2
                      diagrams-lib-1.4.3 diagrams-solve-0.1.1 diagrams-svg-1.4.3
                      directory-1.3.3.0 distributive-0.6.1 dlist-0.8.0.7
                      dual-tree-0.2.2.1 exceptions-0.10.4 extra-1.6.18
                      file-embed-0.0.11.1 filepath-1.4.2.1 fingertree-0.1.4.2 free-5.1.3
                      ghc-boot-th-8.6.5 ghc-prim-0.5.3 gitrev-1.3.1 hashable-1.2.7.0
                      hostname-1.0 inline-c-0.7.0.1 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.3 intervals-0.8.1 kan-extensions-5.2
                      lens-4.17.1 linear-1.20.9 lzma-0.0.0.3 lzma-conduit-1.2.1
                      monad-loops-0.4.3 mono-traversable-1.0.15.1 monoid-extras-0.5.1
                      mtl-2.2.2 newtype-generics-0.5.4 old-locale-1.0.0.7
                      old-time-1.1.0.3 optparse-applicative-0.14.3.0 parsec-3.1.14.0
                      parsers-0.12.10 pretty-1.1.3.6 primitive-0.6.4.0 process-1.6.5.0
                      profunctors-5.3 random-1.1 reflection-2.1.5 regex-1.0.2.0
                      regex-base-0.93.2 regex-compat-0.95.1
                      regex-pcre-builtin-0.94.5.8.8.35 regex-posix-0.95.2
                      regex-tdfa-1.2.3.2 regex-tdfa-text-1.0.0.3 resourcet-1.2.2
                      safeio-0.0.5.0 scientific-0.3.6.2 semigroupoids-5.3.4 split-0.2.3.3
                      stm-2.5.0.0 stm-chans-3.0.0.4 stm-conduit-4.0.1
                      streaming-commons-0.2.1.1 svg-builder-0.1.1 tagged-0.8.6
                      tar-0.5.1.1 template-haskell-2.14.0.0 text-1.2.3.1
                      th-abstraction-0.3.1.0 time-1.8.0.2 time-compat-1.9.2.2
                      time-locale-compat-0.1.1.5 transformers-0.5.6.2
                      transformers-base-0.4.5.2 transformers-compat-0.6.5 unix-2.7.2.2
                      unix-compat-0.5.2 unliftio-0.2.12 unliftio-core-0.1.2.0
                      unordered-containers-0.2.10.0 utf8-string-1.0.1.1 uuid-types-1.0.3
                      vector-0.12.0.3 vector-algorithms-0.8.0.3 zlib-0.6.2.1 zstd-0.1.1.2
orphans: regex-1.0.2.0:Text.RE.TDFA.String
         regex-tdfa-text-1.0.0.3:Text.Regex.TDFA.Text
         regex-tdfa-text-1.0.0.3:Text.Regex.TDFA.Text.Lazy
         regex-pcre-builtin-0.94.5.8.8.35:Text.Regex.PCRE.String
         regex-pcre-builtin-0.94.5.8.8.35:Text.Regex.PCRE.Sequence
         regex-pcre-builtin-0.94.5.8.8.35:Text.Regex.PCRE.ByteString.Lazy
         regex-pcre-builtin-0.94.5.8.8.35:Text.Regex.PCRE.ByteString
         regex-tdfa-1.2.3.2:Text.Regex.TDFA.ByteString
         regex-tdfa-1.2.3.2:Text.Regex.TDFA.ByteString.Lazy
         regex-tdfa-1.2.3.2:Text.Regex.TDFA.Sequence
         regex-tdfa-1.2.3.2:Text.Regex.TDFA.String
         regex-posix-0.95.2:Text.Regex.Posix.String
         regex-posix-0.95.2:Text.Regex.Posix.Sequence
         regex-posix-0.95.2:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2:Text.Regex.Posix.ByteString
         regex-base-0.93.2:Text.Regex.Base.Context
         convertible-1.1.1.0:Data.Convertible.Instances.C
         convertible-1.1.1.0:Data.Convertible.Instances.Map
         convertible-1.1.1.0:Data.Convertible.Instances.Text
         convertible-1.1.1.0:Data.Convertible.Instances.Time
         convertible-1.1.1.0:Data.Convertible.Instances.Num
         attoparsec-0.13.2.3:Data.Attoparsec.ByteString.Char8
         diagrams-lib-1.4.3:Diagrams.Animation.Active
         diagrams-lib-1.4.3:Diagrams.TwoD.Path
         diagrams-lib-1.4.3:Diagrams.TwoD.Segment
         diagrams-lib-1.4.3:Diagrams.Trail
         diagrams-lib-1.4.3:Diagrams.ThreeD.Types
         diagrams-lib-1.4.3:Diagrams.TwoD.Types
         diagrams-core-1.4.2:Diagrams.Core.Types
         monoid-extras-0.5.1:Data.Monoid.MList
         diagrams-core-1.4.2:Diagrams.Core.Points
         time-1.8.0.2:Data.Time.Clock.TAI reflection-2.1.5:Data.Reflection
         linear-1.20.9:Linear.Instances
         configurator-0.3.0.0:Data.Configurator.Instances
         attoparsec-0.13.2.3:Data.Attoparsec.Text.Internal
         colour-2.3.5:Data.Colour vector-0.12.0.3:Data.Vector.Unboxed
         vector-0.12.0.3:Data.Vector.Fusion.Bundle
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         stm-2.5.0.0:Control.Monad.STM
         transformers-0.5.6.2:Control.Monad.Trans.Error
         base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: JuicyPixels-3.3.4:Codec.Picture.Tga
                         JuicyPixels-3.3.4:Codec.Picture.Tiff
                         JuicyPixels-3.3.4:Codec.Picture.Types
                         NGLess-1.1.0-965Np14lOUvJ2rS9XGhph5:NGLess.NGError
                         active-0.2.0.14:Data.Active adjunctions-4.4:Data.Functor.Rep
                         aeson-1.4.6.0:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.3:Data.Attoparsec.Internal.Types
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         bifunctors-5.5.6:Data.Bifunctor.Biff
                         bifunctors-5.5.6:Data.Bifunctor.Clown
                         bifunctors-5.5.6:Data.Bifunctor.Fix
                         bifunctors-5.5.6:Data.Bifunctor.Flip
                         bifunctors-5.5.6:Data.Bifunctor.Join
                         bifunctors-5.5.6:Data.Bifunctor.Joker
                         bifunctors-5.5.6:Data.Bifunctor.Product
                         bifunctors-5.5.6:Data.Bifunctor.Sum
                         bifunctors-5.5.6:Data.Bifunctor.Tannen
                         bifunctors-5.5.6:Data.Bifunctor.Wrapped bytes-0.15.5:Data.Bytes.Get
                         bytes-0.15.5:Data.Bytes.Signed bytes-0.15.5:Data.Bytes.VarInt
                         conduit-1.3.1.2:Data.Conduit.Internal.Conduit
                         conduit-1.3.1.2:Data.Conduit.Internal.Pipe
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         diagrams-core-1.4.2:Diagrams.Core.Envelope
                         diagrams-core-1.4.2:Diagrams.Core.Measure
                         diagrams-core-1.4.2:Diagrams.Core.Names
                         diagrams-core-1.4.2:Diagrams.Core.Points
                         diagrams-core-1.4.2:Diagrams.Core.Query
                         diagrams-core-1.4.2:Diagrams.Core.Style
                         diagrams-core-1.4.2:Diagrams.Core.Trace
                         diagrams-core-1.4.2:Diagrams.Core.Transform
                         diagrams-core-1.4.2:Diagrams.Core.Types
                         diagrams-core-1.4.2:Diagrams.Core.V
                         diagrams-lib-1.4.3:Diagrams.Angle
                         diagrams-lib-1.4.3:Diagrams.Animation.Active
                         diagrams-lib-1.4.3:Diagrams.BoundingBox
                         diagrams-lib-1.4.3:Diagrams.Coordinates
                         diagrams-lib-1.4.3:Diagrams.Direction
                         diagrams-lib-1.4.3:Diagrams.Located
                         diagrams-lib-1.4.3:Diagrams.Path
                         diagrams-lib-1.4.3:Diagrams.Segment
                         diagrams-lib-1.4.3:Diagrams.Size
                         diagrams-lib-1.4.3:Diagrams.Tangent
                         diagrams-lib-1.4.3:Diagrams.ThreeD.Camera
                         diagrams-lib-1.4.3:Diagrams.ThreeD.Light
                         diagrams-lib-1.4.3:Diagrams.ThreeD.Shapes
                         diagrams-lib-1.4.3:Diagrams.ThreeD.Types
                         diagrams-lib-1.4.3:Diagrams.Trail
                         diagrams-lib-1.4.3:Diagrams.TwoD.Attributes
                         diagrams-lib-1.4.3:Diagrams.TwoD.Image
                         diagrams-lib-1.4.3:Diagrams.TwoD.Path
                         diagrams-lib-1.4.3:Diagrams.TwoD.Segment.Bernstein
                         diagrams-lib-1.4.3:Diagrams.TwoD.Text
                         diagrams-lib-1.4.3:Diagrams.TwoD.Types
                         diagrams-svg-1.4.3:Diagrams.Backend.SVG dlist-0.8.0.7:Data.DList
                         dual-tree-0.2.2.1:Data.Tree.DUAL.Internal
                         fingertree-0.1.4.2:Data.FingerTree
                         free-5.1.3:Control.Comonad.Cofree
                         free-5.1.3:Control.Comonad.Trans.Cofree
                         free-5.1.3:Control.Monad.Free free-5.1.3:Control.Monad.Trans.Free
                         ghc-boot-th-8.6.5:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.5:GHC.LanguageExtensions.Type
                         inline-c-0.7.0.1:Language.C.Inline
                         inline-c-0.7.0.1:Language.C.Inline.Context
                         intervals-0.8.1:Numeric.Interval.Kaucher
                         kan-extensions-5.2:Data.Functor.Day
                         kan-extensions-5.2:Data.Functor.Yoneda lens-4.17.1:Control.Lens.At
                         lens-4.17.1:Control.Lens.Internal.Indexed
                         lens-4.17.1:Control.Lens.Reified lens-4.17.1:Control.Lens.Tuple
                         lens-4.17.1:Control.Lens.Wrapped lens-4.17.1:Control.Lens.Zoom
                         linear-1.20.9:Linear.Affine linear-1.20.9:Linear.Plucker
                         linear-1.20.9:Linear.Quaternion linear-1.20.9:Linear.V
                         linear-1.20.9:Linear.V0 linear-1.20.9:Linear.V1
                         linear-1.20.9:Linear.V2 linear-1.20.9:Linear.V3
                         linear-1.20.9:Linear.V4
                         mono-traversable-1.0.15.1:Data.MonoTraversable
                         mono-traversable-1.0.15.1:Data.NonNull
                         mono-traversable-1.0.15.1:Data.Sequences
                         newtype-generics-0.5.4:Control.Newtype.Generics
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         profunctors-5.3:Data.Profunctor.Composition
                         profunctors-5.3:Data.Profunctor.Rep
                         regex-1.0.2.0:Text.RE.ZeInternals.NamedCaptures
                         resourcet-1.2.2:Control.Monad.Trans.Resource.Internal
                         stm-conduit-4.0.1:Data.Conduit.Async.Composition
                         tagged-0.8.6:Data.Tagged
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         th-abstraction-0.3.1.0:Language.Haskell.TH.Datatype
                         unliftio-0.2.12:UnliftIO.Internals.Async
                         unordered-containers-0.2.10.0:Data.HashMap.Base
                         unordered-containers-0.2.10.0:Data.HashSet.Base
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.3:Data.Vector vector-0.12.0.3:Data.Vector.Primitive
                         vector-0.12.0.3:Data.Vector.Storable
                         vector-0.12.0.3:Data.Vector.Unboxed
                         vector-0.12.0.3:Data.Vector.Unboxed.Base
                         zlib-0.6.2.1:Codec.Compression.Zlib.Stream
import  -/  Data.FastQ 683044f508718e436592cbb72ea87fc2
  exports: 7f3c9451f8064311c68af66858502794
  FastQFilePath 3b49cd403d588d2f95c29b96eb9e4162
  FastQFilePath fdd414d88cf948fd1c738d4e396e4d35
  fqDecodeC 136c6f67c091d54e16f11fef6b8830c5
  fqEncodeC b8fe88061f31873e88d5fb7b6844cb4d
import  -/  FileManagement fb22fc32ebd4079eedfab3004822d35c
  exports: 0035e3f895add6fcbe2da0a7224ccae1
  makeNGLTempFile f8997243f49d682cc3f193c23e0f01b5
import  -/  NGLess.NGError 9175c652eec68d1a195f3eb2d7471cb5
  exports: 500bdef9411bf7c9c4e288fc5b605d1e
  NGLessIO f1fd902a0de985a61e8d9110730dfc21
  throwShouldNotOccur 6b0f4fcf8b2bcdc53931daab853fb839
import  -/  Utils.Conduit 3529d55b10a7cbdf7250fd156212ef77
  exports: 899923d44363d2db775d0cbeb374b958
  linesC 74def1591ec8f05f38349accac761045
import  -/  base-4.12.0.0:Control.Monad 07eaec7fd256019b318d048d00f45b1c
import  -/  base-4.12.0.0:Data.Foldable efb37371da929e7bc88d896298d2d979
import  -/  base-4.12.0.0:Data.List 17d0c71c557e42abe196f130788fd997
import  -/  base-4.12.0.0:Data.OldList e931cf456dc87f11ee6e6fb153bca23e
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  conduit-1.3.1.2:Data.Conduit a386d3988254720545738ed91850d867
import  -/  conduit-1.3.1.2:Data.Conduit.Combinators 347317c879e3debf6cbfb4f316e8bcb4
import  -/  conduit-1.3.1.2:Data.Conduit.Internal.Conduit 4cfa2d636f9204a4aa47382da9b0ff36
import  -/  conduit-algorithms-0.0.11.0:Data.Conduit.Algorithms.Async c705e379633faccd5884d6a9e46c803e
import  -/  conduit-extra-1.3.4:Data.Conduit.Binary c81ebc9541e9b8e064aeb9f939263ed9
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
4f7d619a4635bdd7023faf4230036f71
  $s$fApplicativeResourceT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Resource.Internal.ResourceT
         NGLess.NGError.NGLessIO)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT
                       NGLess.NGError.NGLessIO)
                  Data.FastQ.Utils.$s$fApplicativeResourceT_$s$fFunctorResourceT
                  (\ @ a (eta :: a) ->
                   let {
                     x :: GHC.IORef.IORef
                            Control.Monad.Trans.Resource.Internal.ReleaseMap
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
                       {- Arity: 2 -}
                     = \ (eta1 :: GHC.IORef.IORef
                                    Control.Monad.Trans.Resource.Internal.ReleaseMap)
                         (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       (# eta2, eta #)
                   } in
                   (\ (ds :: GHC.IORef.IORef
                               Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                    x)
                     `cast`
                   ((<GHC.IORef.IORef
                        Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                     ->_R (<GHC.IORef.IORef
                              Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <a>_R)) ; (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                             <GHC.Types.IO>_R
                                                             <a>_N) ; Sym (NGLess.NGError.N:NGLessIO[0]) <a>_N)) ; Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                                                                                            <NGLess.NGError.NGLessIO>_R
                                                                                                                            <a>_N)))
                  (\ @ a
                     @ b
                     (ds :: Control.Monad.Trans.Resource.Internal.ResourceT
                              NGLess.NGError.NGLessIO (a -> b))
                     (ds1 :: Control.Monad.Trans.Resource.Internal.ResourceT
                               NGLess.NGError.NGLessIO a)
                     (r :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                   let {
                     ds2 :: NGLess.NGError.NGLessIO (a -> b)
                     = ds
                         `cast`
                       (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                            <NGLess.NGError.NGLessIO>_R <a -> b>_N)
                         r
                   } in
                   let {
                     ds3 :: NGLess.NGError.NGLessIO a
                     = ds1
                         `cast`
                       (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                            <NGLess.NGError.NGLessIO>_R <a>_N)
                         r
                   } in
                   (\ (r1 :: GHC.IORef.IORef
                               Control.Monad.Trans.Resource.Internal.ReleaseMap)
                      (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case (ds2
                            `cast`
                          (NGLess.NGError.N:NGLessIO[0] <a
                                                         -> b>_N ; Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                                       <GHC.Types.IO>_R <a -> b>_N)
                            r1)
                           `cast`
                         (GHC.Types.N:IO[0] <a -> b>_R)
                           s of ds4 { (#,#) ipv ipv1 ->
                    case (ds3
                            `cast`
                          (NGLess.NGError.N:NGLessIO[0] <a>_N ; Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                                    <GHC.Types.IO>_R <a>_N)
                            r1)
                           `cast`
                         (GHC.Types.N:IO[0] <a>_R)
                           ipv of ds5 { (#,#) ipv2 ipv3 ->
                    (# ipv2, ipv1 ipv3 #) } })
                     `cast`
                   ((<GHC.IORef.IORef
                        Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <b>_R)) ; (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                       <GHC.Types.IO>_R
                                                       <b>_N) ; Sym (NGLess.NGError.N:NGLessIO[0]) <b>_N)))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <Control.Monad.Trans.Resource.Internal.ResourceT
                      NGLess.NGError.NGLessIO (a -> b)>_R
                   ->_R <Control.Monad.Trans.Resource.Internal.ResourceT
                           NGLess.NGError.NGLessIO a>_R
                   ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                 <NGLess.NGError.NGLessIO>_R <b>_N))
                  (Control.Monad.Trans.Resource.Internal.$fApplicativeResourceT2
                     @ NGLess.NGError.NGLessIO
                     NGLess.NGError.$fApplicativeNGLessIO)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                   <a -> b -> c>_R
                   ->_R <Control.Monad.Trans.Resource.Internal.ResourceT
                           NGLess.NGError.NGLessIO a>_R
                   ->_R <Control.Monad.Trans.Resource.Internal.ResourceT
                           NGLess.NGError.NGLessIO b>_R
                   ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                 <NGLess.NGError.NGLessIO>_R <c>_N))
                  (Control.Monad.Trans.Resource.Internal.$fApplicativeResourceT3
                     @ NGLess.NGError.NGLessIO
                     NGLess.NGError.$fApplicativeNGLessIO)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <Control.Monad.Trans.Resource.Internal.ResourceT
                      NGLess.NGError.NGLessIO a>_R
                   ->_R <Control.Monad.Trans.Resource.Internal.ResourceT
                           NGLess.NGError.NGLessIO b>_R
                   ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                 <NGLess.NGError.NGLessIO>_R <b>_N))
                  (\ @ a @ b ->
                   Control.Monad.Trans.Resource.Internal.$fApplicativeResourceT2
                     @ NGLess.NGError.NGLessIO
                     NGLess.NGError.$fApplicativeNGLessIO
                     @ a
                     @ b
                     @ a
                     (GHC.Base.const @ a @ b))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <Control.Monad.Trans.Resource.Internal.ResourceT
                      NGLess.NGError.NGLessIO a>_R
                   ->_R <Control.Monad.Trans.Resource.Internal.ResourceT
                           NGLess.NGError.NGLessIO b>_R
                   ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                 <NGLess.NGError.NGLessIO>_R <a>_N)) -}
0473b9259f94b63372e4309ceb952430
  $s$fApplicativeResourceT_$cpure ::
    a
    -> Control.Monad.Trans.Resource.Internal.ResourceT
         NGLess.NGError.NGLessIO a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,A><L,A><S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (eta :: a) ->
                 let {
                   x :: GHC.IORef.IORef
                          Control.Monad.Trans.Resource.Internal.ReleaseMap
                        -> GHC.Prim.State# GHC.Prim.RealWorld
                        -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
                     {- Arity: 2 -}
                   = \ (eta1 :: GHC.IORef.IORef
                                  Control.Monad.Trans.Resource.Internal.ReleaseMap)
                       (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     (# eta2, eta #)
                 } in
                 (\ (ds :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                  x)
                   `cast`
                 ((<GHC.IORef.IORef
                      Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                   ->_R (<GHC.IORef.IORef
                            Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <a>_R)) ; (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                           <GHC.Types.IO>_R
                                                           <a>_N) ; Sym (NGLess.NGError.N:NGLessIO[0]) <a>_N)) ; Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                                                                                          <NGLess.NGError.NGLessIO>_R
                                                                                                                          <a>_N))) -}
fc2141284ae6e900f4ed4715420e0cce
  $s$fApplicativeResourceT_$s$fFunctorResourceT ::
    GHC.Base.Functor
      (Control.Monad.Trans.Resource.Internal.ResourceT
         NGLess.NGError.NGLessIO)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT
                       NGLess.NGError.NGLessIO)
                  (\ @ a
                     @ b
                     (f :: a -> b)
                     (ds :: Control.Monad.Trans.Resource.Internal.ResourceT
                              NGLess.NGError.NGLessIO a)
                     (r :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                   let {
                     ds1 :: NGLess.NGError.NGLessIO a
                     = ds
                         `cast`
                       (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                            <NGLess.NGError.NGLessIO>_R <a>_N)
                         r
                   } in
                   (\ (r1 :: GHC.IORef.IORef
                               Control.Monad.Trans.Resource.Internal.ReleaseMap)
                      (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case (ds1
                            `cast`
                          (NGLess.NGError.N:NGLessIO[0] <a>_N ; Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                                    <GHC.Types.IO>_R <a>_N)
                            r1)
                           `cast`
                         (GHC.Types.N:IO[0] <a>_R)
                           s of ds2 { (#,#) ipv ipv1 ->
                    (# ipv, f ipv1 #) })
                     `cast`
                   ((<GHC.IORef.IORef
                        Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <b>_R)) ; (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                       <GHC.Types.IO>_R
                                                       <b>_N) ; Sym (NGLess.NGError.N:NGLessIO[0]) <b>_N)))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a -> b>_R
                   ->_R <Control.Monad.Trans.Resource.Internal.ResourceT
                           NGLess.NGError.NGLessIO a>_R
                   ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                 <NGLess.NGError.NGLessIO>_R <b>_N))
                  (\ @ a
                     @ b
                     (x :: a)
                     (eta :: Control.Monad.Trans.Resource.Internal.ResourceT
                               NGLess.NGError.NGLessIO b)
                     (eta1 :: GHC.IORef.IORef
                                Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                   let {
                     ds :: NGLess.NGError.NGLessIO b
                     = eta
                         `cast`
                       (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                            <NGLess.NGError.NGLessIO>_R <b>_N)
                         eta1
                   } in
                   (\ (r :: GHC.IORef.IORef
                              Control.Monad.Trans.Resource.Internal.ReleaseMap)
                      (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case (ds
                            `cast`
                          (NGLess.NGError.N:NGLessIO[0] <b>_N ; Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                                    <GHC.Types.IO>_R <b>_N)
                            r)
                           `cast`
                         (GHC.Types.N:IO[0] <b>_R)
                           s of ds1 { (#,#) ipv ipv1 ->
                    (# ipv, x #) })
                     `cast`
                   ((<GHC.IORef.IORef
                        Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <a>_R)) ; (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                       <GHC.Types.IO>_R
                                                       <a>_N) ; Sym (NGLess.NGError.N:NGLessIO[0]) <a>_N)))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a>_R
                   ->_R <Control.Monad.Trans.Resource.Internal.ResourceT
                           NGLess.NGError.NGLessIO b>_R
                   ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                 <NGLess.NGError.NGLessIO>_R <a>_N)) -}
d882a02d06450d8e1f23457b78584f93
  $s$fMonadErroreResourceT ::
    Control.Monad.Error.Class.MonadError
      NGLess.NGError.NGError
      (Control.Monad.Trans.Resource.Internal.ResourceT
         NGLess.NGError.NGLessIO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ NGLess.NGError.NGError
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT
                       NGLess.NGError.NGLessIO)
                  Data.FastQ.Utils.$s$fMonadErroreResourceT_$s$fMonadResourceT
                  (\ @ a (eta :: NGLess.NGError.NGError) ->
                   let {
                     x :: GHC.IORef.IORef
                            Control.Monad.Trans.Resource.Internal.ReleaseMap
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
                       {- Arity: 2, Strictness: <L,U><L,U>x -}
                     = NGLess.NGError.$fMonadErrorNGErrorNGLessIO1 @ a eta
                   } in
                   (\ (ds :: GHC.IORef.IORef
                               Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                    x)
                     `cast`
                   ((<GHC.IORef.IORef
                        Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                     ->_R (<GHC.IORef.IORef
                              Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <a>_R)) ; (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                             <GHC.Types.IO>_R
                                                             <a>_N) ; Sym (NGLess.NGError.N:NGLessIO[0]) <a>_N)) ; Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                                                                                            <NGLess.NGError.NGLessIO>_R
                                                                                                                            <a>_N)))
                  (\ @ a
                     (r :: Control.Monad.Trans.Resource.Internal.ResourceT
                             NGLess.NGError.NGLessIO a)
                     (h :: NGLess.NGError.NGError
                           -> Control.Monad.Trans.Resource.Internal.ResourceT
                                NGLess.NGError.NGLessIO a)
                     (i :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                   case NGLess.NGError.$fMonadErrorNGErrorNGLessIO_$ccatchError
                   ret_ty (NGLess.NGError.NGLessIO a)
                   of {})
                    `cast`
                  (forall (a :: <*>_N).
                   <Control.Monad.Trans.Resource.Internal.ResourceT
                      NGLess.NGError.NGLessIO a>_R
                   ->_R <NGLess.NGError.NGError
                         -> Control.Monad.Trans.Resource.Internal.ResourceT
                              NGLess.NGError.NGLessIO a>_R
                   ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                 <NGLess.NGError.NGLessIO>_R <a>_N)) -}
6f1aadf8952e44f56312c83c9777a544
  $s$fMonadErroreResourceT1 ::
    Control.Monad.Trans.Resource.Internal.ResourceT
      NGLess.NGError.NGLessIO a
    -> (NGLess.NGError.NGError
        -> Control.Monad.Trans.Resource.Internal.ResourceT
             NGLess.NGError.NGLessIO a)
    -> GHC.IORef.IORef Control.Monad.Trans.Resource.Internal.ReleaseMap
    -> NGLess.NGError.NGLessIO a
  {- Arity: 3, Strictness: <B,A><B,A><B,A>b,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (r :: Control.Monad.Trans.Resource.Internal.ResourceT
                           NGLess.NGError.NGLessIO a)
                   (h :: NGLess.NGError.NGError
                         -> Control.Monad.Trans.Resource.Internal.ResourceT
                              NGLess.NGError.NGLessIO a)
                   (i :: GHC.IORef.IORef
                           Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                 case NGLess.NGError.$fMonadErrorNGErrorNGLessIO_$ccatchError
                 ret_ty (NGLess.NGError.NGLessIO a)
                 of {}) -}
751585afb08d396378373fcb6ed4d491
  $s$fMonadErroreResourceT_$cthrowError ::
    NGLess.NGError.NGError
    -> Control.Monad.Trans.Resource.Internal.ResourceT
         NGLess.NGError.NGLessIO a
  {- Arity: 4, Strictness: <B,U><B,A><B,A><B,U>x,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (eta :: NGLess.NGError.NGError) ->
                 let {
                   x :: GHC.IORef.IORef
                          Control.Monad.Trans.Resource.Internal.ReleaseMap
                        -> GHC.Prim.State# GHC.Prim.RealWorld
                        -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
                     {- Arity: 2, Strictness: <L,U><L,U>x -}
                   = NGLess.NGError.$fMonadErrorNGErrorNGLessIO1 @ a eta
                 } in
                 (\ (ds :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                  x)
                   `cast`
                 ((<GHC.IORef.IORef
                      Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                   ->_R (<GHC.IORef.IORef
                            Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <a>_R)) ; (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                           <GHC.Types.IO>_R
                                                           <a>_N) ; Sym (NGLess.NGError.N:NGLessIO[0]) <a>_N)) ; Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                                                                                          <NGLess.NGError.NGLessIO>_R
                                                                                                                          <a>_N))) -}
d91446d8a26ab8d14b91e54359a367a0
  $s$fMonadErroreResourceT_$s$fMonadResourceT ::
    GHC.Base.Monad
      (Control.Monad.Trans.Resource.Internal.ResourceT
         NGLess.NGError.NGLessIO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT
                       NGLess.NGError.NGLessIO)
                  Data.FastQ.Utils.$s$fApplicativeResourceT
                  (\ @ a
                     @ b
                     (ds :: Control.Monad.Trans.Resource.Internal.ResourceT
                              NGLess.NGError.NGLessIO a)
                     (f :: a
                           -> Control.Monad.Trans.Resource.Internal.ResourceT
                                NGLess.NGError.NGLessIO b)
                     (r :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                   let {
                     ds1 :: NGLess.NGError.NGLessIO a
                     = ds
                         `cast`
                       (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                            <NGLess.NGError.NGLessIO>_R <a>_N)
                         r
                   } in
                   (\ (r1 :: GHC.IORef.IORef
                               Control.Monad.Trans.Resource.Internal.ReleaseMap)
                      (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case (ds1
                            `cast`
                          (NGLess.NGError.N:NGLessIO[0] <a>_N ; Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                                    <GHC.Types.IO>_R <a>_N)
                            r1)
                           `cast`
                         (GHC.Types.N:IO[0] <a>_R)
                           s of ds2 { (#,#) ipv ipv1 ->
                    (((f ipv1)
                        `cast`
                      (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                           <NGLess.NGError.NGLessIO>_R <b>_N)
                        r)
                       `cast`
                     (NGLess.NGError.N:NGLessIO[0] <b>_N ; Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                               <GHC.Types.IO>_R <b>_N)
                       r1)
                      `cast`
                    (GHC.Types.N:IO[0] <b>_R)
                      ipv })
                     `cast`
                   ((<GHC.IORef.IORef
                        Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <b>_R)) ; (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                       <GHC.Types.IO>_R
                                                       <b>_N) ; Sym (NGLess.NGError.N:NGLessIO[0]) <b>_N)))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <Control.Monad.Trans.Resource.Internal.ResourceT
                      NGLess.NGError.NGLessIO a>_R
                   ->_R <a
                         -> Control.Monad.Trans.Resource.Internal.ResourceT
                              NGLess.NGError.NGLessIO b>_R
                   ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                 <NGLess.NGError.NGLessIO>_R <b>_N))
                  Data.FastQ.Utils.$s$fMonadErroreResourceT_$s$fMonadResourceT_$c>>
                  (\ @ a (eta :: a) ->
                   let {
                     x :: GHC.IORef.IORef
                            Control.Monad.Trans.Resource.Internal.ReleaseMap
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
                       {- Arity: 2 -}
                     = \ (eta1 :: GHC.IORef.IORef
                                    Control.Monad.Trans.Resource.Internal.ReleaseMap)
                         (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       (# eta2, eta #)
                   } in
                   (\ (ds :: GHC.IORef.IORef
                               Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                    x)
                     `cast`
                   ((<GHC.IORef.IORef
                        Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                     ->_R (<GHC.IORef.IORef
                              Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <a>_R)) ; (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                             <GHC.Types.IO>_R
                                                             <a>_N) ; Sym (NGLess.NGError.N:NGLessIO[0]) <a>_N)) ; Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                                                                                            <NGLess.NGError.NGLessIO>_R
                                                                                                                            <a>_N)))
                  (\ @ a ->
                   GHC.Err.errorWithoutStackTrace
                     @ 'GHC.Types.LiftedRep
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT
                          NGLess.NGError.NGLessIO a)) -}
aa6291c3c8c508b0ebe6e05e115e9498
  $s$fMonadErroreResourceT_$s$fMonadResourceT_$c>> ::
    Control.Monad.Trans.Resource.Internal.ResourceT
      NGLess.NGError.NGLessIO a
    -> Control.Monad.Trans.Resource.Internal.ResourceT
         NGLess.NGError.NGLessIO b
    -> Control.Monad.Trans.Resource.Internal.ResourceT
         NGLess.NGError.NGLessIO b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(C1(U(U,A))))><L,C(C1(C1(U)))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Resource.Internal.ResourceT
                            NGLess.NGError.NGLessIO a)
                   (k :: Control.Monad.Trans.Resource.Internal.ResourceT
                           NGLess.NGError.NGLessIO b)
                   (r :: GHC.IORef.IORef
                           Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                 let {
                   ds :: NGLess.NGError.NGLessIO a
                   = m1
                       `cast`
                     (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                          <NGLess.NGError.NGLessIO>_R <a>_N)
                       r
                 } in
                 (\ (r1 :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case (ds
                          `cast`
                        (NGLess.NGError.N:NGLessIO[0] <a>_N ; Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                                  <GHC.Types.IO>_R <a>_N)
                          r1)
                         `cast`
                       (GHC.Types.N:IO[0] <a>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  ((k `cast`
                    (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                         <NGLess.NGError.NGLessIO>_R <b>_N)
                      r)
                     `cast`
                   (NGLess.NGError.N:NGLessIO[0] <b>_N ; Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                             <GHC.Types.IO>_R <b>_N)
                     r1)
                    `cast`
                  (GHC.Types.N:IO[0] <b>_R)
                    ipv })
                   `cast`
                 ((<GHC.IORef.IORef
                      Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <b>_R)) ; (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                     <GHC.Types.IO>_R
                                                     <b>_N) ; Sym (NGLess.NGError.N:NGLessIO[0]) <b>_N)))
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Resource.Internal.ResourceT
                    NGLess.NGError.NGLessIO a>_R
                 ->_R <Control.Monad.Trans.Resource.Internal.ResourceT
                         NGLess.NGError.NGLessIO b>_R
                 ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                               <NGLess.NGError.NGLessIO>_R <b>_N)) -}
30d45d4651d9d1734cf362a52ed9ff7a
  $s$fMonadIOResourceT ::
    Control.Monad.IO.Class.MonadIO
      (Control.Monad.Trans.Resource.Internal.ResourceT
         NGLess.NGError.NGLessIO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT
                       NGLess.NGError.NGLessIO)
                  Data.FastQ.Utils.$s$fMonadErroreResourceT_$s$fMonadResourceT
                  (\ @ a (eta :: GHC.Types.IO a) ->
                   let {
                     x :: GHC.IORef.IORef
                            Control.Monad.Trans.Resource.Internal.ReleaseMap
                          -> GHC.Types.IO a
                       {- Arity: 1 -}
                     = \ (ds :: GHC.IORef.IORef
                                  Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                       eta
                   } in
                   (\ (ds :: GHC.IORef.IORef
                               Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                    x)
                     `cast`
                   ((<GHC.IORef.IORef
                        Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                     ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                   <GHC.Types.IO>_R
                                   <a>_N) ; Sym (NGLess.NGError.N:NGLessIO[0]) <a>_N) ; Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                                                                 <NGLess.NGError.NGLessIO>_R
                                                                                                 <a>_N))) -}
9361acb42b3cd028f7a9e7464007fc7f
  $s$fMonadResourceResourceT ::
    Control.Monad.Trans.Resource.Internal.MonadResource
      (Control.Monad.Trans.Resource.Internal.ResourceT
         NGLess.NGError.NGLessIO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT
                       NGLess.NGError.NGLessIO)
                  Data.FastQ.Utils.$s$fMonadIOResourceT
                  (\ @ a
                     (eta :: Control.Monad.Trans.Resource.Internal.ResourceT
                               GHC.Types.IO a)
                     (eta1 :: GHC.IORef.IORef
                                Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                   let {
                     eta2 :: GHC.Types.IO a
                     = eta
                         `cast`
                       (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                            <GHC.Types.IO>_R <a>_N)
                         eta1
                   } in
                   (\ (ds :: GHC.IORef.IORef
                               Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                    eta2)
                     `cast`
                   (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                             <GHC.Types.IO>_R
                             <a>_N) ; Sym (NGLess.NGError.N:NGLessIO[0]) <a>_N))
                    `cast`
                  (forall (a :: <*>_N).
                   <Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO a>_R
                   ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                 <NGLess.NGError.NGLessIO>_R <a>_N)) -}
e6f16698024fd8387ad9b42937e8fa16
  $s$fMonadThrowResourceT ::
    Control.Monad.Catch.MonadThrow
      (Control.Monad.Trans.Resource.Internal.ResourceT
         NGLess.NGError.NGLessIO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT
                       NGLess.NGError.NGLessIO)
                  Data.FastQ.Utils.$s$fMonadErroreResourceT_$s$fMonadResourceT
                  (\ @ e @ a (eta :: GHC.Exception.Type.Exception e) (x :: e) ->
                   let {
                     x1 :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
                       {- Arity: 2, Strictness: <L,U><L,U>x -}
                     = \ (eta1 :: GHC.IORef.IORef
                                    Control.Monad.Trans.Resource.Internal.ReleaseMap)
                         (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       GHC.IO.throwIO1 @ e @ a eta x eta2
                   } in
                   (\ (ds :: GHC.IORef.IORef
                               Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                    x1)
                     `cast`
                   ((<GHC.IORef.IORef
                        Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                     ->_R (<GHC.IORef.IORef
                              Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <a>_R)) ; (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                             <GHC.Types.IO>_R
                                                             <a>_N) ; Sym (NGLess.NGError.N:NGLessIO[0]) <a>_N)) ; Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                                                                                            <NGLess.NGError.NGLessIO>_R
                                                                                                                            <a>_N))) -}
23eea5277ad85e216518836f9573d787
  $s$fMonadThrowResourceT_$cthrowM ::
    GHC.Exception.Type.Exception e =>
    e
    -> Control.Monad.Trans.Resource.Internal.ResourceT
         NGLess.NGError.NGLessIO a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <B,1*U(A,A,1*C1(U),A,A)><B,U><B,A><B,A><B,U>x,
     Unfolding: InlineRule (1, True, False)
                (\ @ e @ a (eta :: GHC.Exception.Type.Exception e) (x :: e) ->
                 let {
                   x1 :: GHC.IORef.IORef
                           Control.Monad.Trans.Resource.Internal.ReleaseMap
                         -> GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
                     {- Arity: 2, Strictness: <L,U><L,U>x -}
                   = \ (eta1 :: GHC.IORef.IORef
                                  Control.Monad.Trans.Resource.Internal.ReleaseMap)
                       (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     GHC.IO.throwIO1 @ e @ a eta x eta2
                 } in
                 (\ (ds :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                  x1)
                   `cast`
                 ((<GHC.IORef.IORef
                      Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                   ->_R (<GHC.IORef.IORef
                            Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <a>_R)) ; (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                           <GHC.Types.IO>_R
                                                           <a>_N) ; Sym (NGLess.NGError.N:NGLessIO[0]) <a>_N)) ; Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                                                                                          <NGLess.NGError.NGLessIO>_R
                                                                                                                          <a>_N))) -}
8cd8bfeb1795f84dab766ae30c7ae61f
  $s$fMonadUnliftIOResourceT ::
    Control.Monad.IO.Unlift.MonadUnliftIO
      (Control.Monad.Trans.Resource.Internal.ResourceT
         NGLess.NGError.NGLessIO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT
                       NGLess.NGError.NGLessIO)
                  Data.FastQ.Utils.$s$fMonadIOResourceT
                  (Control.Monad.Trans.Resource.Internal.$fMonadUnliftIOResourceT1
                     @ NGLess.NGError.NGLessIO
                     NGLess.NGError.$fMonadUnliftIONGLessIO)
                    `cast`
                  (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                            <NGLess.NGError.NGLessIO>_R
                            <Control.Monad.IO.Unlift.UnliftIO
                               (Control.Monad.Trans.Resource.Internal.ResourceT
                                  NGLess.NGError.NGLessIO)>_N))
                  Data.FastQ.Utils.$s$fMonadUnliftIOResourceT_$s$fMonadUnliftIOResourceT_$cwithRunInIO -}
2d53cf316b0b4bdbcf83becb1779f9b0
  $s$fMonadUnliftIOResourceT_$s$fMonadUnliftIOResourceT_$cwithRunInIO ::
    ((forall a.
      Control.Monad.Trans.Resource.Internal.ResourceT
        NGLess.NGError.NGLessIO a
      -> GHC.Types.IO a)
     -> GHC.Types.IO b)
    -> Control.Monad.Trans.Resource.Internal.ResourceT
         NGLess.NGError.NGLessIO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U(U,U)))><L,U><L,U><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ b
                   (ds :: (forall a.
                           Control.Monad.Trans.Resource.Internal.ResourceT
                             NGLess.NGError.NGLessIO a
                           -> GHC.Types.IO a)
                          -> GHC.Types.IO b)
                   (r :: GHC.IORef.IORef
                           Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                 let {
                   ds1 :: NGLess.NGError.NGLessIO
                            (Control.Monad.IO.Unlift.UnliftIO
                               (Control.Monad.Trans.Resource.Internal.ResourceT
                                  NGLess.NGError.NGLessIO))
                   = Control.Monad.Trans.Resource.Internal.$fMonadUnliftIOResourceT1
                       @ NGLess.NGError.NGLessIO
                       NGLess.NGError.$fMonadUnliftIONGLessIO
                       r
                 } in
                 (\ (r1 :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case (ds1
                          `cast`
                        (NGLess.NGError.N:NGLessIO[0] <Control.Monad.IO.Unlift.UnliftIO
                                                         (Control.Monad.Trans.Resource.Internal.ResourceT
                                                            NGLess.NGError.NGLessIO)>_N ; Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                                                              <GHC.Types.IO>_R
                                                                                              <Control.Monad.IO.Unlift.UnliftIO
                                                                                                 (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                                    NGLess.NGError.NGLessIO)>_N)
                          r1)
                         `cast`
                       (GHC.Types.N:IO[0]
                            <Control.Monad.IO.Unlift.UnliftIO
                               (Control.Monad.Trans.Resource.Internal.ResourceT
                                  NGLess.NGError.NGLessIO)>_R)
                         s of ds2 { (#,#) ipv ipv1 ->
                  (ds
                     ipv1
                       `cast`
                     (Control.Monad.IO.Unlift.N:UnliftIO[0]
                          <Control.Monad.Trans.Resource.Internal.ResourceT
                             NGLess.NGError.NGLessIO>_R))
                    `cast`
                  (GHC.Types.N:IO[0] <b>_R)
                    ipv })
                   `cast`
                 ((<GHC.IORef.IORef
                      Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <b>_R)) ; (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                     <GHC.Types.IO>_R
                                                     <b>_N) ; Sym (NGLess.NGError.N:NGLessIO[0]) <b>_N)))
                  `cast`
                (forall (b :: <*>_N).
                 <(forall a.
                   Control.Monad.Trans.Resource.Internal.ResourceT
                     NGLess.NGError.NGLessIO a
                   -> GHC.Types.IO a)
                  -> GHC.Types.IO b>_R
                 ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                               <NGLess.NGError.NGLessIO>_R <b>_N)) -}
fbff6e8b7e7e33d560064ca349f085c2
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Data.FastQ.Utils.$trModule3
                   Data.FastQ.Utils.$trModule1) -}
98bbcc1b088f3bbfc7f490a8c7f872e3
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.FastQ.Utils.$trModule2) -}
3908d720c6bad1397172523ba79e0691
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data.FastQ.Utils"#) -}
1096b3c9c2330795c4099168bae14a74
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.FastQ.Utils.$trModule4) -}
55a526806040dbf117a021127740d0f3
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("NGLess-1.1.0-965Np14lOUvJ2rS9XGhph5"#) -}
e232b641676e20e8df352b8a6a31ded4
  concatenateFQs ::
    [Data.FastQ.FastQFilePath]
    -> NGLess.NGError.NGLessIO Data.FastQ.FastQFilePath
  {- Arity: 1, Strictness: <S,1*U> -}
"SPEC/Data.FastQ.Utils $fApplicativeResourceT @ NGLessIO" [orphan] forall (v :: GHC.Base.Applicative
                                                                                  NGLess.NGError.NGLessIO)
  Control.Monad.Trans.Resource.Internal.$fApplicativeResourceT @ NGLess.NGError.NGLessIO
                                                               v
  = Data.FastQ.Utils.$s$fApplicativeResourceT
"SPEC/Data.FastQ.Utils $fApplicativeResourceT_$cpure @ NGLessIO" [orphan] forall ($dApplicative :: GHC.Base.Applicative
                                                                                                     NGLess.NGError.NGLessIO)
  Control.Monad.Trans.Resource.Internal.$fApplicativeResourceT_$cpure @ NGLess.NGError.NGLessIO
                                                                      $dApplicative
  = Data.FastQ.Utils.$s$fApplicativeResourceT_$cpure
"SPEC/Data.FastQ.Utils $fFunctorResourceT @ NGLessIO" [orphan] forall (v :: GHC.Base.Functor
                                                                              NGLess.NGError.NGLessIO)
  Control.Monad.Trans.Resource.Internal.$fFunctorResourceT @ NGLess.NGError.NGLessIO
                                                           v
  = Data.FastQ.Utils.$s$fApplicativeResourceT_$s$fFunctorResourceT
"SPEC/Data.FastQ.Utils $fMonadErroreResourceT @ NGError @ NGLessIO" [orphan] forall (v :: Control.Monad.Error.Class.MonadError
                                                                                            NGLess.NGError.NGError
                                                                                            NGLess.NGError.NGLessIO)
  Control.Monad.Trans.Resource.Internal.$fMonadErroreResourceT @ NGLess.NGError.NGError
                                                               @ NGLess.NGError.NGLessIO
                                                               v
  = Data.FastQ.Utils.$s$fMonadErroreResourceT
"SPEC/Data.FastQ.Utils $fMonadErroreResourceT1 @ NGError @ NGLessIO" [orphan] forall ($dMonadError :: Control.Monad.Error.Class.MonadError
                                                                                                        NGLess.NGError.NGError
                                                                                                        NGLess.NGError.NGLessIO)
  Control.Monad.Trans.Resource.Internal.$fMonadErroreResourceT1 @ NGLess.NGError.NGError
                                                                @ NGLess.NGError.NGLessIO
                                                                $dMonadError
  = Data.FastQ.Utils.$s$fMonadErroreResourceT1
"SPEC/Data.FastQ.Utils $fMonadErroreResourceT_$cthrowError @ NGError @ NGLessIO" [orphan] forall ($dMonadError :: Control.Monad.Error.Class.MonadError
                                                                                                                    NGLess.NGError.NGError
                                                                                                                    NGLess.NGError.NGLessIO)
  Control.Monad.Trans.Resource.Internal.$fMonadErroreResourceT_$cthrowError @ NGLess.NGError.NGError
                                                                            @ NGLess.NGError.NGLessIO
                                                                            $dMonadError
  = Data.FastQ.Utils.$s$fMonadErroreResourceT_$cthrowError
"SPEC/Data.FastQ.Utils $fMonadIOResourceT @ NGLessIO" [orphan] forall (v :: Control.Monad.IO.Class.MonadIO
                                                                              NGLess.NGError.NGLessIO)
  Control.Monad.Trans.Resource.Internal.$fMonadIOResourceT @ NGLess.NGError.NGLessIO
                                                           v
  = Data.FastQ.Utils.$s$fMonadIOResourceT
"SPEC/Data.FastQ.Utils $fMonadResourceResourceT @ NGLessIO" [orphan] forall (v :: Control.Monad.IO.Class.MonadIO
                                                                                    NGLess.NGError.NGLessIO)
  Control.Monad.Trans.Resource.Internal.$fMonadResourceResourceT @ NGLess.NGError.NGLessIO
                                                                 v
  = Data.FastQ.Utils.$s$fMonadResourceResourceT
"SPEC/Data.FastQ.Utils $fMonadResourceT @ NGLessIO" [orphan] forall (v :: GHC.Base.Monad
                                                                            NGLess.NGError.NGLessIO)
  Control.Monad.Trans.Resource.Internal.$fMonadResourceT @ NGLess.NGError.NGLessIO
                                                         v
  = Data.FastQ.Utils.$s$fMonadErroreResourceT_$s$fMonadResourceT
"SPEC/Data.FastQ.Utils $fMonadResourceT_$c>> @ NGLessIO" [orphan] forall ($dMonad :: GHC.Base.Monad
                                                                                       NGLess.NGError.NGLessIO)
  Control.Monad.Trans.Resource.Internal.$fMonadResourceT_$c>> @ NGLess.NGError.NGLessIO
                                                              $dMonad
  = Data.FastQ.Utils.$s$fMonadErroreResourceT_$s$fMonadResourceT_$c>>
"SPEC/Data.FastQ.Utils $fMonadThrowResourceT @ NGLessIO" [orphan] forall (v :: Control.Monad.Catch.MonadThrow
                                                                                 NGLess.NGError.NGLessIO)
  Control.Monad.Trans.Resource.Internal.$fMonadThrowResourceT @ NGLess.NGError.NGLessIO
                                                              v
  = Data.FastQ.Utils.$s$fMonadThrowResourceT
"SPEC/Data.FastQ.Utils $fMonadThrowResourceT_$cthrowM @ NGLessIO" [orphan] forall ($dMonadThrow :: Control.Monad.Catch.MonadThrow
                                                                                                     NGLess.NGError.NGLessIO)
  Control.Monad.Trans.Resource.Internal.$fMonadThrowResourceT_$cthrowM @ NGLess.NGError.NGLessIO
                                                                       $dMonadThrow
  = Data.FastQ.Utils.$s$fMonadThrowResourceT_$cthrowM
"SPEC/Data.FastQ.Utils $fMonadUnliftIOResourceT @ NGLessIO" [orphan] forall (v :: Control.Monad.IO.Unlift.MonadUnliftIO
                                                                                    NGLess.NGError.NGLessIO)
  Control.Monad.Trans.Resource.Internal.$fMonadUnliftIOResourceT @ NGLess.NGError.NGLessIO
                                                                 v
  = Data.FastQ.Utils.$s$fMonadUnliftIOResourceT
"SPEC/Data.FastQ.Utils $fMonadUnliftIOResourceT_$cwithRunInIO @ NGLessIO" [orphan] forall ($dMonadUnliftIO :: Control.Monad.IO.Unlift.MonadUnliftIO
                                                                                                                NGLess.NGError.NGLessIO)
  Control.Monad.Trans.Resource.Internal.$fMonadUnliftIOResourceT_$cwithRunInIO @ NGLess.NGError.NGLessIO
                                                                               $dMonadUnliftIO
  = Data.FastQ.Utils.$s$fMonadUnliftIOResourceT_$s$fMonadUnliftIOResourceT_$cwithRunInIO
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

