
==================== FINAL INTERFACE ====================
2020-02-24 04:15:12.774633819 UTC

interface NGLess-1.1.0-965Np14lOUvJ2rS9XGhph5:Interpretation.Unique 8065
  interface hash: d5e1903f462da8268b4a096c55eebc41
  ABI hash: 42cb81dc779fa85ffd9d6c59223fab7a
  export-list hash: d314fe73074171e6c5b678aceda25610
  orphan hash: c9fcc9b02dcfd6ae299dc0571eafc861
  flag hash: 75ef9c69b1b2d89098f3a3397e34030c
  opt_hash: 9851e58a0ec35d0fd39c07cdbeb6257b
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Interpretation.Unique.executeUnique
  Interpretation.Unique.performUnique
module dependencies: CmdArgs Configuration Data.FastQ Data.Sam
                     Dependencies.Embedded FileManagement FileOrStream Language NGLess
                     NGLess.NGError NGLess.NGLEnvironment Output Paths_NGLess
                     Utils.Conduit Utils.LockFile Utils.Samtools Utils.Suggestion
                     Utils.Utils Utils.Vector Version
package dependencies: JuicyPixels-3.3.4 MissingH-1.4.1.0
                      StateVar-1.2 active-0.2.0.14 adjunctions-4.4 aeson-1.4.6.0
                      ansi-terminal-0.9.1 ansi-wl-pprint-0.6.9 array-0.5.3.0 async-2.2.2
                      attoparsec-0.13.2.3 base-4.12.0.0 base-compat-0.10.5
                      base-orphans-0.8.1 base64-bytestring-1.0.0.2 bifunctors-5.5.6
                      binary-0.8.6.0 blaze-builder-0.4.1.0 bytes-0.15.5
                      bytestring-0.10.8.2 bzlib-conduit-0.3.0.2 call-stack-0.1.0
                      cereal-0.5.8.1 cereal-conduit-0.8.0 charset-0.3.7.1 colour-2.3.5
                      comonad-5.0.6 conduit-1.3.1.2 conduit-algorithms-0.0.11.0
                      conduit-extra-1.3.4 conduit-zstd-0.0.1.1 configurator-0.3.0.0
                      containers-0.6.0.1 contravariant-1.5.2 convertible-1.1.1.0
                      data-default-class-0.1.2.0 deepseq-1.4.4.0 diagrams-core-1.4.2
                      diagrams-lib-1.4.3 diagrams-solve-0.1.1 diagrams-svg-1.4.3
                      directory-1.3.3.0 distributive-0.6.1 dlist-0.8.0.7
                      dual-tree-0.2.2.1 edit-distance-0.2.2.1 errors-2.3.0
                      exceptions-0.10.4 extra-1.6.18 file-embed-0.0.11.1 filepath-1.4.2.1
                      fingertree-0.1.4.2 free-5.1.3 ghc-boot-th-8.6.5 ghc-prim-0.5.3
                      gitrev-1.3.1 hashable-1.2.7.0 hashtables-1.2.3.4 hostname-1.0
                      inline-c-0.7.0.1 integer-gmp-1.0.2.0 integer-logarithms-1.0.3
                      intervals-0.8.1 kan-extensions-5.2 lens-4.17.1 linear-1.20.9
                      lzma-0.0.0.3 lzma-conduit-1.2.1 monad-loops-0.4.3
                      mono-traversable-1.0.15.1 monoid-extras-0.5.1 mtl-2.2.2
                      newtype-generics-0.5.4 old-locale-1.0.0.7 old-time-1.1.0.3
                      optparse-applicative-0.14.3.0 parsec-3.1.14.0 parsers-0.12.10
                      pretty-1.1.3.6 primitive-0.6.4.0 process-1.6.5.0 profunctors-5.3
                      random-1.1 reflection-2.1.5 regex-1.0.2.0 regex-base-0.93.2
                      regex-compat-0.95.1 regex-pcre-builtin-0.94.5.8.8.35
                      regex-posix-0.95.2 regex-tdfa-1.2.3.2 regex-tdfa-text-1.0.0.3
                      resourcet-1.2.2 safe-0.3.18 safeio-0.0.5.0 scientific-0.3.6.2
                      semigroupoids-5.3.4 split-0.2.3.3 stm-2.5.0.0 stm-chans-3.0.0.4
                      stm-conduit-4.0.1 streaming-commons-0.2.1.1 strict-0.3.2
                      svg-builder-0.1.1 tagged-0.8.6 tar-0.5.1.1
                      template-haskell-2.14.0.0 text-1.2.3.1 th-abstraction-0.3.1.0
                      time-1.8.0.2 time-compat-1.9.2.2 time-locale-compat-0.1.1.5
                      transformers-0.5.6.2 transformers-base-0.4.5.2
                      transformers-compat-0.6.5 unix-2.7.2.2 unix-compat-0.5.2
                      unliftio-0.2.12 unliftio-core-0.1.2.0 unordered-containers-0.2.10.0
                      utf8-string-1.0.1.1 uuid-types-1.0.3 vector-0.12.0.3
                      vector-algorithms-0.8.0.3 zlib-0.6.2.1 zstd-0.1.1.2
orphans: conduit-extra-1.3.4:Data.Conduit.Process
         regex-1.0.2.0:Text.RE.TDFA.String
         regex-tdfa-text-1.0.0.3:Text.Regex.TDFA.Text
         regex-tdfa-text-1.0.0.3:Text.Regex.TDFA.Text.Lazy
         regex-pcre-builtin-0.94.5.8.8.35:Text.Regex.PCRE.String
         regex-pcre-builtin-0.94.5.8.8.35:Text.Regex.PCRE.Sequence
         regex-pcre-builtin-0.94.5.8.8.35:Text.Regex.PCRE.ByteString.Lazy
         regex-pcre-builtin-0.94.5.8.8.35:Text.Regex.PCRE.ByteString
         regex-tdfa-1.2.3.2:Text.Regex.TDFA.ByteString
         regex-tdfa-1.2.3.2:Text.Regex.TDFA.ByteString.Lazy
         regex-tdfa-1.2.3.2:Text.Regex.TDFA.Sequence
         regex-tdfa-1.2.3.2:Text.Regex.TDFA.String
         regex-posix-0.95.2:Text.Regex.Posix.String
         regex-posix-0.95.2:Text.Regex.Posix.Sequence
         regex-posix-0.95.2:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2:Text.Regex.Posix.ByteString
         regex-base-0.93.2:Text.Regex.Base.Context
         convertible-1.1.1.0:Data.Convertible.Instances.C
         convertible-1.1.1.0:Data.Convertible.Instances.Map
         convertible-1.1.1.0:Data.Convertible.Instances.Text
         convertible-1.1.1.0:Data.Convertible.Instances.Time
         convertible-1.1.1.0:Data.Convertible.Instances.Num
         attoparsec-0.13.2.3:Data.Attoparsec.ByteString.Char8
         diagrams-lib-1.4.3:Diagrams.Animation.Active
         diagrams-lib-1.4.3:Diagrams.TwoD.Path
         diagrams-lib-1.4.3:Diagrams.TwoD.Segment
         diagrams-lib-1.4.3:Diagrams.Trail
         diagrams-lib-1.4.3:Diagrams.ThreeD.Types
         diagrams-lib-1.4.3:Diagrams.TwoD.Types
         diagrams-core-1.4.2:Diagrams.Core.Types
         monoid-extras-0.5.1:Data.Monoid.MList
         diagrams-core-1.4.2:Diagrams.Core.Points
         time-1.8.0.2:Data.Time.Clock.TAI reflection-2.1.5:Data.Reflection
         linear-1.20.9:Linear.Instances time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         configurator-0.3.0.0:Data.Configurator.Instances
         attoparsec-0.13.2.3:Data.Attoparsec.Text.Internal
         colour-2.3.5:Data.Colour stm-2.5.0.0:Control.Monad.STM
         vector-0.12.0.3:Data.Vector.Unboxed
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show
         vector-0.12.0.3:Data.Vector.Fusion.Bundle
         transformers-0.5.6.2:Control.Monad.Trans.Error
         base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: JuicyPixels-3.3.4:Codec.Picture.Tga
                         JuicyPixels-3.3.4:Codec.Picture.Tiff
                         JuicyPixels-3.3.4:Codec.Picture.Types
                         NGLess-1.1.0-965Np14lOUvJ2rS9XGhph5:NGLess.NGError
                         active-0.2.0.14:Data.Active adjunctions-4.4:Data.Functor.Rep
                         aeson-1.4.6.0:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.3:Data.Attoparsec.Internal.Types
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         bifunctors-5.5.6:Data.Bifunctor.Biff
                         bifunctors-5.5.6:Data.Bifunctor.Clown
                         bifunctors-5.5.6:Data.Bifunctor.Fix
                         bifunctors-5.5.6:Data.Bifunctor.Flip
                         bifunctors-5.5.6:Data.Bifunctor.Join
                         bifunctors-5.5.6:Data.Bifunctor.Joker
                         bifunctors-5.5.6:Data.Bifunctor.Product
                         bifunctors-5.5.6:Data.Bifunctor.Sum
                         bifunctors-5.5.6:Data.Bifunctor.Tannen
                         bifunctors-5.5.6:Data.Bifunctor.Wrapped bytes-0.15.5:Data.Bytes.Get
                         bytes-0.15.5:Data.Bytes.Signed bytes-0.15.5:Data.Bytes.VarInt
                         conduit-1.3.1.2:Data.Conduit.Internal.Conduit
                         conduit-1.3.1.2:Data.Conduit.Internal.Pipe
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         diagrams-core-1.4.2:Diagrams.Core.Envelope
                         diagrams-core-1.4.2:Diagrams.Core.Measure
                         diagrams-core-1.4.2:Diagrams.Core.Names
                         diagrams-core-1.4.2:Diagrams.Core.Points
                         diagrams-core-1.4.2:Diagrams.Core.Query
                         diagrams-core-1.4.2:Diagrams.Core.Style
                         diagrams-core-1.4.2:Diagrams.Core.Trace
                         diagrams-core-1.4.2:Diagrams.Core.Transform
                         diagrams-core-1.4.2:Diagrams.Core.Types
                         diagrams-core-1.4.2:Diagrams.Core.V
                         diagrams-lib-1.4.3:Diagrams.Angle
                         diagrams-lib-1.4.3:Diagrams.Animation.Active
                         diagrams-lib-1.4.3:Diagrams.BoundingBox
                         diagrams-lib-1.4.3:Diagrams.Coordinates
                         diagrams-lib-1.4.3:Diagrams.Direction
                         diagrams-lib-1.4.3:Diagrams.Located
                         diagrams-lib-1.4.3:Diagrams.Path
                         diagrams-lib-1.4.3:Diagrams.Segment
                         diagrams-lib-1.4.3:Diagrams.Size
                         diagrams-lib-1.4.3:Diagrams.Tangent
                         diagrams-lib-1.4.3:Diagrams.ThreeD.Camera
                         diagrams-lib-1.4.3:Diagrams.ThreeD.Light
                         diagrams-lib-1.4.3:Diagrams.ThreeD.Shapes
                         diagrams-lib-1.4.3:Diagrams.ThreeD.Types
                         diagrams-lib-1.4.3:Diagrams.Trail
                         diagrams-lib-1.4.3:Diagrams.TwoD.Attributes
                         diagrams-lib-1.4.3:Diagrams.TwoD.Image
                         diagrams-lib-1.4.3:Diagrams.TwoD.Path
                         diagrams-lib-1.4.3:Diagrams.TwoD.Segment.Bernstein
                         diagrams-lib-1.4.3:Diagrams.TwoD.Text
                         diagrams-lib-1.4.3:Diagrams.TwoD.Types
                         diagrams-svg-1.4.3:Diagrams.Backend.SVG dlist-0.8.0.7:Data.DList
                         dual-tree-0.2.2.1:Data.Tree.DUAL.Internal
                         fingertree-0.1.4.2:Data.FingerTree
                         free-5.1.3:Control.Comonad.Cofree
                         free-5.1.3:Control.Comonad.Trans.Cofree
                         free-5.1.3:Control.Monad.Free free-5.1.3:Control.Monad.Trans.Free
                         ghc-boot-th-8.6.5:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.5:GHC.LanguageExtensions.Type
                         inline-c-0.7.0.1:Language.C.Inline
                         inline-c-0.7.0.1:Language.C.Inline.Context
                         intervals-0.8.1:Numeric.Interval.Kaucher
                         kan-extensions-5.2:Data.Functor.Day
                         kan-extensions-5.2:Data.Functor.Yoneda lens-4.17.1:Control.Lens.At
                         lens-4.17.1:Control.Lens.Internal.Indexed
                         lens-4.17.1:Control.Lens.Reified lens-4.17.1:Control.Lens.Tuple
                         lens-4.17.1:Control.Lens.Wrapped lens-4.17.1:Control.Lens.Zoom
                         linear-1.20.9:Linear.Affine linear-1.20.9:Linear.Plucker
                         linear-1.20.9:Linear.Quaternion linear-1.20.9:Linear.V
                         linear-1.20.9:Linear.V0 linear-1.20.9:Linear.V1
                         linear-1.20.9:Linear.V2 linear-1.20.9:Linear.V3
                         linear-1.20.9:Linear.V4
                         mono-traversable-1.0.15.1:Data.MonoTraversable
                         mono-traversable-1.0.15.1:Data.NonNull
                         mono-traversable-1.0.15.1:Data.Sequences
                         newtype-generics-0.5.4:Control.Newtype.Generics
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         profunctors-5.3:Data.Profunctor.Composition
                         profunctors-5.3:Data.Profunctor.Rep
                         regex-1.0.2.0:Text.RE.ZeInternals.NamedCaptures
                         resourcet-1.2.2:Control.Monad.Trans.Resource.Internal
                         stm-conduit-4.0.1:Data.Conduit.Async.Composition
                         tagged-0.8.6:Data.Tagged
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         th-abstraction-0.3.1.0:Language.Haskell.TH.Datatype
                         unliftio-0.2.12:UnliftIO.Internals.Async
                         unordered-containers-0.2.10.0:Data.HashMap.Base
                         unordered-containers-0.2.10.0:Data.HashSet.Base
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.3:Data.Vector vector-0.12.0.3:Data.Vector.Primitive
                         vector-0.12.0.3:Data.Vector.Storable
                         vector-0.12.0.3:Data.Vector.Unboxed
                         vector-0.12.0.3:Data.Vector.Unboxed.Base
                         zlib-0.6.2.1:Codec.Compression.Zlib.Stream
import  -/  Data.FastQ 683044f508718e436592cbb72ea87fc2
  exports: 7f3c9451f8064311c68af66858502794
  FastQEncoding e855b69d2b4c4b672e98f4cca1339e27
  FastQFilePath 3b49cd403d588d2f95c29b96eb9e4162
  ReadSet c16a307192e6c5c3c5475f335c533ab2
  ShortRead 22f73d8f1e5cbadca703f79979fa5a28
  ShortRead 22bd7330b29b52b3752e35cd5ee36bcb
  fqDecodeC 136c6f67c091d54e16f11fef6b8830c5
  fqEncode 81a3da95a8903e1a2301f91aaff49d37
  fqEncodeC b8fe88061f31873e88d5fb7b6844cb4d
  srSequence 22bd7330b29b52b3752e35cd5ee36bcb
import  -/  FileManagement fb22fc32ebd4079eedfab3004822d35c
  exports: 0035e3f895add6fcbe2da0a7224ccae1
  createTempDir bedea80af9626dacdd0078a1c6ee35c8
  makeNGLTempFile f8997243f49d682cc3f193c23e0f01b5
import  -/  Language 93f0f50a5c7ee77231d71d6a98e7a8ca
  exports: 6aa5d24204c11e6b2a36767cd645b21f
  NGLessObject ea18243860934472078c5e2ccd0edf40
  NGOList 488dd32aa90ff5894de15c18619c34df
  NGOReadSet c3ec807d5d7afc041d47d76cd179ed0b
import  -/  NGLess a5aa819ac1d32c5f90c4109da4ddd56b
  exports: c338d02d81e70b5020d9e8bfbcb7ea8c
  KwArgsValues 830496506778855ea845b2c49d2ab17b
  lookupIntegerOrScriptErrorDef 34ade76886baf18c528fabb1196f99bb
import  -/  NGLess.NGError 9175c652eec68d1a195f3eb2d7471cb5
  NGLessIO f1fd902a0de985a61e8d9110730dfc21
  throwShouldNotOccur 6b0f4fcf8b2bcdc53931daab853fb839
import  -/  Output 65dbbbf5895e64168b49be3b8326af6d
  exports: a41ff3401bfa3e00d33ddbc94a1eeb35
  DebugOutput 66928311a72e96e4202c735d87d527fd
  outputListLno' 1a98fdc3c349e65a0f427ea401025c97
import  -/  Utils.Conduit 3529d55b10a7cbdf7250fd156212ef77
  exports: 899923d44363d2db775d0cbeb374b958
  linesC 74def1591ec8f05f38349accac761045
import  -/  base-4.12.0.0:Control.Monad 07eaec7fd256019b318d048d00f45b1c
import  -/  base-4.12.0.0:Control.Monad.IO.Class e96805f9d79f75be66a0d44eb83064c1
import  -/  base-4.12.0.0:Data.Foldable efb37371da929e7bc88d896298d2d979
import  -/  base-4.12.0.0:Data.Functor 069b2025a03e32fd228e74a86a58a075
import  -/  base-4.12.0.0:Data.Maybe 9b76a39e833465c3c5b3c078b431417f
import  -/  base-4.12.0.0:Data.Traversable d2c09bff1e4f0c871306c3ff8aa4dc36
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.IO 898d4ddbf00eb4732e5f462760aa42ae
import  -/  base-4.12.0.0:GHC.IO.Handle fe51659cf05ea3ecd36fe5e2d515d89a
import  -/  base-4.12.0.0:GHC.IO.Handle.FD 57dd508e0260edfe7dfb9592eb9a6e63
import  -/  base-4.12.0.0:GHC.IO.IOMode 8012a3f94976206c971b9384804b372a
import  -/  base-4.12.0.0:GHC.List 4014a3c8a3b7c31c8325f6bcf1feea4a
import  -/  base-4.12.0.0:GHC.Num c2039f03637c68f47b0bbff4c18ec616
import  -/  base-4.12.0.0:GHC.Real af2b985dd29515c375fb78b2c9298d42
import  -/  base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  base-4.12.0.0:System.IO dd4f3cfe73b94b7cae46a4ca98a3f09f
import  -/  bytestring-0.10.8.2:Data.ByteString fd8cecf441c361eb2e989315be3b33ab
import  -/  bytestring-0.10.8.2:Data.ByteString.Internal f8067c0775041a7adb8f53745475ed88
import  -/  conduit-1.3.1.2:Data.Conduit a386d3988254720545738ed91850d867
import  -/  conduit-1.3.1.2:Data.Conduit.Combinators 347317c879e3debf6cbfb4f316e8bcb4
import  -/  conduit-1.3.1.2:Data.Conduit.Internal.Conduit 4cfa2d636f9204a4aa47382da9b0ff36
import  -/  conduit-1.3.1.2:Data.Conduit.List de08038b39705aaad9564275ec6efc45
import  -/  conduit-algorithms-0.0.11.0:Data.Conduit.Algorithms.Async c705e379633faccd5884d6a9e46c803e
import  -/  conduit-algorithms-0.0.11.0:Data.Conduit.Algorithms.Utils d2a921b831bbb50309f9f422b2ce43e3
import  -/  directory-1.3.3.0:System.Directory 79b5722ff1e84b2378a22f8587a77df6
import  -/  filepath-1.4.2.1:System.FilePath 15c54060cebd29621bfc77f7f6fce3ff
import  -/  filepath-1.4.2.1:System.FilePath.Posix 807571ae31e154c61d0c6bb61ff8b097
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  hashable-1.2.7.0:Data.Hashable c87662bd3f9c04948eb964fff3f8d936
import  -/  hashable-1.2.7.0:Data.Hashable.Class 8dcae48414a753430e89fc7ea7e9dc69
import  -/  hashtables-1.2.3.4:Data.HashTable.IO 4895503810da0f90498e44b7ab4e5845
import  -/  vector-0.12.0.3:Data.Vector c2b750be0d99dbce28ebfe75464ea17e
1d63d6501ef2dc1a7556c4efc5795c6e
  $s$fApplicativeResourceT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Resource.Internal.ResourceT
         NGLess.NGError.NGLessIO)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT
                       NGLess.NGError.NGLessIO)
                  Interpretation.Unique.$s$fApplicativeResourceT_$s$fFunctorResourceT
                  (\ @ a (eta :: a) ->
                   let {
                     x :: GHC.IORef.IORef
                            Control.Monad.Trans.Resource.Internal.ReleaseMap
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
                       {- Arity: 2 -}
                     = \ (eta1 :: GHC.IORef.IORef
                                    Control.Monad.Trans.Resource.Internal.ReleaseMap)
                         (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       (# eta2, eta #)
                   } in
                   (\ (ds :: GHC.IORef.IORef
                               Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                    x)
                     `cast`
                   ((<GHC.IORef.IORef
                        Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                     ->_R (<GHC.IORef.IORef
                              Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <a>_R)) ; (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                             <GHC.Types.IO>_R
                                                             <a>_N) ; Sym (NGLess.NGError.N:NGLessIO[0]) <a>_N)) ; Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                                                                                            <NGLess.NGError.NGLessIO>_R
                                                                                                                            <a>_N)))
                  (\ @ a
                     @ b
                     (ds :: Control.Monad.Trans.Resource.Internal.ResourceT
                              NGLess.NGError.NGLessIO (a -> b))
                     (ds1 :: Control.Monad.Trans.Resource.Internal.ResourceT
                               NGLess.NGError.NGLessIO a)
                     (r :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                   let {
                     ds2 :: NGLess.NGError.NGLessIO (a -> b)
                     = ds
                         `cast`
                       (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                            <NGLess.NGError.NGLessIO>_R <a -> b>_N)
                         r
                   } in
                   let {
                     ds3 :: NGLess.NGError.NGLessIO a
                     = ds1
                         `cast`
                       (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                            <NGLess.NGError.NGLessIO>_R <a>_N)
                         r
                   } in
                   (\ (r1 :: GHC.IORef.IORef
                               Control.Monad.Trans.Resource.Internal.ReleaseMap)
                      (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case (ds2
                            `cast`
                          (NGLess.NGError.N:NGLessIO[0] <a
                                                         -> b>_N ; Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                                       <GHC.Types.IO>_R <a -> b>_N)
                            r1)
                           `cast`
                         (GHC.Types.N:IO[0] <a -> b>_R)
                           s of ds4 { (#,#) ipv ipv1 ->
                    case (ds3
                            `cast`
                          (NGLess.NGError.N:NGLessIO[0] <a>_N ; Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                                    <GHC.Types.IO>_R <a>_N)
                            r1)
                           `cast`
                         (GHC.Types.N:IO[0] <a>_R)
                           ipv of ds5 { (#,#) ipv2 ipv3 ->
                    (# ipv2, ipv1 ipv3 #) } })
                     `cast`
                   ((<GHC.IORef.IORef
                        Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <b>_R)) ; (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                       <GHC.Types.IO>_R
                                                       <b>_N) ; Sym (NGLess.NGError.N:NGLessIO[0]) <b>_N)))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <Control.Monad.Trans.Resource.Internal.ResourceT
                      NGLess.NGError.NGLessIO (a -> b)>_R
                   ->_R <Control.Monad.Trans.Resource.Internal.ResourceT
                           NGLess.NGError.NGLessIO a>_R
                   ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                 <NGLess.NGError.NGLessIO>_R <b>_N))
                  (Control.Monad.Trans.Resource.Internal.$fApplicativeResourceT2
                     @ NGLess.NGError.NGLessIO
                     NGLess.NGError.$fApplicativeNGLessIO)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                   <a -> b -> c>_R
                   ->_R <Control.Monad.Trans.Resource.Internal.ResourceT
                           NGLess.NGError.NGLessIO a>_R
                   ->_R <Control.Monad.Trans.Resource.Internal.ResourceT
                           NGLess.NGError.NGLessIO b>_R
                   ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                 <NGLess.NGError.NGLessIO>_R <c>_N))
                  (Control.Monad.Trans.Resource.Internal.$fApplicativeResourceT3
                     @ NGLess.NGError.NGLessIO
                     NGLess.NGError.$fApplicativeNGLessIO)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <Control.Monad.Trans.Resource.Internal.ResourceT
                      NGLess.NGError.NGLessIO a>_R
                   ->_R <Control.Monad.Trans.Resource.Internal.ResourceT
                           NGLess.NGError.NGLessIO b>_R
                   ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                 <NGLess.NGError.NGLessIO>_R <b>_N))
                  (\ @ a @ b ->
                   Control.Monad.Trans.Resource.Internal.$fApplicativeResourceT2
                     @ NGLess.NGError.NGLessIO
                     NGLess.NGError.$fApplicativeNGLessIO
                     @ a
                     @ b
                     @ a
                     (GHC.Base.const @ a @ b))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <Control.Monad.Trans.Resource.Internal.ResourceT
                      NGLess.NGError.NGLessIO a>_R
                   ->_R <Control.Monad.Trans.Resource.Internal.ResourceT
                           NGLess.NGError.NGLessIO b>_R
                   ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                 <NGLess.NGError.NGLessIO>_R <a>_N)) -}
cba5fe75c4fdb06b742d1d3cd4ef92c7
  $s$fApplicativeResourceT_$cpure ::
    a
    -> Control.Monad.Trans.Resource.Internal.ResourceT
         NGLess.NGError.NGLessIO a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,A><L,A><S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (eta :: a) ->
                 let {
                   x :: GHC.IORef.IORef
                          Control.Monad.Trans.Resource.Internal.ReleaseMap
                        -> GHC.Prim.State# GHC.Prim.RealWorld
                        -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
                     {- Arity: 2 -}
                   = \ (eta1 :: GHC.IORef.IORef
                                  Control.Monad.Trans.Resource.Internal.ReleaseMap)
                       (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     (# eta2, eta #)
                 } in
                 (\ (ds :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                  x)
                   `cast`
                 ((<GHC.IORef.IORef
                      Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                   ->_R (<GHC.IORef.IORef
                            Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <a>_R)) ; (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                           <GHC.Types.IO>_R
                                                           <a>_N) ; Sym (NGLess.NGError.N:NGLessIO[0]) <a>_N)) ; Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                                                                                          <NGLess.NGError.NGLessIO>_R
                                                                                                                          <a>_N))) -}
36e762633f50a102b3b0a1e31be1246e
  $s$fApplicativeResourceT_$s$fFunctorResourceT ::
    GHC.Base.Functor
      (Control.Monad.Trans.Resource.Internal.ResourceT
         NGLess.NGError.NGLessIO)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT
                       NGLess.NGError.NGLessIO)
                  (\ @ a
                     @ b
                     (f :: a -> b)
                     (ds :: Control.Monad.Trans.Resource.Internal.ResourceT
                              NGLess.NGError.NGLessIO a)
                     (r :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                   let {
                     ds1 :: NGLess.NGError.NGLessIO a
                     = ds
                         `cast`
                       (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                            <NGLess.NGError.NGLessIO>_R <a>_N)
                         r
                   } in
                   (\ (r1 :: GHC.IORef.IORef
                               Control.Monad.Trans.Resource.Internal.ReleaseMap)
                      (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case (ds1
                            `cast`
                          (NGLess.NGError.N:NGLessIO[0] <a>_N ; Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                                    <GHC.Types.IO>_R <a>_N)
                            r1)
                           `cast`
                         (GHC.Types.N:IO[0] <a>_R)
                           s of ds2 { (#,#) ipv ipv1 ->
                    (# ipv, f ipv1 #) })
                     `cast`
                   ((<GHC.IORef.IORef
                        Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <b>_R)) ; (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                       <GHC.Types.IO>_R
                                                       <b>_N) ; Sym (NGLess.NGError.N:NGLessIO[0]) <b>_N)))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a -> b>_R
                   ->_R <Control.Monad.Trans.Resource.Internal.ResourceT
                           NGLess.NGError.NGLessIO a>_R
                   ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                 <NGLess.NGError.NGLessIO>_R <b>_N))
                  (\ @ a
                     @ b
                     (x :: a)
                     (eta :: Control.Monad.Trans.Resource.Internal.ResourceT
                               NGLess.NGError.NGLessIO b)
                     (eta1 :: GHC.IORef.IORef
                                Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                   let {
                     ds :: NGLess.NGError.NGLessIO b
                     = eta
                         `cast`
                       (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                            <NGLess.NGError.NGLessIO>_R <b>_N)
                         eta1
                   } in
                   (\ (r :: GHC.IORef.IORef
                              Control.Monad.Trans.Resource.Internal.ReleaseMap)
                      (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case (ds
                            `cast`
                          (NGLess.NGError.N:NGLessIO[0] <b>_N ; Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                                    <GHC.Types.IO>_R <b>_N)
                            r)
                           `cast`
                         (GHC.Types.N:IO[0] <b>_R)
                           s of ds1 { (#,#) ipv ipv1 ->
                    (# ipv, x #) })
                     `cast`
                   ((<GHC.IORef.IORef
                        Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <a>_R)) ; (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                       <GHC.Types.IO>_R
                                                       <a>_N) ; Sym (NGLess.NGError.N:NGLessIO[0]) <a>_N)))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a>_R
                   ->_R <Control.Monad.Trans.Resource.Internal.ResourceT
                           NGLess.NGError.NGLessIO b>_R
                   ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                 <NGLess.NGError.NGLessIO>_R <a>_N)) -}
d67b4dc40e2e50f1aa4354bf39d628d6
  $s$fMonadErroreResourceT ::
    Control.Monad.Error.Class.MonadError
      NGLess.NGError.NGError
      (Control.Monad.Trans.Resource.Internal.ResourceT
         NGLess.NGError.NGLessIO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ NGLess.NGError.NGError
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT
                       NGLess.NGError.NGLessIO)
                  Interpretation.Unique.$s$fMonadErroreResourceT_$s$fMonadResourceT
                  (\ @ a (eta :: NGLess.NGError.NGError) ->
                   let {
                     x :: GHC.IORef.IORef
                            Control.Monad.Trans.Resource.Internal.ReleaseMap
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
                       {- Arity: 2, Strictness: <L,U><L,U>x -}
                     = NGLess.NGError.$fMonadErrorNGErrorNGLessIO1 @ a eta
                   } in
                   (\ (ds :: GHC.IORef.IORef
                               Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                    x)
                     `cast`
                   ((<GHC.IORef.IORef
                        Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                     ->_R (<GHC.IORef.IORef
                              Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <a>_R)) ; (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                             <GHC.Types.IO>_R
                                                             <a>_N) ; Sym (NGLess.NGError.N:NGLessIO[0]) <a>_N)) ; Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                                                                                            <NGLess.NGError.NGLessIO>_R
                                                                                                                            <a>_N)))
                  (\ @ a
                     (r :: Control.Monad.Trans.Resource.Internal.ResourceT
                             NGLess.NGError.NGLessIO a)
                     (h :: NGLess.NGError.NGError
                           -> Control.Monad.Trans.Resource.Internal.ResourceT
                                NGLess.NGError.NGLessIO a)
                     (i :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                   case NGLess.NGError.$fMonadErrorNGErrorNGLessIO_$ccatchError
                   ret_ty (NGLess.NGError.NGLessIO a)
                   of {})
                    `cast`
                  (forall (a :: <*>_N).
                   <Control.Monad.Trans.Resource.Internal.ResourceT
                      NGLess.NGError.NGLessIO a>_R
                   ->_R <NGLess.NGError.NGError
                         -> Control.Monad.Trans.Resource.Internal.ResourceT
                              NGLess.NGError.NGLessIO a>_R
                   ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                 <NGLess.NGError.NGLessIO>_R <a>_N)) -}
c11f11bdf2b49026bf7ac59b6c4ac7ca
  $s$fMonadErroreResourceT1 ::
    Control.Monad.Trans.Resource.Internal.ResourceT
      NGLess.NGError.NGLessIO a
    -> (NGLess.NGError.NGError
        -> Control.Monad.Trans.Resource.Internal.ResourceT
             NGLess.NGError.NGLessIO a)
    -> GHC.IORef.IORef Control.Monad.Trans.Resource.Internal.ReleaseMap
    -> NGLess.NGError.NGLessIO a
  {- Arity: 3, Strictness: <B,A><B,A><B,A>b,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (r :: Control.Monad.Trans.Resource.Internal.ResourceT
                           NGLess.NGError.NGLessIO a)
                   (h :: NGLess.NGError.NGError
                         -> Control.Monad.Trans.Resource.Internal.ResourceT
                              NGLess.NGError.NGLessIO a)
                   (i :: GHC.IORef.IORef
                           Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                 case NGLess.NGError.$fMonadErrorNGErrorNGLessIO_$ccatchError
                 ret_ty (NGLess.NGError.NGLessIO a)
                 of {}) -}
a7f81869783e3625fdebc3c269c44ad5
  $s$fMonadErroreResourceT_$cthrowError ::
    NGLess.NGError.NGError
    -> Control.Monad.Trans.Resource.Internal.ResourceT
         NGLess.NGError.NGLessIO a
  {- Arity: 4, Strictness: <B,U><B,A><B,A><B,U>x,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (eta :: NGLess.NGError.NGError) ->
                 let {
                   x :: GHC.IORef.IORef
                          Control.Monad.Trans.Resource.Internal.ReleaseMap
                        -> GHC.Prim.State# GHC.Prim.RealWorld
                        -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
                     {- Arity: 2, Strictness: <L,U><L,U>x -}
                   = NGLess.NGError.$fMonadErrorNGErrorNGLessIO1 @ a eta
                 } in
                 (\ (ds :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                  x)
                   `cast`
                 ((<GHC.IORef.IORef
                      Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                   ->_R (<GHC.IORef.IORef
                            Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <a>_R)) ; (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                           <GHC.Types.IO>_R
                                                           <a>_N) ; Sym (NGLess.NGError.N:NGLessIO[0]) <a>_N)) ; Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                                                                                          <NGLess.NGError.NGLessIO>_R
                                                                                                                          <a>_N))) -}
f0a5a0c9e520696bd0f233856c397715
  $s$fMonadErroreResourceT_$s$fMonadResourceT ::
    GHC.Base.Monad
      (Control.Monad.Trans.Resource.Internal.ResourceT
         NGLess.NGError.NGLessIO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT
                       NGLess.NGError.NGLessIO)
                  Interpretation.Unique.$s$fApplicativeResourceT
                  (\ @ a
                     @ b
                     (ds :: Control.Monad.Trans.Resource.Internal.ResourceT
                              NGLess.NGError.NGLessIO a)
                     (f :: a
                           -> Control.Monad.Trans.Resource.Internal.ResourceT
                                NGLess.NGError.NGLessIO b)
                     (r :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                   let {
                     ds1 :: NGLess.NGError.NGLessIO a
                     = ds
                         `cast`
                       (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                            <NGLess.NGError.NGLessIO>_R <a>_N)
                         r
                   } in
                   (\ (r1 :: GHC.IORef.IORef
                               Control.Monad.Trans.Resource.Internal.ReleaseMap)
                      (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case (ds1
                            `cast`
                          (NGLess.NGError.N:NGLessIO[0] <a>_N ; Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                                    <GHC.Types.IO>_R <a>_N)
                            r1)
                           `cast`
                         (GHC.Types.N:IO[0] <a>_R)
                           s of ds2 { (#,#) ipv ipv1 ->
                    (((f ipv1)
                        `cast`
                      (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                           <NGLess.NGError.NGLessIO>_R <b>_N)
                        r)
                       `cast`
                     (NGLess.NGError.N:NGLessIO[0] <b>_N ; Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                               <GHC.Types.IO>_R <b>_N)
                       r1)
                      `cast`
                    (GHC.Types.N:IO[0] <b>_R)
                      ipv })
                     `cast`
                   ((<GHC.IORef.IORef
                        Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <b>_R)) ; (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                       <GHC.Types.IO>_R
                                                       <b>_N) ; Sym (NGLess.NGError.N:NGLessIO[0]) <b>_N)))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <Control.Monad.Trans.Resource.Internal.ResourceT
                      NGLess.NGError.NGLessIO a>_R
                   ->_R <a
                         -> Control.Monad.Trans.Resource.Internal.ResourceT
                              NGLess.NGError.NGLessIO b>_R
                   ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                 <NGLess.NGError.NGLessIO>_R <b>_N))
                  Interpretation.Unique.$s$fMonadErroreResourceT_$s$fMonadResourceT_$c>>
                  (\ @ a (eta :: a) ->
                   let {
                     x :: GHC.IORef.IORef
                            Control.Monad.Trans.Resource.Internal.ReleaseMap
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
                       {- Arity: 2 -}
                     = \ (eta1 :: GHC.IORef.IORef
                                    Control.Monad.Trans.Resource.Internal.ReleaseMap)
                         (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       (# eta2, eta #)
                   } in
                   (\ (ds :: GHC.IORef.IORef
                               Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                    x)
                     `cast`
                   ((<GHC.IORef.IORef
                        Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                     ->_R (<GHC.IORef.IORef
                              Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <a>_R)) ; (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                             <GHC.Types.IO>_R
                                                             <a>_N) ; Sym (NGLess.NGError.N:NGLessIO[0]) <a>_N)) ; Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                                                                                            <NGLess.NGError.NGLessIO>_R
                                                                                                                            <a>_N)))
                  (\ @ a ->
                   GHC.Err.errorWithoutStackTrace
                     @ 'GHC.Types.LiftedRep
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT
                          NGLess.NGError.NGLessIO a)) -}
cfed104281e33c98549bfac469e6d9ea
  $s$fMonadErroreResourceT_$s$fMonadResourceT_$c>> ::
    Control.Monad.Trans.Resource.Internal.ResourceT
      NGLess.NGError.NGLessIO a
    -> Control.Monad.Trans.Resource.Internal.ResourceT
         NGLess.NGError.NGLessIO b
    -> Control.Monad.Trans.Resource.Internal.ResourceT
         NGLess.NGError.NGLessIO b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(C1(U(U,A))))><L,C(C1(C1(U)))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Resource.Internal.ResourceT
                            NGLess.NGError.NGLessIO a)
                   (k :: Control.Monad.Trans.Resource.Internal.ResourceT
                           NGLess.NGError.NGLessIO b)
                   (r :: GHC.IORef.IORef
                           Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                 let {
                   ds :: NGLess.NGError.NGLessIO a
                   = m1
                       `cast`
                     (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                          <NGLess.NGError.NGLessIO>_R <a>_N)
                       r
                 } in
                 (\ (r1 :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case (ds
                          `cast`
                        (NGLess.NGError.N:NGLessIO[0] <a>_N ; Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                                  <GHC.Types.IO>_R <a>_N)
                          r1)
                         `cast`
                       (GHC.Types.N:IO[0] <a>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  ((k `cast`
                    (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                         <NGLess.NGError.NGLessIO>_R <b>_N)
                      r)
                     `cast`
                   (NGLess.NGError.N:NGLessIO[0] <b>_N ; Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                             <GHC.Types.IO>_R <b>_N)
                     r1)
                    `cast`
                  (GHC.Types.N:IO[0] <b>_R)
                    ipv })
                   `cast`
                 ((<GHC.IORef.IORef
                      Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <b>_R)) ; (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                     <GHC.Types.IO>_R
                                                     <b>_N) ; Sym (NGLess.NGError.N:NGLessIO[0]) <b>_N)))
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Resource.Internal.ResourceT
                    NGLess.NGError.NGLessIO a>_R
                 ->_R <Control.Monad.Trans.Resource.Internal.ResourceT
                         NGLess.NGError.NGLessIO b>_R
                 ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                               <NGLess.NGError.NGLessIO>_R <b>_N)) -}
8d359d8a42ddee3db241d6bf388325c3
  $s$fMonadIOResourceT ::
    Control.Monad.IO.Class.MonadIO
      (Control.Monad.Trans.Resource.Internal.ResourceT
         NGLess.NGError.NGLessIO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT
                       NGLess.NGError.NGLessIO)
                  Interpretation.Unique.$s$fMonadErroreResourceT_$s$fMonadResourceT
                  (\ @ a (eta :: GHC.Types.IO a) ->
                   let {
                     x :: GHC.IORef.IORef
                            Control.Monad.Trans.Resource.Internal.ReleaseMap
                          -> GHC.Types.IO a
                       {- Arity: 1 -}
                     = \ (ds :: GHC.IORef.IORef
                                  Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                       eta
                   } in
                   (\ (ds :: GHC.IORef.IORef
                               Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                    x)
                     `cast`
                   ((<GHC.IORef.IORef
                        Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                     ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                   <GHC.Types.IO>_R
                                   <a>_N) ; Sym (NGLess.NGError.N:NGLessIO[0]) <a>_N) ; Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                                                                 <NGLess.NGError.NGLessIO>_R
                                                                                                 <a>_N))) -}
4dc4b26fcc7108e0d0b78f0b1098bca0
  $s$fMonadIOResourceT_$cliftIO ::
    GHC.Types.IO a
    -> Control.Monad.Trans.Resource.Internal.ResourceT
         NGLess.NGError.NGLessIO a
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,A><L,A>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (eta :: GHC.Types.IO a) ->
                 let {
                   x :: GHC.IORef.IORef
                          Control.Monad.Trans.Resource.Internal.ReleaseMap
                        -> GHC.Types.IO a
                     {- Arity: 1 -}
                   = \ (ds :: GHC.IORef.IORef
                                Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                     eta
                 } in
                 (\ (ds :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                  x)
                   `cast`
                 ((<GHC.IORef.IORef
                      Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                   ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                 <GHC.Types.IO>_R
                                 <a>_N) ; Sym (NGLess.NGError.N:NGLessIO[0]) <a>_N) ; Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                                                               <NGLess.NGError.NGLessIO>_R
                                                                                               <a>_N))) -}
f0dcfaa94ad9726102d7b010b3c32dce
  $s$fMonadResourceResourceT ::
    Control.Monad.Trans.Resource.Internal.MonadResource
      (Control.Monad.Trans.Resource.Internal.ResourceT
         NGLess.NGError.NGLessIO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT
                       NGLess.NGError.NGLessIO)
                  Interpretation.Unique.$s$fMonadIOResourceT
                  (\ @ a
                     (eta :: Control.Monad.Trans.Resource.Internal.ResourceT
                               GHC.Types.IO a)
                     (eta1 :: GHC.IORef.IORef
                                Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                   let {
                     eta2 :: GHC.Types.IO a
                     = eta
                         `cast`
                       (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                            <GHC.Types.IO>_R <a>_N)
                         eta1
                   } in
                   (\ (ds :: GHC.IORef.IORef
                               Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                    eta2)
                     `cast`
                   (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                             <GHC.Types.IO>_R
                             <a>_N) ; Sym (NGLess.NGError.N:NGLessIO[0]) <a>_N))
                    `cast`
                  (forall (a :: <*>_N).
                   <Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO a>_R
                   ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                 <NGLess.NGError.NGLessIO>_R <a>_N)) -}
e10b8b0ef8572e2e4c1a924b8bfdee55
  $s$fMonadThrowResourceT ::
    Control.Monad.Catch.MonadThrow
      (Control.Monad.Trans.Resource.Internal.ResourceT
         NGLess.NGError.NGLessIO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT
                       NGLess.NGError.NGLessIO)
                  Interpretation.Unique.$s$fMonadErroreResourceT_$s$fMonadResourceT
                  (\ @ e @ a (eta :: GHC.Exception.Type.Exception e) (x :: e) ->
                   let {
                     x1 :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
                       {- Arity: 2, Strictness: <L,U><L,U>x -}
                     = \ (eta1 :: GHC.IORef.IORef
                                    Control.Monad.Trans.Resource.Internal.ReleaseMap)
                         (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       GHC.IO.throwIO1 @ e @ a eta x eta2
                   } in
                   (\ (ds :: GHC.IORef.IORef
                               Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                    x1)
                     `cast`
                   ((<GHC.IORef.IORef
                        Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                     ->_R (<GHC.IORef.IORef
                              Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <a>_R)) ; (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                             <GHC.Types.IO>_R
                                                             <a>_N) ; Sym (NGLess.NGError.N:NGLessIO[0]) <a>_N)) ; Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                                                                                            <NGLess.NGError.NGLessIO>_R
                                                                                                                            <a>_N))) -}
94279efde19f11be598b04d9bf8a0593
  $s$fMonadThrowResourceT_$cthrowM ::
    GHC.Exception.Type.Exception e =>
    e
    -> Control.Monad.Trans.Resource.Internal.ResourceT
         NGLess.NGError.NGLessIO a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <B,1*U(A,A,1*C1(U),A,A)><B,U><B,A><B,A><B,U>x,
     Unfolding: InlineRule (1, True, False)
                (\ @ e @ a (eta :: GHC.Exception.Type.Exception e) (x :: e) ->
                 let {
                   x1 :: GHC.IORef.IORef
                           Control.Monad.Trans.Resource.Internal.ReleaseMap
                         -> GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
                     {- Arity: 2, Strictness: <L,U><L,U>x -}
                   = \ (eta1 :: GHC.IORef.IORef
                                  Control.Monad.Trans.Resource.Internal.ReleaseMap)
                       (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     GHC.IO.throwIO1 @ e @ a eta x eta2
                 } in
                 (\ (ds :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                  x1)
                   `cast`
                 ((<GHC.IORef.IORef
                      Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                   ->_R (<GHC.IORef.IORef
                            Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <a>_R)) ; (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                           <GHC.Types.IO>_R
                                                           <a>_N) ; Sym (NGLess.NGError.N:NGLessIO[0]) <a>_N)) ; Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                                                                                          <NGLess.NGError.NGLessIO>_R
                                                                                                                          <a>_N))) -}
a9766f32e72ff725a6551cfb716fe2ff
  $s$fMonadUnliftIOResourceT ::
    Control.Monad.IO.Unlift.MonadUnliftIO
      (Control.Monad.Trans.Resource.Internal.ResourceT
         NGLess.NGError.NGLessIO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT
                       NGLess.NGError.NGLessIO)
                  Interpretation.Unique.$s$fMonadIOResourceT
                  (Control.Monad.Trans.Resource.Internal.$fMonadUnliftIOResourceT1
                     @ NGLess.NGError.NGLessIO
                     NGLess.NGError.$fMonadUnliftIONGLessIO)
                    `cast`
                  (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                            <NGLess.NGError.NGLessIO>_R
                            <Control.Monad.IO.Unlift.UnliftIO
                               (Control.Monad.Trans.Resource.Internal.ResourceT
                                  NGLess.NGError.NGLessIO)>_N))
                  Interpretation.Unique.$s$fMonadUnliftIOResourceT_$s$fMonadUnliftIOResourceT_$cwithRunInIO -}
4541c584b83aadef0ae3fa71002cafaf
  $s$fMonadUnliftIOResourceT_$s$fMonadUnliftIOResourceT_$cwithRunInIO ::
    ((forall a.
      Control.Monad.Trans.Resource.Internal.ResourceT
        NGLess.NGError.NGLessIO a
      -> GHC.Types.IO a)
     -> GHC.Types.IO b)
    -> Control.Monad.Trans.Resource.Internal.ResourceT
         NGLess.NGError.NGLessIO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U(U,U)))><L,U><L,U><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ b
                   (ds :: (forall a.
                           Control.Monad.Trans.Resource.Internal.ResourceT
                             NGLess.NGError.NGLessIO a
                           -> GHC.Types.IO a)
                          -> GHC.Types.IO b)
                   (r :: GHC.IORef.IORef
                           Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                 let {
                   ds1 :: NGLess.NGError.NGLessIO
                            (Control.Monad.IO.Unlift.UnliftIO
                               (Control.Monad.Trans.Resource.Internal.ResourceT
                                  NGLess.NGError.NGLessIO))
                   = Control.Monad.Trans.Resource.Internal.$fMonadUnliftIOResourceT1
                       @ NGLess.NGError.NGLessIO
                       NGLess.NGError.$fMonadUnliftIONGLessIO
                       r
                 } in
                 (\ (r1 :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case (ds1
                          `cast`
                        (NGLess.NGError.N:NGLessIO[0] <Control.Monad.IO.Unlift.UnliftIO
                                                         (Control.Monad.Trans.Resource.Internal.ResourceT
                                                            NGLess.NGError.NGLessIO)>_N ; Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                                                              <GHC.Types.IO>_R
                                                                                              <Control.Monad.IO.Unlift.UnliftIO
                                                                                                 (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                                    NGLess.NGError.NGLessIO)>_N)
                          r1)
                         `cast`
                       (GHC.Types.N:IO[0]
                            <Control.Monad.IO.Unlift.UnliftIO
                               (Control.Monad.Trans.Resource.Internal.ResourceT
                                  NGLess.NGError.NGLessIO)>_R)
                         s of ds2 { (#,#) ipv ipv1 ->
                  (ds
                     ipv1
                       `cast`
                     (Control.Monad.IO.Unlift.N:UnliftIO[0]
                          <Control.Monad.Trans.Resource.Internal.ResourceT
                             NGLess.NGError.NGLessIO>_R))
                    `cast`
                  (GHC.Types.N:IO[0] <b>_R)
                    ipv })
                   `cast`
                 ((<GHC.IORef.IORef
                      Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <b>_R)) ; (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                     <GHC.Types.IO>_R
                                                     <b>_N) ; Sym (NGLess.NGError.N:NGLessIO[0]) <b>_N)))
                  `cast`
                (forall (b :: <*>_N).
                 <(forall a.
                   Control.Monad.Trans.Resource.Internal.ResourceT
                     NGLess.NGError.NGLessIO a
                   -> GHC.Types.IO a)
                  -> GHC.Types.IO b>_R
                 ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                               <NGLess.NGError.NGLessIO>_R <b>_N)) -}
6fcce4bc012ad45ab4627cfcc9ba97de
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Interpretation.Unique.$trModule3
                   Interpretation.Unique.$trModule1) -}
0225c3061ace92a6709132778375473d
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Interpretation.Unique.$trModule2) -}
74053f913f265dab9910da9d8a289619
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Interpretation.Unique"#) -}
0c985312f702ac76951ff2e0596ab3e0
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Interpretation.Unique.$trModule4) -}
478a0b7d1d28fb39a8a2444eb699bf5f
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("NGLess-1.1.0-965Np14lOUvJ2rS9XGhph5"#) -}
55728d5a2cfac5365666496c94053c82
  executeUnique ::
    Language.NGLessObject
    -> NGLess.KwArgsValues
    -> NGLess.NGError.NGLessIO Language.NGLessObject
  {- Arity: 2, Strictness: <S,U><L,U> -}
84d7dab1c76f7110f646178154ee8c28
  performUnique ::
    GHC.IO.FilePath
    -> Data.FastQ.FastQEncoding
    -> GHC.Types.Int
    -> NGLess.NGError.NGLessIO GHC.IO.FilePath
  {- Arity: 5, Strictness: <L,U><L,U><L,U(U)><L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Interpretation.Unique.performUnique1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R <Data.FastQ.FastQEncoding>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R (<GHC.IORef.IORef
                          Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <GHC.IO.FilePath>_R)) ; (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                                       <GHC.Types.IO>_R
                                                                       <GHC.IO.FilePath>_N) ; Sym (NGLess.NGError.N:NGLessIO[0]) <GHC.IO.FilePath>_N)) -}
d65c16481343210be6dae9123718c0bc
  performUnique1 ::
    GHC.IO.FilePath
    -> Data.FastQ.FastQEncoding
    -> GHC.Types.Int
    -> GHC.IORef.IORef Control.Monad.Trans.Resource.Internal.ReleaseMap
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.IO.FilePath #)
  {- Arity: 5, Strictness: <L,U><L,U><L,U(U)><L,U(U)><S,U> -}
"SPEC/Interpretation.Unique $fApplicativeResourceT @ NGLessIO" [orphan] forall (v :: GHC.Base.Applicative
                                                                                       NGLess.NGError.NGLessIO)
  Control.Monad.Trans.Resource.Internal.$fApplicativeResourceT @ NGLess.NGError.NGLessIO
                                                               v
  = Interpretation.Unique.$s$fApplicativeResourceT
"SPEC/Interpretation.Unique $fApplicativeResourceT_$cpure @ NGLessIO" [orphan] forall ($dApplicative :: GHC.Base.Applicative
                                                                                                          NGLess.NGError.NGLessIO)
  Control.Monad.Trans.Resource.Internal.$fApplicativeResourceT_$cpure @ NGLess.NGError.NGLessIO
                                                                      $dApplicative
  = Interpretation.Unique.$s$fApplicativeResourceT_$cpure
"SPEC/Interpretation.Unique $fFunctorResourceT @ NGLessIO" [orphan] forall (v :: GHC.Base.Functor
                                                                                   NGLess.NGError.NGLessIO)
  Control.Monad.Trans.Resource.Internal.$fFunctorResourceT @ NGLess.NGError.NGLessIO
                                                           v
  = Interpretation.Unique.$s$fApplicativeResourceT_$s$fFunctorResourceT
"SPEC/Interpretation.Unique $fMonadErroreResourceT @ NGError @ NGLessIO" [orphan] forall (v :: Control.Monad.Error.Class.MonadError
                                                                                                 NGLess.NGError.NGError
                                                                                                 NGLess.NGError.NGLessIO)
  Control.Monad.Trans.Resource.Internal.$fMonadErroreResourceT @ NGLess.NGError.NGError
                                                               @ NGLess.NGError.NGLessIO
                                                               v
  = Interpretation.Unique.$s$fMonadErroreResourceT
"SPEC/Interpretation.Unique $fMonadErroreResourceT1 @ NGError @ NGLessIO" [orphan] forall ($dMonadError :: Control.Monad.Error.Class.MonadError
                                                                                                             NGLess.NGError.NGError
                                                                                                             NGLess.NGError.NGLessIO)
  Control.Monad.Trans.Resource.Internal.$fMonadErroreResourceT1 @ NGLess.NGError.NGError
                                                                @ NGLess.NGError.NGLessIO
                                                                $dMonadError
  = Interpretation.Unique.$s$fMonadErroreResourceT1
"SPEC/Interpretation.Unique $fMonadErroreResourceT_$cthrowError @ NGError @ NGLessIO" [orphan] forall ($dMonadError :: Control.Monad.Error.Class.MonadError
                                                                                                                         NGLess.NGError.NGError
                                                                                                                         NGLess.NGError.NGLessIO)
  Control.Monad.Trans.Resource.Internal.$fMonadErroreResourceT_$cthrowError @ NGLess.NGError.NGError
                                                                            @ NGLess.NGError.NGLessIO
                                                                            $dMonadError
  = Interpretation.Unique.$s$fMonadErroreResourceT_$cthrowError
"SPEC/Interpretation.Unique $fMonadIOResourceT @ NGLessIO" [orphan] forall (v :: Control.Monad.IO.Class.MonadIO
                                                                                   NGLess.NGError.NGLessIO)
  Control.Monad.Trans.Resource.Internal.$fMonadIOResourceT @ NGLess.NGError.NGLessIO
                                                           v
  = Interpretation.Unique.$s$fMonadIOResourceT
"SPEC/Interpretation.Unique $fMonadIOResourceT_$cliftIO @ NGLessIO" [orphan] forall ($dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                                                    NGLess.NGError.NGLessIO)
  Control.Monad.Trans.Resource.Internal.$fMonadIOResourceT_$cliftIO @ NGLess.NGError.NGLessIO
                                                                    $dMonadIO
  = Interpretation.Unique.$s$fMonadIOResourceT_$cliftIO
"SPEC/Interpretation.Unique $fMonadResourceResourceT @ NGLessIO" [orphan] forall (v :: Control.Monad.IO.Class.MonadIO
                                                                                         NGLess.NGError.NGLessIO)
  Control.Monad.Trans.Resource.Internal.$fMonadResourceResourceT @ NGLess.NGError.NGLessIO
                                                                 v
  = Interpretation.Unique.$s$fMonadResourceResourceT
"SPEC/Interpretation.Unique $fMonadResourceT @ NGLessIO" [orphan] forall (v :: GHC.Base.Monad
                                                                                 NGLess.NGError.NGLessIO)
  Control.Monad.Trans.Resource.Internal.$fMonadResourceT @ NGLess.NGError.NGLessIO
                                                         v
  = Interpretation.Unique.$s$fMonadErroreResourceT_$s$fMonadResourceT
"SPEC/Interpretation.Unique $fMonadResourceT_$c>> @ NGLessIO" [orphan] forall ($dMonad :: GHC.Base.Monad
                                                                                            NGLess.NGError.NGLessIO)
  Control.Monad.Trans.Resource.Internal.$fMonadResourceT_$c>> @ NGLess.NGError.NGLessIO
                                                              $dMonad
  = Interpretation.Unique.$s$fMonadErroreResourceT_$s$fMonadResourceT_$c>>
"SPEC/Interpretation.Unique $fMonadThrowResourceT @ NGLessIO" [orphan] forall (v :: Control.Monad.Catch.MonadThrow
                                                                                      NGLess.NGError.NGLessIO)
  Control.Monad.Trans.Resource.Internal.$fMonadThrowResourceT @ NGLess.NGError.NGLessIO
                                                              v
  = Interpretation.Unique.$s$fMonadThrowResourceT
"SPEC/Interpretation.Unique $fMonadThrowResourceT_$cthrowM @ NGLessIO" [orphan] forall ($dMonadThrow :: Control.Monad.Catch.MonadThrow
                                                                                                          NGLess.NGError.NGLessIO)
  Control.Monad.Trans.Resource.Internal.$fMonadThrowResourceT_$cthrowM @ NGLess.NGError.NGLessIO
                                                                       $dMonadThrow
  = Interpretation.Unique.$s$fMonadThrowResourceT_$cthrowM
"SPEC/Interpretation.Unique $fMonadUnliftIOResourceT @ NGLessIO" [orphan] forall (v :: Control.Monad.IO.Unlift.MonadUnliftIO
                                                                                         NGLess.NGError.NGLessIO)
  Control.Monad.Trans.Resource.Internal.$fMonadUnliftIOResourceT @ NGLess.NGError.NGLessIO
                                                                 v
  = Interpretation.Unique.$s$fMonadUnliftIOResourceT
"SPEC/Interpretation.Unique $fMonadUnliftIOResourceT_$cwithRunInIO @ NGLessIO" [orphan] forall ($dMonadUnliftIO :: Control.Monad.IO.Unlift.MonadUnliftIO
                                                                                                                     NGLess.NGError.NGLessIO)
  Control.Monad.Trans.Resource.Internal.$fMonadUnliftIOResourceT_$cwithRunInIO @ NGLess.NGError.NGLessIO
                                                                               $dMonadUnliftIO
  = Interpretation.Unique.$s$fMonadUnliftIOResourceT_$s$fMonadUnliftIOResourceT_$cwithRunInIO
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

