
==================== FINAL INTERFACE ====================
2020-02-24 04:15:20.61985651 UTC

interface NGLess-1.1.0-965Np14lOUvJ2rS9XGhph5:Validation 8065
  interface hash: c20fd7baee98ffbf7fe7fcb72adecf80
  ABI hash: 9eb6d7c74ca4783e52e24ba6ac6c29a3
  export-list hash: 25370253cbc3d4ab6938e40541307abf
  orphan hash: 1305658311e36b935c5c6dbec35cdeb4
  flag hash: af0c445c587eaa59b2143ec7cebee05f
  opt_hash: 9851e58a0ec35d0fd39c07cdbeb6257b
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Validation.uses_STDOUT
  Validation.validate
module dependencies: BuiltinFunctions CmdArgs Configuration
                     Data.FastQ Data.Sam Dependencies.Embedded FileManagement
                     FileOrStream Language Modules NGLess NGLess.NGError
                     NGLess.NGLEnvironment Output Paths_NGLess Utils.Conduit
                     Utils.FindModules Utils.LockFile Utils.Samtools Utils.Suggestion
                     Utils.Utils Utils.Vector Version
package dependencies: JuicyPixels-3.3.4 MissingH-1.4.1.0
                      StateVar-1.2 active-0.2.0.14 adjunctions-4.4 aeson-1.4.6.0
                      ansi-terminal-0.9.1 ansi-wl-pprint-0.6.9 array-0.5.3.0 async-2.2.2
                      attoparsec-0.13.2.3 base-4.12.0.0 base-compat-0.10.5
                      base-orphans-0.8.1 base64-bytestring-1.0.0.2 bifunctors-5.5.6
                      binary-0.8.6.0 blaze-builder-0.4.1.0 bytes-0.15.5
                      bytestring-0.10.8.2 bzlib-conduit-0.3.0.2 call-stack-0.1.0
                      cereal-0.5.8.1 cereal-conduit-0.8.0 charset-0.3.7.1 colour-2.3.5
                      comonad-5.0.6 conduit-1.3.1.2 conduit-algorithms-0.0.11.0
                      conduit-extra-1.3.4 conduit-zstd-0.0.1.1 configurator-0.3.0.0
                      containers-0.6.0.1 contravariant-1.5.2 convertible-1.1.1.0
                      data-default-0.7.1.1 data-default-class-0.1.2.0
                      data-default-instances-containers-0.0.1
                      data-default-instances-dlist-0.0.1
                      data-default-instances-old-locale-0.0.1 deepseq-1.4.4.0
                      diagrams-core-1.4.2 diagrams-lib-1.4.3 diagrams-solve-0.1.1
                      diagrams-svg-1.4.3 directory-1.3.3.0 distributive-0.6.1
                      dlist-0.8.0.7 dual-tree-0.2.2.1 edit-distance-0.2.2.1
                      either-5.0.1.1 errors-2.3.0 exceptions-0.10.4 extra-1.6.18
                      file-embed-0.0.11.1 filepath-1.4.2.1 fingertree-0.1.4.2 free-5.1.3
                      ghc-boot-th-8.6.5 ghc-prim-0.5.3 gitrev-1.3.1 hashable-1.2.7.0
                      hostname-1.0 inline-c-0.7.0.1 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.3 intervals-0.8.1 kan-extensions-5.2
                      lens-4.17.1 linear-1.20.9 lzma-0.0.0.3 lzma-conduit-1.2.1
                      monad-loops-0.4.3 mono-traversable-1.0.15.1 monoid-extras-0.5.1
                      mtl-2.2.2 newtype-generics-0.5.4 old-locale-1.0.0.7
                      old-time-1.1.0.3 optparse-applicative-0.14.3.0 parsec-3.1.14.0
                      parsers-0.12.10 pretty-1.1.3.6 primitive-0.6.4.0 process-1.6.5.0
                      profunctors-5.3 random-1.1 reflection-2.1.5 regex-1.0.2.0
                      regex-base-0.93.2 regex-compat-0.95.1
                      regex-pcre-builtin-0.94.5.8.8.35 regex-posix-0.95.2
                      regex-tdfa-1.2.3.2 regex-tdfa-text-1.0.0.3 resourcet-1.2.2
                      safe-0.3.18 safeio-0.0.5.0 scientific-0.3.6.2 semigroupoids-5.3.4
                      split-0.2.3.3 stm-2.5.0.0 stm-chans-3.0.0.4 stm-conduit-4.0.1
                      streaming-commons-0.2.1.1 strict-0.3.2 svg-builder-0.1.1
                      tagged-0.8.6 tar-0.5.1.1 template-haskell-2.14.0.0 text-1.2.3.1
                      th-abstraction-0.3.1.0 time-1.8.0.2 time-compat-1.9.2.2
                      time-locale-compat-0.1.1.5 transformers-0.5.6.2
                      transformers-base-0.4.5.2 transformers-compat-0.6.5 unix-2.7.2.2
                      unix-compat-0.5.2 unliftio-0.2.12 unliftio-core-0.1.2.0
                      unordered-containers-0.2.10.0 utf8-string-1.0.1.1 uuid-types-1.0.3
                      vector-0.12.0.3 vector-algorithms-0.8.0.3 zlib-0.6.2.1 zstd-0.1.1.2
orphans: data-default-instances-containers-0.0.1:Data.Default.Instances.Containers
         data-default-instances-dlist-0.0.1:Data.Default.Instances.DList
         data-default-instances-old-locale-0.0.1:Data.Default.Instances.OldLocale
         conduit-extra-1.3.4:Data.Conduit.Process
         regex-1.0.2.0:Text.RE.TDFA.String
         regex-tdfa-text-1.0.0.3:Text.Regex.TDFA.Text
         regex-tdfa-text-1.0.0.3:Text.Regex.TDFA.Text.Lazy
         regex-pcre-builtin-0.94.5.8.8.35:Text.Regex.PCRE.String
         regex-pcre-builtin-0.94.5.8.8.35:Text.Regex.PCRE.Sequence
         regex-pcre-builtin-0.94.5.8.8.35:Text.Regex.PCRE.ByteString.Lazy
         regex-pcre-builtin-0.94.5.8.8.35:Text.Regex.PCRE.ByteString
         regex-tdfa-1.2.3.2:Text.Regex.TDFA.ByteString
         regex-tdfa-1.2.3.2:Text.Regex.TDFA.ByteString.Lazy
         regex-tdfa-1.2.3.2:Text.Regex.TDFA.Sequence
         regex-tdfa-1.2.3.2:Text.Regex.TDFA.String
         regex-posix-0.95.2:Text.Regex.Posix.String
         regex-posix-0.95.2:Text.Regex.Posix.Sequence
         regex-posix-0.95.2:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2:Text.Regex.Posix.ByteString
         regex-base-0.93.2:Text.Regex.Base.Context
         convertible-1.1.1.0:Data.Convertible.Instances.C
         convertible-1.1.1.0:Data.Convertible.Instances.Map
         convertible-1.1.1.0:Data.Convertible.Instances.Text
         convertible-1.1.1.0:Data.Convertible.Instances.Time
         convertible-1.1.1.0:Data.Convertible.Instances.Num
         attoparsec-0.13.2.3:Data.Attoparsec.ByteString.Char8
         diagrams-lib-1.4.3:Diagrams.Animation.Active
         diagrams-lib-1.4.3:Diagrams.TwoD.Path
         diagrams-lib-1.4.3:Diagrams.TwoD.Segment
         diagrams-lib-1.4.3:Diagrams.Trail
         diagrams-lib-1.4.3:Diagrams.ThreeD.Types
         diagrams-lib-1.4.3:Diagrams.TwoD.Types
         diagrams-core-1.4.2:Diagrams.Core.Types
         monoid-extras-0.5.1:Data.Monoid.MList
         diagrams-core-1.4.2:Diagrams.Core.Points
         time-1.8.0.2:Data.Time.Clock.TAI reflection-2.1.5:Data.Reflection
         linear-1.20.9:Linear.Instances vector-0.12.0.3:Data.Vector.Unboxed
         vector-0.12.0.3:Data.Vector.Fusion.Bundle
         configurator-0.3.0.0:Data.Configurator.Instances
         attoparsec-0.13.2.3:Data.Attoparsec.Text.Internal
         colour-2.3.5:Data.Colour hashable-1.2.7.0:Data.Hashable.Generic
         text-1.2.3.1:Data.Text.Lazy stm-2.5.0.0:Control.Monad.STM
         transformers-0.5.6.2:Control.Monad.Trans.Error
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: JuicyPixels-3.3.4:Codec.Picture.Tga
                         JuicyPixels-3.3.4:Codec.Picture.Tiff
                         JuicyPixels-3.3.4:Codec.Picture.Types
                         NGLess-1.1.0-965Np14lOUvJ2rS9XGhph5:NGLess.NGError
                         active-0.2.0.14:Data.Active adjunctions-4.4:Data.Functor.Rep
                         aeson-1.4.6.0:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.3:Data.Attoparsec.Internal.Types
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         bifunctors-5.5.6:Data.Bifunctor.Biff
                         bifunctors-5.5.6:Data.Bifunctor.Clown
                         bifunctors-5.5.6:Data.Bifunctor.Fix
                         bifunctors-5.5.6:Data.Bifunctor.Flip
                         bifunctors-5.5.6:Data.Bifunctor.Join
                         bifunctors-5.5.6:Data.Bifunctor.Joker
                         bifunctors-5.5.6:Data.Bifunctor.Product
                         bifunctors-5.5.6:Data.Bifunctor.Sum
                         bifunctors-5.5.6:Data.Bifunctor.Tannen
                         bifunctors-5.5.6:Data.Bifunctor.Wrapped bytes-0.15.5:Data.Bytes.Get
                         bytes-0.15.5:Data.Bytes.Signed bytes-0.15.5:Data.Bytes.VarInt
                         conduit-1.3.1.2:Data.Conduit.Internal.Conduit
                         conduit-1.3.1.2:Data.Conduit.Internal.Pipe
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         diagrams-core-1.4.2:Diagrams.Core.Envelope
                         diagrams-core-1.4.2:Diagrams.Core.Measure
                         diagrams-core-1.4.2:Diagrams.Core.Names
                         diagrams-core-1.4.2:Diagrams.Core.Points
                         diagrams-core-1.4.2:Diagrams.Core.Query
                         diagrams-core-1.4.2:Diagrams.Core.Style
                         diagrams-core-1.4.2:Diagrams.Core.Trace
                         diagrams-core-1.4.2:Diagrams.Core.Transform
                         diagrams-core-1.4.2:Diagrams.Core.Types
                         diagrams-core-1.4.2:Diagrams.Core.V
                         diagrams-lib-1.4.3:Diagrams.Angle
                         diagrams-lib-1.4.3:Diagrams.Animation.Active
                         diagrams-lib-1.4.3:Diagrams.BoundingBox
                         diagrams-lib-1.4.3:Diagrams.Coordinates
                         diagrams-lib-1.4.3:Diagrams.Direction
                         diagrams-lib-1.4.3:Diagrams.Located
                         diagrams-lib-1.4.3:Diagrams.Path
                         diagrams-lib-1.4.3:Diagrams.Segment
                         diagrams-lib-1.4.3:Diagrams.Size
                         diagrams-lib-1.4.3:Diagrams.Tangent
                         diagrams-lib-1.4.3:Diagrams.ThreeD.Camera
                         diagrams-lib-1.4.3:Diagrams.ThreeD.Light
                         diagrams-lib-1.4.3:Diagrams.ThreeD.Shapes
                         diagrams-lib-1.4.3:Diagrams.ThreeD.Types
                         diagrams-lib-1.4.3:Diagrams.Trail
                         diagrams-lib-1.4.3:Diagrams.TwoD.Attributes
                         diagrams-lib-1.4.3:Diagrams.TwoD.Image
                         diagrams-lib-1.4.3:Diagrams.TwoD.Path
                         diagrams-lib-1.4.3:Diagrams.TwoD.Segment.Bernstein
                         diagrams-lib-1.4.3:Diagrams.TwoD.Text
                         diagrams-lib-1.4.3:Diagrams.TwoD.Types
                         diagrams-svg-1.4.3:Diagrams.Backend.SVG dlist-0.8.0.7:Data.DList
                         dual-tree-0.2.2.1:Data.Tree.DUAL.Internal
                         fingertree-0.1.4.2:Data.FingerTree
                         free-5.1.3:Control.Comonad.Cofree
                         free-5.1.3:Control.Comonad.Trans.Cofree
                         free-5.1.3:Control.Monad.Free free-5.1.3:Control.Monad.Trans.Free
                         ghc-boot-th-8.6.5:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.5:GHC.LanguageExtensions.Type
                         inline-c-0.7.0.1:Language.C.Inline
                         inline-c-0.7.0.1:Language.C.Inline.Context
                         intervals-0.8.1:Numeric.Interval.Kaucher
                         kan-extensions-5.2:Data.Functor.Day
                         kan-extensions-5.2:Data.Functor.Yoneda lens-4.17.1:Control.Lens.At
                         lens-4.17.1:Control.Lens.Internal.Indexed
                         lens-4.17.1:Control.Lens.Reified lens-4.17.1:Control.Lens.Tuple
                         lens-4.17.1:Control.Lens.Wrapped lens-4.17.1:Control.Lens.Zoom
                         linear-1.20.9:Linear.Affine linear-1.20.9:Linear.Plucker
                         linear-1.20.9:Linear.Quaternion linear-1.20.9:Linear.V
                         linear-1.20.9:Linear.V0 linear-1.20.9:Linear.V1
                         linear-1.20.9:Linear.V2 linear-1.20.9:Linear.V3
                         linear-1.20.9:Linear.V4
                         mono-traversable-1.0.15.1:Data.MonoTraversable
                         mono-traversable-1.0.15.1:Data.NonNull
                         mono-traversable-1.0.15.1:Data.Sequences
                         newtype-generics-0.5.4:Control.Newtype.Generics
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         profunctors-5.3:Data.Profunctor.Composition
                         profunctors-5.3:Data.Profunctor.Rep
                         regex-1.0.2.0:Text.RE.ZeInternals.NamedCaptures
                         resourcet-1.2.2:Control.Monad.Trans.Resource.Internal
                         stm-conduit-4.0.1:Data.Conduit.Async.Composition
                         tagged-0.8.6:Data.Tagged
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         th-abstraction-0.3.1.0:Language.Haskell.TH.Datatype
                         unliftio-0.2.12:UnliftIO.Internals.Async
                         unordered-containers-0.2.10.0:Data.HashMap.Base
                         unordered-containers-0.2.10.0:Data.HashSet.Base
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.3:Data.Vector vector-0.12.0.3:Data.Vector.Primitive
                         vector-0.12.0.3:Data.Vector.Storable
                         vector-0.12.0.3:Data.Vector.Unboxed
                         vector-0.12.0.3:Data.Vector.Unboxed.Base
                         zlib-0.6.2.1:Codec.Compression.Zlib.Stream
import  -/  MissingH-1.4.1.0:Data.List.Utils a5d3124a702dde141b1748ec65eff7c8
import  -/  MissingH-1.4.1.0:Data.String.Utils 3c6f5fb5c65d71601de716632d6af8e7
import  -/  BuiltinFunctions c2568683b34fc338dfcf729a27429f2c
  exports: 4fabbbd5eb29dc18c7c546be1dc1f0af
  MethodInfo 6a165580203f95c3bbb3c6e1a7401605
  builtinMethods a5f8559d86c1c28119eba2ae1c7253ca
  findFunction 6b2ebb5b13ac6d0b81860d0bf3a98228
  methodChecks 6a165580203f95c3bbb3c6e1a7401605
  methodKwargsInfo 6a165580203f95c3bbb3c6e1a7401605
  methodName 6a165580203f95c3bbb3c6e1a7401605
import  -/  Language 93f0f50a5c7ee77231d71d6a98e7a8ca
  exports: 6aa5d24204c11e6b2a36767cd645b21f
  Assignment 4c0195db0fce84d2e9e704269e836114
  BinaryOp 96aebef7d64d3dee5736581d4fd6e787
  Block b24cb7195615293a75c1fd31f7a228f2
  BuiltinConstant df58b1abf5535a0feb227c294c839942
  Condition 5ee65797fc128c25b56f8d9e376f1857
  ConstSymbol a46ef274d615207b4535b4c02ac882bf
  Expression adc8def6a4b7257bb12aef607cf99238
  FuncName a3f44134039f1915698a791072d2c89e
  FuncName 441672d7eb62c1c87f9948f9c78adad7
  FunctionCall 23e51bd4b17fae101afcee641d2d9aa8
  Header 8cf973723c5aa6873311b104c4d82099
  IndexExpression 1b396d3ca8c8b8b8954b5ee9745fd162
  IndexOne f52ed1b667b98a95d0a7a81716ddc6ac
  IndexTwo 3e1dd14fe87dffa8c8b07b12dd664278
  ListExpression f5bec8e812d8b6e40f97bd422cace1cd
  Lookup 9af0655858caf9a44c41b1765edc7910
  MethodCall 009cfcd1ea42375ebf8583c67b0f9ceb
  MethodName 3a7b3929a7abcd9627c07af2ab496db6
  MethodName a5ecd529fe2b52118416127e8ed16401
  NGLReadSet 9d5f98c897d571785f336b174e593308
  NGOString 155e4815cffdc2c6617b34a2d52b7659
  Script 0fc401e1e5fe34e2879ec0a07ef86944
  Script 76fe0974e0c66dd0b2f466e0c453166d
  Sequence 629f5460e2af1b50496e5ea307340818
  UnaryOp 7ddfad96d4b058dc5f939d4cf881cf4f
  Variable 9b44f8caef4ce199ec53dca15d83da61
  Variable 6ea856e2345fb0911676ec309bc5b12f
  blockVariable adc8def6a4b7257bb12aef607cf99238
  nglBody 76fe0974e0c66dd0b2f466e0c453166d
  nglHeader 76fe0974e0c66dd0b2f466e0c453166d
  nglVersion 74bc5fb9a818f3ea1f170e1e0af29d3b
  recursiveAnalyse 3f8f09a6c366f341f144c8eb21071fbc
  staticValue 70a7102b10e8fbd212a25012e4a26904
  unwrapMethodName a5ecd529fe2b52118416127e8ed16401
import  -/  Modules d7b04bae20d952778746efecd6f653cd
  exports: e612fb66accb36645cea5fb0c9541754
  ArgCheckMinVersion 3ec1f3ef23ead7d4b07e23fac89d964a
  ArgCheckSymbol f4ae803ce57672c73318286649d365f2
  ArgInformation ac86c28a801be7ef411fb2dc303275ef
  Function ea8a515503aace5f77e7178c87cb63b2
  FunctionCheckMinNGLessVersion 1f7b1826ec020f4f08eeeddef73d57bf
  FunctionCheckNGLVersionIncompatibleChange 407fe082a0c1f0106639a8c73ee25630
  FunctionCheckReturnAssigned f2d40038e175a3f8e76947b49e6af006
  Module 5ea81178a37f2cc1f71e0dfed7af0657
  argChecks ac86c28a801be7ef411fb2dc303275ef
  argName ac86c28a801be7ef411fb2dc303275ef
  argRequired ac86c28a801be7ef411fb2dc303275ef
  funcChecks ea8a515503aace5f77e7178c87cb63b2
  funcKwArgs ea8a515503aace5f77e7178c87cb63b2
  modConstants 5ea81178a37f2cc1f71e0dfed7af0657
import  -/  NGLess.NGError 9175c652eec68d1a195f3eb2d7471cb5
  exports: 500bdef9411bf7c9c4e288fc5b605d1e
  NGLess 416e5726ee4c4987c25367d545064990
  throwScriptError 96adea1584aa4db243e08c54da5ff3c3
import  -/  Utils.Suggestion 559e2395dd1103e80283d24b7e6fd048
  exports: cc5fd4d32efb666b1cbe2686b5c39e5e
  Suggestion 2c28ffe66da3dd5e8ebcf53d8d6e2743
  findSuggestion ae232bc8a8bbf03bebc28db96d4a2b35
  suggestionMessage b2d3103f67fb55a2ce0dbda236c2c9b9
import  -/  base-4.12.0.0:Control.Monad 07eaec7fd256019b318d048d00f45b1c
import  -/  base-4.12.0.0:Data.Char 74f67fe9150a102afa18766e840f6832
import  -/  base-4.12.0.0:Data.Either 423bee738f25e5ee983d072216009be8
import  -/  base-4.12.0.0:Data.Foldable efb37371da929e7bc88d896298d2d979
import  -/  base-4.12.0.0:Data.Functor 069b2025a03e32fd228e74a86a58a075
import  -/  base-4.12.0.0:Data.List 17d0c71c557e42abe196f130788fd997
import  -/  base-4.12.0.0:Data.Maybe 9b76a39e833465c3c5b3c078b431417f
import  -/  base-4.12.0.0:Data.Tuple c719fc29608fe81c10bee9a1bf1e05ff
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.List 4014a3c8a3b7c31c8325f6bcf1feea4a
import  -/  base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import  -/  base-4.12.0.0:GHC.Unicode 87726eb81a3f9c9b22160a0afd5dc56a
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  either-5.0.1.1:Data.Either.Combinators b54519e5947e01a3ed8ef97ef2b7f833
import  -/  extra-1.6.18:Control.Monad.Extra 142829a227ff93cd2299d6da6c4e4ba9
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  mtl-2.2.2:Control.Monad.RWS e4325c7769eef92ca0f28bedee9060e6
import  -/  mtl-2.2.2:Control.Monad.State.Class 243c828469104fb94563be0ea268f418
import  -/  mtl-2.2.2:Control.Monad.Writer.Class 76e939c416a9f4ee6f62151a218e0c6b
import  -/  mtl-2.2.2:Control.Monad.Writer.Strict 392dcf676e730f002c82fc3acefb0289
import  -/  text-1.2.3.1:Data.Text e31b81fb349ec0694c028af9d897c500
import  -/  text-1.2.3.1:Data.Text.Internal 537e168590e8068f673f691833f78483
import  -/  text-1.2.3.1:Data.Text.Read 8eb3bc8b457c8f53f3f919bf4dc572bc
import  -/  text-1.2.3.1:Data.Text.Show b788b7edd0f190b1a7c4f4aba0e35f18
import  -/  transformers-0.5.6.2:Control.Monad.Trans.RWS.Lazy dcd645d598e52f06aa769d196ed6d11f
import  -/  transformers-0.5.6.2:Control.Monad.Trans.Writer.Strict fc0f4257da1fb59aa994838f60d03b7f
e5499c4b085efe8914eb947e5f14d6ba
  $s$fApplicativeRWST ::
    GHC.Base.Applicative
      (Control.Monad.Trans.RWS.Lazy.RWST
         r [Data.Text.Internal.Text] s Data.Functor.Identity.Identity)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ r @ s.
                  @ (Control.Monad.Trans.RWS.Lazy.RWST
                       r [Data.Text.Internal.Text] s Data.Functor.Identity.Identity)
                  (Validation.$s$fApplicativeRWST_$s$fFunctorRWST
                     @ r
                     @ [Data.Text.Internal.Text]
                     @ s)
                  (Validation.$s$fApplicativeRWST_$s$fApplicativeRWST_$cpure @ r @ s)
                  (Validation.$s$fApplicativeRWST_$s$fApplicativeRWST_$c<*> @ r @ s)
                  (Control.Monad.Trans.RWS.Lazy.$fApplicativeRWST2
                     @ [Data.Text.Internal.Text]
                     @ Data.Functor.Identity.Identity
                     @ r
                     @ s
                     (GHC.Base.$fMonoid[] @ Data.Text.Internal.Text)
                     Data.Functor.Identity.$fFunctorIdentity
                     Data.Functor.Identity.$fMonadIdentity)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                   <a -> b -> c>_R
                   ->_R <Control.Monad.Trans.RWS.Lazy.RWST
                           r [Data.Text.Internal.Text] s Data.Functor.Identity.Identity a>_R
                   ->_R <Control.Monad.Trans.RWS.Lazy.RWST
                           r [Data.Text.Internal.Text] s Data.Functor.Identity.Identity b>_R
                   ->_R Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                                 <r>_R
                                 <[Data.Text.Internal.Text]>_N
                                 <s>_N
                                 <Data.Functor.Identity.Identity>_R
                                 <c>_N))
                  (Control.Monad.Trans.RWS.Lazy.$fApplicativeRWST3
                     @ [Data.Text.Internal.Text]
                     @ Data.Functor.Identity.Identity
                     @ r
                     @ s
                     (GHC.Base.$fMonoid[] @ Data.Text.Internal.Text)
                     Data.Functor.Identity.$fFunctorIdentity
                     Data.Functor.Identity.$fMonadIdentity)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <Control.Monad.Trans.RWS.Lazy.RWST
                      r [Data.Text.Internal.Text] s Data.Functor.Identity.Identity a>_R
                   ->_R <Control.Monad.Trans.RWS.Lazy.RWST
                           r [Data.Text.Internal.Text] s Data.Functor.Identity.Identity b>_R
                   ->_R Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                                 <r>_R
                                 <[Data.Text.Internal.Text]>_N
                                 <s>_N
                                 <Data.Functor.Identity.Identity>_R
                                 <b>_N))
                  (\ @ a @ b ->
                   Control.Monad.Trans.RWS.Lazy.$fApplicativeRWST2
                     @ [Data.Text.Internal.Text]
                     @ Data.Functor.Identity.Identity
                     @ r
                     @ s
                     (GHC.Base.$fMonoid[] @ Data.Text.Internal.Text)
                     Data.Functor.Identity.$fFunctorIdentity
                     Data.Functor.Identity.$fMonadIdentity
                     @ a
                     @ b
                     @ a
                     (GHC.Base.const @ a @ b))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <Control.Monad.Trans.RWS.Lazy.RWST
                      r [Data.Text.Internal.Text] s Data.Functor.Identity.Identity a>_R
                   ->_R <Control.Monad.Trans.RWS.Lazy.RWST
                           r [Data.Text.Internal.Text] s Data.Functor.Identity.Identity b>_R
                   ->_R Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                                 <r>_R
                                 <[Data.Text.Internal.Text]>_N
                                 <s>_N
                                 <Data.Functor.Identity.Identity>_R
                                 <a>_N)) -}
3b3432b3c51e3c4d6fcf18e207cc6e5c
  $s$fApplicativeRWST_$s$fApplicativeRWST_$c<*> ::
    Control.Monad.Trans.RWS.Lazy.RWST
      r
      [Data.Text.Internal.Text]
      s
      Data.Functor.Identity.Identity
      (a -> b)
    -> Control.Monad.Trans.RWS.Lazy.RWST
         r [Data.Text.Internal.Text] s Data.Functor.Identity.Identity a
    -> Control.Monad.Trans.RWS.Lazy.RWST
         r [Data.Text.Internal.Text] s Data.Functor.Identity.Identity b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U(1*C1(U),1*U,1*U)))><L,1*C1(C1(U(1*U,1*U,1*U)))><L,U><L,U>m,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ s
                   @ a
                   @ b
                   (ds :: Control.Monad.Trans.RWS.Lazy.RWST
                            r
                            [Data.Text.Internal.Text]
                            s
                            Data.Functor.Identity.Identity
                            (a -> b))
                   (ds1 :: Control.Monad.Trans.RWS.Lazy.RWST
                             r [Data.Text.Internal.Text] s Data.Functor.Identity.Identity a)
                   (r1 :: r)
                   (s1 :: s) ->
                 let {
                   ds2 :: Data.Functor.Identity.Identity
                            (a -> b, s, [Data.Text.Internal.Text])
                   = ds
                       `cast`
                     (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                          <r>_R
                          <[Data.Text.Internal.Text]>_N
                          <s>_N
                          <Data.Functor.Identity.Identity>_R
                          <a -> b>_N)
                       r1
                       s1
                 } in
                 let {
                   ds3 :: Data.Functor.Identity.Identity
                            (a, s, [Data.Text.Internal.Text])
                   = ds1
                       `cast`
                     (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                          <r>_R
                          <[Data.Text.Internal.Text]>_N
                          <s>_N
                          <Data.Functor.Identity.Identity>_R
                          <a>_N)
                       r1
                       (case ds2
                               `cast`
                             (Data.Functor.Identity.N:Identity[0]
                                  <(a -> b, s,
                                    [Data.Text.Internal.Text])>_R) of wild { (,,) f s' w2 ->
                        s' })
                 } in
                 (case ds2
                         `cast`
                       (Data.Functor.Identity.N:Identity[0]
                            <(a -> b, s,
                              [Data.Text.Internal.Text])>_R) of wild { (,,) f s' w2 ->
                  f (case ds3
                            `cast`
                          (Data.Functor.Identity.N:Identity[0]
                               <(a, s, [Data.Text.Internal.Text])>_R) of wild1 { (,,) x s'' w' ->
                     x }) },
                  case ds3
                         `cast`
                       (Data.Functor.Identity.N:Identity[0]
                            <(a, s, [Data.Text.Internal.Text])>_R) of wild { (,,) x s'' w' ->
                  s'' },
                  GHC.Base.augment
                    @ Data.Text.Internal.Text
                    (\ @ b1
                       (c :: Data.Text.Internal.Text -> b1 -> b1)[OneShot]
                       (n :: b1)[OneShot] ->
                     case ds2
                            `cast`
                          (Data.Functor.Identity.N:Identity[0]
                               <(a -> b, s,
                                 [Data.Text.Internal.Text])>_R) of wild { (,,) f s' w2 ->
                     GHC.Base.foldr @ Data.Text.Internal.Text @ b1 c n w2 })
                    (case ds3
                            `cast`
                          (Data.Functor.Identity.N:Identity[0]
                               <(a, s, [Data.Text.Internal.Text])>_R) of wild { (,,) x s'' w' ->
                     w' }))
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <(b, s, [Data.Text.Internal.Text])>_R)))
                  `cast`
                (forall (r :: <*>_N) (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.RWS.Lazy.RWST
                    r
                    [Data.Text.Internal.Text]
                    s
                    Data.Functor.Identity.Identity
                    (a -> b)>_R
                 ->_R <Control.Monad.Trans.RWS.Lazy.RWST
                         r [Data.Text.Internal.Text] s Data.Functor.Identity.Identity a>_R
                 ->_R Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                               <r>_R
                               <[Data.Text.Internal.Text]>_N
                               <s>_N
                               <Data.Functor.Identity.Identity>_R
                               <b>_N)) -}
70b9a04edcb02e3dca86b656b8b41825
  $s$fApplicativeRWST_$s$fApplicativeRWST_$cpure ::
    a
    -> Control.Monad.Trans.RWS.Lazy.RWST
         r [Data.Text.Internal.Text] s Data.Functor.Identity.Identity a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ @ r @ s @ a (a1 :: a) (ds :: r) (s1 :: s) ->
                 (a1, s1, GHC.Types.[] @ Data.Text.Internal.Text))
                  `cast`
                (forall (r :: <*>_N) (s :: <*>_N) (a :: <*>_N).
                 <a>_R
                 ->_R (<r>_R
                       ->_R <s>_R
                       ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                     <(a, s,
                                       [Data.Text.Internal.Text])>_R)) ; Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                                                                                  <r>_R
                                                                                  <[Data.Text.Internal.Text]>_N
                                                                                  <s>_N
                                                                                  <Data.Functor.Identity.Identity>_R
                                                                                  <a>_N)) -}
658a2996a5fed0b7dabbcbdf26687758
  $s$fApplicativeRWST_$s$fFunctorRWST ::
    GHC.Base.Functor
      (Control.Monad.Trans.RWS.Lazy.RWST
         r w s Data.Functor.Identity.Identity)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ r @ w @ s.
                  @ (Control.Monad.Trans.RWS.Lazy.RWST
                       r w s Data.Functor.Identity.Identity)
                  (Control.Monad.Trans.RWS.Lazy.$fFunctorRWST_$cfmap
                     @ Data.Functor.Identity.Identity
                     @ r
                     @ w
                     @ s
                     Data.Functor.Identity.$fFunctorIdentity)
                  (\ @ a
                     @ b
                     (x :: a)
                     (eta :: Control.Monad.Trans.RWS.Lazy.RWST
                               r w s Data.Functor.Identity.Identity b)
                     (eta1 :: r)
                     (eta2 :: s) ->
                   let {
                     ds :: Data.Functor.Identity.Identity (b, s, w)
                     = eta
                         `cast`
                       (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                            <r>_R <w>_N <s>_N <Data.Functor.Identity.Identity>_R <b>_N)
                         eta1
                         eta2
                   } in
                   (x,
                    case ds
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <(b, s, w)>_R) of wild { (,,) a1 s' w1 ->
                    s' },
                    case ds
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <(b, s, w)>_R) of wild { (,,) a1 s' w1 ->
                    w1 })
                     `cast`
                   (Sym (Data.Functor.Identity.N:Identity[0] <(a, s, w)>_R)))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a>_R
                   ->_R <Control.Monad.Trans.RWS.Lazy.RWST
                           r w s Data.Functor.Identity.Identity b>_R
                   ->_R Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                                 <r>_R <w>_N <s>_N <Data.Functor.Identity.Identity>_R <a>_N)) -}
686eaa243f962953f0e222ad888f857a
  $s$fApplicativeWriterT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Writer.Strict.WriterT
         [Data.Text.Internal.Text] Data.Functor.Identity.Identity)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Writer.Strict.WriterT
                       [Data.Text.Internal.Text] Data.Functor.Identity.Identity)
                  (Validation.$s$fApplicativeWriterT_$s$fFunctorWriterT
                     @ [Data.Text.Internal.Text])
                  Validation.$s$fApplicativeWriterT_$s$fApplicativeWriterT_$cpure
                  Validation.$s$fApplicativeWriterT_$s$fApplicativeWriterT_$c<*>
                  (Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT_$cliftA2
                     @ [Data.Text.Internal.Text]
                     @ Data.Functor.Identity.Identity
                     (GHC.Base.$fMonoid[] @ Data.Text.Internal.Text)
                     Data.Functor.Identity.$fApplicativeIdentity)
                  (Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT2
                     @ [Data.Text.Internal.Text]
                     @ Data.Functor.Identity.Identity
                     (GHC.Base.$fMonoid[] @ Data.Text.Internal.Text)
                     Data.Functor.Identity.$fApplicativeIdentity)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <Control.Monad.Trans.Writer.Strict.WriterT
                      [Data.Text.Internal.Text] Data.Functor.Identity.Identity a>_R
                   ->_R <Control.Monad.Trans.Writer.Strict.WriterT
                           [Data.Text.Internal.Text] Data.Functor.Identity.Identity b>_R
                   ->_R Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                 <[Data.Text.Internal.Text]>_N
                                 <Data.Functor.Identity.Identity>_R
                                 <b>_N))
                  (\ @ a
                     @ b
                     (eta :: Control.Monad.Trans.Writer.Strict.WriterT
                               [Data.Text.Internal.Text] Data.Functor.Identity.Identity a) ->
                   Validation.$s$fApplicativeWriterT_$s$fApplicativeWriterT_$c<*>
                     @ b
                     @ a
                     (Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT1
                        @ [Data.Text.Internal.Text]
                        @ b
                        @ a
                        eta
                          `cast`
                        (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                             <[Data.Text.Internal.Text]>_N
                             <Data.Functor.Identity.Identity>_R
                             <a>_N ; Data.Functor.Identity.N:Identity[0]
                                         <(a, [Data.Text.Internal.Text])>_R))
                       `cast`
                     (Sym (Data.Functor.Identity.N:Identity[0]
                               <(b -> a,
                                 [Data.Text.Internal.Text])>_R) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                           <[Data.Text.Internal.Text]>_N
                                                                           <Data.Functor.Identity.Identity>_R
                                                                           <b -> a>_N))) -}
1daf892473dc17337d38ba2090e0cd6b
  $s$fApplicativeWriterT2 ::
    Control.Monad.Trans.Writer.Strict.WriterT
      [Data.Text.Internal.Text] Data.Functor.Identity.Identity a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         [Data.Text.Internal.Text] Data.Functor.Identity.Identity b
    -> Data.Functor.Identity.Identity (b, [Data.Text.Internal.Text])
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(A,1*U)><S,1*U(U,1*U)>m, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (w3 :: Control.Monad.Trans.Writer.Strict.WriterT
                            [Data.Text.Internal.Text] Data.Functor.Identity.Identity a)
                   (w4 :: Control.Monad.Trans.Writer.Strict.WriterT
                            [Data.Text.Internal.Text] Data.Functor.Identity.Identity b) ->
                 case w3
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <[Data.Text.Internal.Text]>_N
                           <Data.Functor.Identity.Identity>_R
                           <a>_N ; Data.Functor.Identity.N:Identity[0]
                                       <(a, [Data.Text.Internal.Text])>_R) of wild { (,) a1 w1 ->
                 case w4
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <[Data.Text.Internal.Text]>_N
                           <Data.Functor.Identity.Identity>_R
                           <b>_N ; Data.Functor.Identity.N:Identity[0]
                                       <(b, [Data.Text.Internal.Text])>_R) of wild1 { (,) b1 w' ->
                 (b1,
                  GHC.Base.augment
                    @ Data.Text.Internal.Text
                    (\ @ b2
                       (c :: Data.Text.Internal.Text -> b2 -> b2)[OneShot]
                       (n :: b2)[OneShot] ->
                     GHC.Base.foldr @ Data.Text.Internal.Text @ b2 c n w1)
                    w')
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <(b, [Data.Text.Internal.Text])>_R)) } }) -}
a82f896daf33dd05a02fb3d39b351fb3
  $s$fApplicativeWriterT_$c<* ::
    Control.Monad.Trans.Writer.Strict.WriterT
      [Data.Text.Internal.Text] Data.Functor.Identity.Identity a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         [Data.Text.Internal.Text] Data.Functor.Identity.Identity b
    -> Control.Monad.Trans.Writer.Strict.WriterT
         [Data.Text.Internal.Text] Data.Functor.Identity.Identity a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   @ b
                   (eta :: Control.Monad.Trans.Writer.Strict.WriterT
                             [Data.Text.Internal.Text] Data.Functor.Identity.Identity a) ->
                 Validation.$s$fApplicativeWriterT_$s$fApplicativeWriterT_$c<*>
                   @ b
                   @ a
                   (Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT1
                      @ [Data.Text.Internal.Text]
                      @ b
                      @ a
                      eta
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <[Data.Text.Internal.Text]>_N
                           <Data.Functor.Identity.Identity>_R
                           <a>_N ; Data.Functor.Identity.N:Identity[0]
                                       <(a, [Data.Text.Internal.Text])>_R))
                     `cast`
                   (Sym (Data.Functor.Identity.N:Identity[0]
                             <(b -> a,
                               [Data.Text.Internal.Text])>_R) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                         <[Data.Text.Internal.Text]>_N
                                                                         <Data.Functor.Identity.Identity>_R
                                                                         <b -> a>_N))) -}
dcb2b33e0277ddfde080304d59a0fee9
  $s$fApplicativeWriterT_$s$fApplicativeWriterT_$c<*> ::
    Control.Monad.Trans.Writer.Strict.WriterT
      [Data.Text.Internal.Text] Data.Functor.Identity.Identity (a -> b)
    -> Control.Monad.Trans.Writer.Strict.WriterT
         [Data.Text.Internal.Text] Data.Functor.Identity.Identity a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         [Data.Text.Internal.Text] Data.Functor.Identity.Identity b
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(1*C1(U),1*U)><S,1*U(U,1*U)>m,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   @ b
                   (f :: Control.Monad.Trans.Writer.Strict.WriterT
                           [Data.Text.Internal.Text] Data.Functor.Identity.Identity (a -> b))
                   (v :: Control.Monad.Trans.Writer.Strict.WriterT
                           [Data.Text.Internal.Text] Data.Functor.Identity.Identity a) ->
                 case f `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <[Data.Text.Internal.Text]>_N
                           <Data.Functor.Identity.Identity>_R
                           <a -> b>_N ; Data.Functor.Identity.N:Identity[0]
                                            <(a -> b,
                                              [Data.Text.Internal.Text])>_R) of wild { (,) a1 w1 ->
                 case v `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <[Data.Text.Internal.Text]>_N
                           <Data.Functor.Identity.Identity>_R
                           <a>_N ; Data.Functor.Identity.N:Identity[0]
                                       <(a, [Data.Text.Internal.Text])>_R) of wild1 { (,) b1 w' ->
                 (a1 b1,
                  GHC.Base.augment
                    @ Data.Text.Internal.Text
                    (\ @ b2
                       (c :: Data.Text.Internal.Text -> b2 -> b2)[OneShot]
                       (n :: b2)[OneShot] ->
                     GHC.Base.foldr @ Data.Text.Internal.Text @ b2 c n w1)
                    w')
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <(b, [Data.Text.Internal.Text])>_R)) } })
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Writer.Strict.WriterT
                    [Data.Text.Internal.Text]
                    Data.Functor.Identity.Identity
                    (a -> b)>_R
                 ->_R <Control.Monad.Trans.Writer.Strict.WriterT
                         [Data.Text.Internal.Text] Data.Functor.Identity.Identity a>_R
                 ->_R Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                               <[Data.Text.Internal.Text]>_N
                               <Data.Functor.Identity.Identity>_R
                               <b>_N)) -}
7252e9893b1facca2fee86feadf6b6ce
  $s$fApplicativeWriterT_$s$fApplicativeWriterT_$cpure ::
    a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         [Data.Text.Internal.Text] Data.Functor.Identity.Identity a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a (a1 :: a) -> (a1, GHC.Types.[] @ Data.Text.Internal.Text))
                  `cast`
                (forall (a :: <*>_N).
                 <a>_R
                 ->_R Sym (Data.Functor.Identity.N:Identity[0]
                               <(a,
                                 [Data.Text.Internal.Text])>_R) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                           <[Data.Text.Internal.Text]>_N
                                                                           <Data.Functor.Identity.Identity>_R
                                                                           <a>_N)) -}
10aa2dba2dc2dca843f157105e415671
  $s$fApplicativeWriterT_$s$fFunctorWriterT ::
    GHC.Base.Functor
      (Control.Monad.Trans.Writer.Strict.WriterT
         w Data.Functor.Identity.Identity)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ w.
                  @ (Control.Monad.Trans.Writer.Strict.WriterT
                       w Data.Functor.Identity.Identity)
                  (Validation.$s$fApplicativeWriterT_$s$fFunctorWriterT_$cfmap @ w)
                  (\ @ a @ b (x :: a) ->
                   Control.Monad.Trans.Writer.Strict.mapWriterT
                     @ Data.Functor.Identity.Identity
                     @ b
                     @ w
                     @ Data.Functor.Identity.Identity
                     @ a
                     @ w
                     (\ (ds :: (b, w)) -> case ds of wild { (,) a1 w1 -> (x, w1) })
                       `cast`
                     (Sym (Data.Functor.Identity.N:Identity[0] <(b, w)>_R)
                      ->_R Sym (Data.Functor.Identity.N:Identity[0] <(a, w)>_R))) -}
7e2f9e93bc73274aa436b88125e85759
  $s$fApplicativeWriterT_$s$fFunctorWriterT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.Writer.Strict.WriterT
         w Data.Functor.Identity.Identity a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         w Data.Functor.Identity.Identity b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U(U,U)>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ w @ a @ b (f :: a -> b) ->
                 Control.Monad.Trans.Writer.Strict.mapWriterT
                   @ Data.Functor.Identity.Identity
                   @ a
                   @ w
                   @ Data.Functor.Identity.Identity
                   @ b
                   @ w
                   (\ (ds :: (a, w)) -> case ds of wild { (,) a1 w1 -> (f a1, w1) })
                     `cast`
                   (Sym (Data.Functor.Identity.N:Identity[0] <(a, w)>_R)
                    ->_R Sym (Data.Functor.Identity.N:Identity[0] <(b, w)>_R))) -}
d19bd0c71ebe0f73cc81d951cfbdee30
  $s$fFunctorWriterT_$c<$ ::
    a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         w Data.Functor.Identity.Identity b
    -> Control.Monad.Trans.Writer.Strict.WriterT
         w Data.Functor.Identity.Identity a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(A,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ w @ a @ b (x :: a) ->
                 Control.Monad.Trans.Writer.Strict.mapWriterT
                   @ Data.Functor.Identity.Identity
                   @ b
                   @ w
                   @ Data.Functor.Identity.Identity
                   @ a
                   @ w
                   (\ (ds :: (b, w)) -> case ds of wild { (,) a1 w1 -> (x, w1) })
                     `cast`
                   (Sym (Data.Functor.Identity.N:Identity[0] <(b, w)>_R)
                    ->_R Sym (Data.Functor.Identity.N:Identity[0] <(a, w)>_R))) -}
5e334181af92a37a3756b9ec424ea588
  $s$fMonadRWST_$s$fMonadRWST_$c>> ::
    Control.Monad.Trans.RWS.Lazy.RWST
      r [Data.Text.Internal.Text] s Data.Functor.Identity.Identity a
    -> Control.Monad.Trans.RWS.Lazy.RWST
         r [Data.Text.Internal.Text] s Data.Functor.Identity.Identity b
    -> Control.Monad.Trans.RWS.Lazy.RWST
         r [Data.Text.Internal.Text] s Data.Functor.Identity.Identity b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U(A,1*U,1*U)))><L,1*C1(C1(U(1*U,1*U,1*U)))><L,U><L,U>m,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ s
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.RWS.Lazy.RWST
                            r [Data.Text.Internal.Text] s Data.Functor.Identity.Identity a)
                   (k :: Control.Monad.Trans.RWS.Lazy.RWST
                           r [Data.Text.Internal.Text] s Data.Functor.Identity.Identity b)
                   (r1 :: r)
                   (s1 :: s) ->
                 let {
                   ds :: Data.Functor.Identity.Identity
                           (a, s, [Data.Text.Internal.Text])
                   = m1
                       `cast`
                     (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                          <r>_R
                          <[Data.Text.Internal.Text]>_N
                          <s>_N
                          <Data.Functor.Identity.Identity>_R
                          <a>_N)
                       r1
                       s1
                 } in
                 let {
                   ds1 :: Data.Functor.Identity.Identity
                            (b, s, [Data.Text.Internal.Text])
                   = k `cast`
                     (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                          <r>_R
                          <[Data.Text.Internal.Text]>_N
                          <s>_N
                          <Data.Functor.Identity.Identity>_R
                          <b>_N)
                       r1
                       (case ds
                               `cast`
                             (Data.Functor.Identity.N:Identity[0]
                                  <(a, s, [Data.Text.Internal.Text])>_R) of wild { (,,) a1 s' w2 ->
                        s' })
                 } in
                 (case ds1
                         `cast`
                       (Data.Functor.Identity.N:Identity[0]
                            <(b, s, [Data.Text.Internal.Text])>_R) of wild { (,,) b1 s'' w' ->
                  b1 },
                  case ds1
                         `cast`
                       (Data.Functor.Identity.N:Identity[0]
                            <(b, s, [Data.Text.Internal.Text])>_R) of wild { (,,) b1 s'' w' ->
                  s'' },
                  GHC.Base.augment
                    @ Data.Text.Internal.Text
                    (\ @ b1
                       (c :: Data.Text.Internal.Text -> b1 -> b1)[OneShot]
                       (n :: b1)[OneShot] ->
                     case ds
                            `cast`
                          (Data.Functor.Identity.N:Identity[0]
                               <(a, s, [Data.Text.Internal.Text])>_R) of wild { (,,) a1 s' w2 ->
                     GHC.Base.foldr @ Data.Text.Internal.Text @ b1 c n w2 })
                    (case ds1
                            `cast`
                          (Data.Functor.Identity.N:Identity[0]
                               <(b, s, [Data.Text.Internal.Text])>_R) of wild { (,,) b1 s'' w' ->
                     w' }))
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <(b, s, [Data.Text.Internal.Text])>_R)))
                  `cast`
                (forall (r :: <*>_N) (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.RWS.Lazy.RWST
                    r [Data.Text.Internal.Text] s Data.Functor.Identity.Identity a>_R
                 ->_R <Control.Monad.Trans.RWS.Lazy.RWST
                         r [Data.Text.Internal.Text] s Data.Functor.Identity.Identity b>_R
                 ->_R Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                               <r>_R
                               <[Data.Text.Internal.Text]>_N
                               <s>_N
                               <Data.Functor.Identity.Identity>_R
                               <b>_N)) -}
69389c60f63a2719dee26d963b1bc846
  $s$fMonadWriterT_$s$fMonadWriterT_$c>> ::
    Control.Monad.Trans.Writer.Strict.WriterT
      [Data.Text.Internal.Text] Data.Functor.Identity.Identity a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         [Data.Text.Internal.Text] Data.Functor.Identity.Identity b
    -> Control.Monad.Trans.Writer.Strict.WriterT
         [Data.Text.Internal.Text] Data.Functor.Identity.Identity b
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(A,1*U)><S,1*U(U,1*U)>m, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Writer.Strict.WriterT
                            [Data.Text.Internal.Text] Data.Functor.Identity.Identity a)
                   (k :: Control.Monad.Trans.Writer.Strict.WriterT
                           [Data.Text.Internal.Text] Data.Functor.Identity.Identity b) ->
                 case m1
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <[Data.Text.Internal.Text]>_N
                           <Data.Functor.Identity.Identity>_R
                           <a>_N ; Data.Functor.Identity.N:Identity[0]
                                       <(a, [Data.Text.Internal.Text])>_R) of wild { (,) a1 w1 ->
                 case k `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <[Data.Text.Internal.Text]>_N
                           <Data.Functor.Identity.Identity>_R
                           <b>_N ; Data.Functor.Identity.N:Identity[0]
                                       <(b, [Data.Text.Internal.Text])>_R) of wild1 { (,) b1 w' ->
                 (b1,
                  GHC.Base.augment
                    @ Data.Text.Internal.Text
                    (\ @ b2
                       (c :: Data.Text.Internal.Text -> b2 -> b2)[OneShot]
                       (n :: b2)[OneShot] ->
                     GHC.Base.foldr @ Data.Text.Internal.Text @ b2 c n w1)
                    w')
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <(b, [Data.Text.Internal.Text])>_R)) } })
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Writer.Strict.WriterT
                    [Data.Text.Internal.Text] Data.Functor.Identity.Identity a>_R
                 ->_R <Control.Monad.Trans.Writer.Strict.WriterT
                         [Data.Text.Internal.Text] Data.Functor.Identity.Identity b>_R
                 ->_R Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                               <[Data.Text.Internal.Text]>_N
                               <Data.Functor.Identity.Identity>_R
                               <b>_N)) -}
633b73c86136873097fb00319b16de1d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Validation.$trModule3
                   Validation.$trModule1) -}
65b60357b49d245c699818ef775a529d
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Validation.$trModule2) -}
bce96b3447e0b16b484151ea99857db3
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Validation"#) -}
65120c40d9f5acf10d7d18394728e98f
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Validation.$trModule4) -}
58493fda33fe139f6cf549a472d2361f
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("NGLess-1.1.0-965Np14lOUvJ2rS9XGhph5"#) -}
d819aa89edce63f2a640fc80079807bc
  $wvalidate ::
    [Modules.Module]
    -> GHC.Maybe.Maybe Language.Header
    -> [(GHC.Types.Int, Language.Expression)]
    -> NGLess.NGError.NGLess Language.Script
  {- Arity: 3, Strictness: <L,U><L,U><S,U>, Inline: [2] -}
c19bde7b4af108053ae3aac3ae6a947b
  constant_used ::
    Data.Text.Internal.Text -> Language.Expression -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U,U,U)><S,1*U> -}
bc02825e46cfb27036440b4d2916631b
  uses_STDOUT :: Language.Expression -> GHC.Types.Bool
  {- Arity: 1,
     Unfolding: (Validation.constant_used Validation.uses_STDOUT1) -}
bf940905f528960e7ead12602bef2be5
  uses_STDOUT1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "STDOUT"#) -}
00e6dfdc58c540881c459164ef017954
  validate ::
    [Modules.Module]
    -> Language.Script -> NGLess.NGError.NGLess Language.Script
  {- Arity: 2, Strictness: <L,U><S(LS),1*U(U,U)>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: [Modules.Module]) (w1 :: Language.Script) ->
                 case w1 of ww { Language.Script ww1 ww2 ->
                 Validation.$wvalidate w ww1 ww2 }) -}
"SPEC/Validation $fApplicativeRWST @ [Text] @ Identity _ _" [orphan] forall @ r
                                                                            @ s
                                                                            (v2 :: GHC.Base.Monad
                                                                                     Data.Functor.Identity.Identity)
                                                                            (v1 :: GHC.Base.Functor
                                                                                     Data.Functor.Identity.Identity)
                                                                            (v :: GHC.Base.Monoid
                                                                                    [Data.Text.Internal.Text])
  Control.Monad.Trans.RWS.Lazy.$fApplicativeRWST @ [Data.Text.Internal.Text]
                                                 @ Data.Functor.Identity.Identity
                                                 @ r
                                                 @ s
                                                 v
                                                 v1
                                                 v2
  = Validation.$s$fApplicativeRWST @ r @ s
"SPEC/Validation $fApplicativeRWST_$c<*> @ [Text] @ Identity _ _" [orphan] forall @ r
                                                                                  @ s
                                                                                  ($dMonad :: GHC.Base.Monad
                                                                                                Data.Functor.Identity.Identity)
                                                                                  ($dFunctor :: GHC.Base.Functor
                                                                                                  Data.Functor.Identity.Identity)
                                                                                  ($dMonoid :: GHC.Base.Monoid
                                                                                                 [Data.Text.Internal.Text])
  Control.Monad.Trans.RWS.Lazy.$fApplicativeRWST_$c<*> @ [Data.Text.Internal.Text]
                                                       @ Data.Functor.Identity.Identity
                                                       @ r
                                                       @ s
                                                       $dMonoid
                                                       $dFunctor
                                                       $dMonad
  = Validation.$s$fApplicativeRWST_$s$fApplicativeRWST_$c<*> @ r @ s
"SPEC/Validation $fApplicativeRWST_$cpure @ [Text] @ Identity _ _" [orphan] forall @ r
                                                                                   @ s
                                                                                   ($dMonad :: GHC.Base.Monad
                                                                                                 Data.Functor.Identity.Identity)
                                                                                   ($dFunctor :: GHC.Base.Functor
                                                                                                   Data.Functor.Identity.Identity)
                                                                                   ($dMonoid :: GHC.Base.Monoid
                                                                                                  [Data.Text.Internal.Text])
  Control.Monad.Trans.RWS.Lazy.$fApplicativeRWST_$cpure @ [Data.Text.Internal.Text]
                                                        @ Data.Functor.Identity.Identity
                                                        @ r
                                                        @ s
                                                        $dMonoid
                                                        $dFunctor
                                                        $dMonad
  = Validation.$s$fApplicativeRWST_$s$fApplicativeRWST_$cpure @ r @ s
"SPEC/Validation $fApplicativeWriterT @ [Text] @ Identity" [orphan] forall (v1 :: GHC.Base.Applicative
                                                                                    Data.Functor.Identity.Identity)
                                                                           (v :: GHC.Base.Monoid
                                                                                   [Data.Text.Internal.Text])
  Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT @ [Data.Text.Internal.Text]
                                                         @ Data.Functor.Identity.Identity
                                                         v
                                                         v1
  = Validation.$s$fApplicativeWriterT
"SPEC/Validation $fApplicativeWriterT2 @ [Text] @ Identity" [orphan] [2] forall (w2 :: GHC.Base.Applicative
                                                                                         Data.Functor.Identity.Identity)
                                                                                (w1 :: GHC.Base.Monoid
                                                                                         [Data.Text.Internal.Text])
  Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT2 @ [Data.Text.Internal.Text]
                                                          @ Data.Functor.Identity.Identity
                                                          w1
                                                          w2
  = Validation.$s$fApplicativeWriterT2
"SPEC/Validation $fApplicativeWriterT_$c<* @ [Text] @ Identity" [orphan] forall ($dApplicative :: GHC.Base.Applicative
                                                                                                    Data.Functor.Identity.Identity)
                                                                                ($dMonoid :: GHC.Base.Monoid
                                                                                               [Data.Text.Internal.Text])
  Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT_$c<* @ [Data.Text.Internal.Text]
                                                              @ Data.Functor.Identity.Identity
                                                              $dMonoid
                                                              $dApplicative
  = Validation.$s$fApplicativeWriterT_$c<*
"SPEC/Validation $fApplicativeWriterT_$c<*> @ [Text] @ Identity" [orphan] forall ($dApplicative :: GHC.Base.Applicative
                                                                                                     Data.Functor.Identity.Identity)
                                                                                 ($dMonoid :: GHC.Base.Monoid
                                                                                                [Data.Text.Internal.Text])
  Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT_$c<*> @ [Data.Text.Internal.Text]
                                                               @ Data.Functor.Identity.Identity
                                                               $dMonoid
                                                               $dApplicative
  = Validation.$s$fApplicativeWriterT_$s$fApplicativeWriterT_$c<*>
"SPEC/Validation $fApplicativeWriterT_$cpure @ [Text] @ Identity" [orphan] forall ($dApplicative :: GHC.Base.Applicative
                                                                                                      Data.Functor.Identity.Identity)
                                                                                  ($dMonoid :: GHC.Base.Monoid
                                                                                                 [Data.Text.Internal.Text])
  Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT_$cpure @ [Data.Text.Internal.Text]
                                                                @ Data.Functor.Identity.Identity
                                                                $dMonoid
                                                                $dApplicative
  = Validation.$s$fApplicativeWriterT_$s$fApplicativeWriterT_$cpure
"SPEC/Validation $fFunctorRWST @ Identity _ _ _" [orphan] forall @ r
                                                                 @ w
                                                                 @ s
                                                                 (v :: GHC.Base.Functor
                                                                         Data.Functor.Identity.Identity)
  Control.Monad.Trans.RWS.Lazy.$fFunctorRWST @ Data.Functor.Identity.Identity
                                             @ r
                                             @ w
                                             @ s
                                             v
  = Validation.$s$fApplicativeRWST_$s$fFunctorRWST @ r @ w @ s
"SPEC/Validation $fFunctorWriterT @ Identity _" [orphan] forall @ w
                                                                (v :: GHC.Base.Functor
                                                                        Data.Functor.Identity.Identity)
  Control.Monad.Trans.Writer.Strict.$fFunctorWriterT @ Data.Functor.Identity.Identity
                                                     @ w
                                                     v
  = Validation.$s$fApplicativeWriterT_$s$fFunctorWriterT @ w
"SPEC/Validation $fFunctorWriterT_$c<$ @ Identity _" [orphan] forall @ w
                                                                     ($dFunctor :: GHC.Base.Functor
                                                                                     Data.Functor.Identity.Identity)
  Control.Monad.Trans.Writer.Strict.$fFunctorWriterT_$c<$ @ Data.Functor.Identity.Identity
                                                          @ w
                                                          $dFunctor
  = Validation.$s$fFunctorWriterT_$c<$ @ w
"SPEC/Validation $fFunctorWriterT_$cfmap @ Identity _" [orphan] forall @ w
                                                                       ($dFunctor :: GHC.Base.Functor
                                                                                       Data.Functor.Identity.Identity)
  Control.Monad.Trans.Writer.Strict.$fFunctorWriterT_$cfmap @ Data.Functor.Identity.Identity
                                                            @ w
                                                            $dFunctor
  = Validation.$s$fApplicativeWriterT_$s$fFunctorWriterT_$cfmap @ w
"SPEC/Validation $fMonadRWST_$c>> @ [Text] @ Identity _ _" [orphan] forall @ r
                                                                           @ s
                                                                           ($dMonad :: GHC.Base.Monad
                                                                                         Data.Functor.Identity.Identity)
                                                                           ($dMonoid :: GHC.Base.Monoid
                                                                                          [Data.Text.Internal.Text])
  Control.Monad.Trans.RWS.Lazy.$fMonadRWST_$c>> @ [Data.Text.Internal.Text]
                                                @ Data.Functor.Identity.Identity
                                                @ r
                                                @ s
                                                $dMonoid
                                                $dMonad
  = Validation.$s$fMonadRWST_$s$fMonadRWST_$c>> @ r @ s
"SPEC/Validation $fMonadWriterT_$c>> @ [Text] @ Identity" [orphan] forall ($dMonad :: GHC.Base.Monad
                                                                                        Data.Functor.Identity.Identity)
                                                                          ($dMonoid :: GHC.Base.Monoid
                                                                                         [Data.Text.Internal.Text])
  Control.Monad.Trans.Writer.Strict.$fMonadWriterT_$c>> @ [Data.Text.Internal.Text]
                                                        @ Data.Functor.Identity.Identity
                                                        $dMonoid
                                                        $dMonad
  = Validation.$s$fMonadWriterT_$s$fMonadWriterT_$c>>
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

